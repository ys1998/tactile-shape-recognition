
MainController_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800aaf8  0800aaf8  0001aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800abd0  0800abd0  0001abd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800abd4  0800abd4  0001abd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  20000000  0800abd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000131c  200001d0  0800ada4  000201d0  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200014ec  0800ada4  000214ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000200a2  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000474c  00000000  00000000  00040297  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000418  00000000  00000000  000449e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008e70  00000000  00000000  00044e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004137  00000000  00000000  0004dc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00051da7  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000039ec  00000000  00000000  00051e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  00055810  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800aadc 	.word	0x0800aadc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	0800aadc 	.word	0x0800aadc

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f002 fabd 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f82c 	bl	80001c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f009 f9b6 	bl	80094d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <HAL_DeInit+0x2c>)
 800017e:	f04f 32ff 	mov.w	r2, #4294967295
 8000182:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <HAL_DeInit+0x2c>)
 8000186:	2200      	movs	r2, #0
 8000188:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800018a:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <HAL_DeInit+0x2c>)
 800018c:	f04f 32ff 	mov.w	r2, #4294967295
 8000190:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <HAL_DeInit+0x2c>)
 8000194:	2200      	movs	r2, #0
 8000196:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000198:	f000 f80c 	bl	80001b4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800019c:	2300      	movs	r3, #0
}
 800019e:	4618      	mov	r0, r3
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001c8:	4b12      	ldr	r3, [pc, #72]	; (8000214 <HAL_InitTick+0x54>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	4b12      	ldr	r3, [pc, #72]	; (8000218 <HAL_InitTick+0x58>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	4619      	mov	r1, r3
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80001da:	fbb2 f3f3 	udiv	r3, r2, r3
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fac5 	bl	800276e <HAL_SYSTICK_Config>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00e      	b.n	800020c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2b0f      	cmp	r3, #15
 80001f2:	d80a      	bhi.n	800020a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f4:	2200      	movs	r2, #0
 80001f6:	6879      	ldr	r1, [r7, #4]
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f002 fa79 	bl	80026f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <HAL_InitTick+0x5c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000206:	2300      	movs	r3, #0
 8000208:	e000      	b.n	800020c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800020a:	2301      	movs	r3, #1
}
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000120 	.word	0x20000120
 8000218:	20000008 	.word	0x20000008
 800021c:	20000004 	.word	0x20000004

08000220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	4a03      	ldr	r2, [pc, #12]	; (8000240 <HAL_IncTick+0x20>)
 8000232:	6013      	str	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	20000008 	.word	0x20000008
 8000240:	2000041c 	.word	0x2000041c

08000244 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	2000041c 	.word	0x2000041c

08000258 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800025c:	4b02      	ldr	r3, [pc, #8]	; (8000268 <HAL_GetTickPrio+0x10>)
 800025e:	681b      	ldr	r3, [r3, #0]
}
 8000260:	4618      	mov	r0, r3
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8000276:	2300      	movs	r3, #0
 8000278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <HAL_SetTickFreq+0x38>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	429a      	cmp	r2, r3
 8000282:	d009      	beq.n	8000298 <HAL_SetTickFreq+0x2c>
  {
    uwTickFreq = Freq;
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <HAL_SetTickFreq+0x38>)
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <HAL_SetTickFreq+0x3c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ff96 	bl	80001c0 <HAL_InitTick>
 8000294:	4603      	mov	r3, r0
 8000296:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000298:	7bfb      	ldrb	r3, [r7, #15]
}
 800029a:	4618      	mov	r0, r3
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000004 	.word	0x20000004

080002ac <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80002b0:	4b02      	ldr	r3, [pc, #8]	; (80002bc <HAL_GetTickFreq+0x10>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	20000008 	.word	0x20000008

080002c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002c8:	f7ff ffbc 	bl	8000244 <HAL_GetTick>
 80002cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002d8:	d005      	beq.n	80002e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <HAL_Delay+0x40>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	4413      	add	r3, r2
 80002e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002e6:	bf00      	nop
 80002e8:	f7ff ffac 	bl	8000244 <HAL_GetTick>
 80002ec:	4602      	mov	r2, r0
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	1ad2      	subs	r2, r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d3f7      	bcc.n	80002e8 <HAL_Delay+0x28>
  {
  }
}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000008 	.word	0x20000008

08000304 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <HAL_SuspendTick+0x18>)
 800030a:	4b04      	ldr	r3, [pc, #16]	; (800031c <HAL_SuspendTick+0x18>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f023 0302 	bic.w	r3, r3, #2
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	e000e010 	.word	0xe000e010

08000320 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <HAL_ResumeTick+0x18>)
 8000326:	4b04      	ldr	r3, [pc, #16]	; (8000338 <HAL_ResumeTick+0x18>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	e000e010 	.word	0xe000e010

0800033c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return __STM32F1xx_HAL_VERSION;
 8000340:	4b02      	ldr	r3, [pc, #8]	; (800034c <HAL_GetHalVersion+0x10>)
}
 8000342:	4618      	mov	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	01010200 	.word	0x01010200

08000350 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <HAL_GetREVID+0x14>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	0c1b      	lsrs	r3, r3, #16
}
 800035a:	4618      	mov	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	e0042000 	.word	0xe0042000

08000368 <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <HAL_GetDEVID+0x14>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000374:	4618      	mov	r0, r3
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	e0042000 	.word	0xe0042000

08000380 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000386:	4b04      	ldr	r3, [pc, #16]	; (8000398 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6053      	str	r3, [r2, #4]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	e0042000 	.word	0xe0042000

0800039c <HAL_DBGMCU_DisableDBGSleepMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6053      	str	r3, [r2, #4]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	e0042000 	.word	0xe0042000

080003b8 <HAL_DBGMCU_EnableDBGStopMode>:
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f043 0302 	orr.w	r3, r3, #2
 80003c6:	6053      	str	r3, [r2, #4]
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	e0042000 	.word	0xe0042000

080003d4 <HAL_DBGMCU_DisableDBGStopMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	f023 0302 	bic.w	r3, r3, #2
 80003e2:	6053      	str	r3, [r2, #4]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	e0042000 	.word	0xe0042000

080003f0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6053      	str	r3, [r2, #4]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	e0042000 	.word	0xe0042000

0800040c <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f023 0304 	bic.w	r3, r3, #4
 800041a:	6053      	str	r3, [r2, #4]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	e0042000 	.word	0xe0042000

08000428 <HAL_GetUID>:
  * @brief Return the unique device identifier (UID based on 96 bits)
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_GetUID+0x30>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	601a      	str	r2, [r3, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3304      	adds	r3, #4
 800043c:	4a07      	ldr	r2, [pc, #28]	; (800045c <HAL_GetUID+0x34>)
 800043e:	6812      	ldr	r2, [r2, #0]
 8000440:	601a      	str	r2, [r3, #0]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3308      	adds	r3, #8
 8000446:	4a06      	ldr	r2, [pc, #24]	; (8000460 <HAL_GetUID+0x38>)
 8000448:	6812      	ldr	r2, [r2, #0]
 800044a:	601a      	str	r2, [r3, #0]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	1ffff7e8 	.word	0x1ffff7e8
 800045c:	1ffff7ec 	.word	0x1ffff7ec
 8000460:	1ffff7f0 	.word	0x1ffff7f0

08000464 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800046c:	2300      	movs	r3, #0
 800046e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000470:	2300      	movs	r3, #0
 8000472:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d101      	bne.n	8000486 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000482:	2301      	movs	r3, #1
 8000484:	e0be      	b.n	8000604 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000490:	2b00      	cmp	r3, #0
 8000492:	d109      	bne.n	80004a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2200      	movs	r2, #0
 800049e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f009 f86a 	bl	800957c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f001 f851 	bl	8001550 <ADC_ConversionStop_Disable>
 80004ae:	4603      	mov	r3, r0
 80004b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b6:	f003 0310 	and.w	r3, r3, #16
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8099 	bne.w	80005f2 <HAL_ADC_Init+0x18e>
 80004c0:	7dfb      	ldrb	r3, [r7, #23]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	f040 8095 	bne.w	80005f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80004d0:	f023 0302 	bic.w	r3, r3, #2
 80004d4:	f043 0202 	orr.w	r2, r3, #2
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80004e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80004ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80004ee:	68ba      	ldr	r2, [r7, #8]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004fc:	d003      	beq.n	8000506 <HAL_ADC_Init+0xa2>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d102      	bne.n	800050c <HAL_ADC_Init+0xa8>
 8000506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050a:	e000      	b.n	800050e <HAL_ADC_Init+0xaa>
 800050c:	2300      	movs	r3, #0
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4313      	orrs	r3, r2
 8000512:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d119      	bne.n	8000550 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d109      	bne.n	8000538 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	3b01      	subs	r3, #1
 800052a:	035a      	lsls	r2, r3, #13
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	4313      	orrs	r3, r2
 8000530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	e00b      	b.n	8000550 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800053c:	f043 0220 	orr.w	r2, r3, #32
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000548:	f043 0201 	orr.w	r2, r3, #1
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	6812      	ldr	r2, [r2, #0]
 8000558:	6852      	ldr	r2, [r2, #4]
 800055a:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	430a      	orrs	r2, r1
 8000562:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6899      	ldr	r1, [r3, #8]
 800056e:	4b27      	ldr	r3, [pc, #156]	; (800060c <HAL_ADC_Init+0x1a8>)
 8000570:	400b      	ands	r3, r1
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	430b      	orrs	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000580:	d003      	beq.n	800058a <HAL_ADC_Init+0x126>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d104      	bne.n	8000594 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	3b01      	subs	r3, #1
 8000590:	051b      	lsls	r3, r3, #20
 8000592:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800059e:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	430a      	orrs	r2, r1
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	689a      	ldr	r2, [r3, #8]
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_ADC_Init+0x1ac>)
 80005b0:	4013      	ands	r3, r2
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d10b      	bne.n	80005d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c2:	f023 0303 	bic.w	r3, r3, #3
 80005c6:	f043 0201 	orr.w	r2, r3, #1
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80005ce:	e018      	b.n	8000602 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005d4:	f023 0312 	bic.w	r3, r3, #18
 80005d8:	f043 0210 	orr.w	r2, r3, #16
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e4:	f043 0201 	orr.w	r2, r3, #1
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80005f0:	e007      	b.n	8000602 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f6:	f043 0210 	orr.w	r2, r3, #16
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000602:	7dfb      	ldrb	r3, [r7, #23]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	ffe1f7fd 	.word	0xffe1f7fd
 8000610:	ff1f0efe 	.word	0xff1f0efe

08000614 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d101      	bne.n	800062a <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e0ad      	b.n	8000786 <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800062e:	f043 0202 	orr.w	r2, r3, #2
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 ff8a 	bl	8001550 <ADC_ConversionStop_Disable>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	f040 809a 	bne.w	800077c <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f06f 021f 	mvn.w	r2, #31
 8000650:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6859      	ldr	r1, [r3, #4]
 800065c:	4b4c      	ldr	r3, [pc, #304]	; (8000790 <HAL_ADC_DeInit+0x17c>)
 800065e:	400b      	ands	r3, r1
 8000660:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6899      	ldr	r1, [r3, #8]
 800066c:	4b49      	ldr	r3, [pc, #292]	; (8000794 <HAL_ADC_DeInit+0x180>)
 800066e:	400b      	ands	r3, r1
 8000670:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	6812      	ldr	r2, [r2, #0]
 800067a:	68d2      	ldr	r2, [r2, #12]
 800067c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8000680:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	6812      	ldr	r2, [r2, #0]
 800068a:	6912      	ldr	r2, [r2, #16]
 800068c:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8000690:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	69db      	ldr	r3, [r3, #28]
 80006c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80006c8:	f023 030f 	bic.w	r3, r3, #15
 80006cc:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6a1b      	ldr	r3, [r3, #32]
 80006d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80006f0:	f023 030f 	bic.w	r3, r3, #15
 80006f4:	6253      	str	r3, [r2, #36]	; 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000700:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000704:	f023 030f 	bic.w	r3, r3, #15
 8000708:	6293      	str	r3, [r2, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000714:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	6812      	ldr	r2, [r2, #0]
 8000722:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000724:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	6812      	ldr	r2, [r2, #0]
 8000732:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000734:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000744:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000754:	0d9b      	lsrs	r3, r3, #22
 8000756:	059b      	lsls	r3, r3, #22
 8000758:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000764:	0d9b      	lsrs	r3, r3, #22
 8000766:	059b      	lsls	r3, r3, #22
 8000768:	6393      	str	r3, [r2, #56]	; 0x38
    /*                                                                        */
    /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
    /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
    
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f008 ff3c 	bl	80095e8 <HAL_ADC_MspDeInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	ff3f0000 	.word	0xff3f0000
 8000794:	ff0106f0 	.word	0xff0106f0
  * @brief  Initializes the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
  * @brief  DeInitializes the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */ 
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d101      	bne.n	80007d6 <HAL_ADC_Start+0x1a>
 80007d2:	2302      	movs	r3, #2
 80007d4:	e098      	b.n	8000908 <HAL_ADC_Start+0x14c>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 fe64 	bl	80014ac <ADC_Enable>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f040 8087 	bne.w	80008fe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007f8:	f023 0301 	bic.w	r3, r3, #1
 80007fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a41      	ldr	r2, [pc, #260]	; (8000910 <HAL_ADC_Start+0x154>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d105      	bne.n	800081a <HAL_ADC_Start+0x5e>
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <HAL_ADC_Start+0x158>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d115      	bne.n	8000846 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000830:	2b00      	cmp	r3, #0
 8000832:	d026      	beq.n	8000882 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000838:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800083c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000844:	e01d      	b.n	8000882 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <HAL_ADC_Start+0x158>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d004      	beq.n	8000866 <HAL_ADC_Start+0xaa>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <HAL_ADC_Start+0x154>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10d      	bne.n	8000882 <HAL_ADC_Start+0xc6>
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <HAL_ADC_Start+0x158>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800086e:	2b00      	cmp	r3, #0
 8000870:	d007      	beq.n	8000882 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000876:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800087a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d006      	beq.n	800089c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000892:	f023 0206 	bic.w	r2, r3, #6
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
 800089a:	e002      	b.n	80008a2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f06f 0202 	mvn.w	r2, #2
 80008b2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80008be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80008c2:	d113      	bne.n	80008ec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80008c8:	4a11      	ldr	r2, [pc, #68]	; (8000910 <HAL_ADC_Start+0x154>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d105      	bne.n	80008da <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_ADC_Start+0x158>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d108      	bne.n	80008ec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	6892      	ldr	r2, [r2, #8]
 80008e4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	e00c      	b.n	8000906 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	6892      	ldr	r2, [r2, #8]
 80008f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	e003      	b.n	8000906 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000906:	7bfb      	ldrb	r3, [r7, #15]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40012800 	.word	0x40012800
 8000914:	40012400 	.word	0x40012400

08000918 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800092a:	2b01      	cmp	r3, #1
 800092c:	d101      	bne.n	8000932 <HAL_ADC_Stop+0x1a>
 800092e:	2302      	movs	r3, #2
 8000930:	e01a      	b.n	8000968 <HAL_ADC_Stop+0x50>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 fe08 	bl	8001550 <ADC_ConversionStop_Disable>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d109      	bne.n	800095e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000952:	f023 0301 	bic.w	r3, r3, #1
 8000956:	f043 0201 	orr.w	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000986:	f7ff fc5d 	bl	8000244 <HAL_GetTick>
 800098a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000996:	2b00      	cmp	r3, #0
 8000998:	d00b      	beq.n	80009b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099e:	f043 0220 	orr.w	r2, r3, #32
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e0c8      	b.n	8000b44 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d12a      	bne.n	8000a16 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d123      	bne.n	8000a16 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80009ce:	e01a      	b.n	8000a06 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d6:	d016      	beq.n	8000a06 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d007      	beq.n	80009ee <HAL_ADC_PollForConversion+0x7e>
 80009de:	f7ff fc31 	bl	8000244 <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d90b      	bls.n	8000a06 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f2:	f043 0204 	orr.w	r2, r3, #4
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000a02:	2303      	movs	r3, #3
 8000a04:	e09e      	b.n	8000b44 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0dd      	beq.n	80009d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a14:	e06c      	b.n	8000af0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a16:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <HAL_ADC_PollForConversion+0x1dc>)
 8000a18:	681c      	ldr	r4, [r3, #0]
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f005 ff88 	bl	8006930 <HAL_RCCEx_GetPeriphCLKFreq>
 8000a20:	4603      	mov	r3, r0
 8000a22:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6919      	ldr	r1, [r3, #16]
 8000a2c:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <HAL_ADC_PollForConversion+0x1e0>)
 8000a2e:	400b      	ands	r3, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d118      	bne.n	8000a66 <HAL_ADC_PollForConversion+0xf6>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68d9      	ldr	r1, [r3, #12]
 8000a3a:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <HAL_ADC_PollForConversion+0x1e4>)
 8000a3c:	400b      	ands	r3, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d111      	bne.n	8000a66 <HAL_ADC_PollForConversion+0xf6>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6919      	ldr	r1, [r3, #16]
 8000a48:	4b43      	ldr	r3, [pc, #268]	; (8000b58 <HAL_ADC_PollForConversion+0x1e8>)
 8000a4a:	400b      	ands	r3, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d108      	bne.n	8000a62 <HAL_ADC_PollForConversion+0xf2>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68d9      	ldr	r1, [r3, #12]
 8000a56:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <HAL_ADC_PollForConversion+0x1ec>)
 8000a58:	400b      	ands	r3, r1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d101      	bne.n	8000a62 <HAL_ADC_PollForConversion+0xf2>
 8000a5e:	2314      	movs	r3, #20
 8000a60:	e020      	b.n	8000aa4 <HAL_ADC_PollForConversion+0x134>
 8000a62:	2329      	movs	r3, #41	; 0x29
 8000a64:	e01e      	b.n	8000aa4 <HAL_ADC_PollForConversion+0x134>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6919      	ldr	r1, [r3, #16]
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <HAL_ADC_PollForConversion+0x1e8>)
 8000a6e:	400b      	ands	r3, r1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d106      	bne.n	8000a82 <HAL_ADC_PollForConversion+0x112>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68d9      	ldr	r1, [r3, #12]
 8000a7a:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <HAL_ADC_PollForConversion+0x1ec>)
 8000a7c:	400b      	ands	r3, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00d      	beq.n	8000a9e <HAL_ADC_PollForConversion+0x12e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6919      	ldr	r1, [r3, #16]
 8000a88:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <HAL_ADC_PollForConversion+0x1f0>)
 8000a8a:	400b      	ands	r3, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d108      	bne.n	8000aa2 <HAL_ADC_PollForConversion+0x132>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68d9      	ldr	r1, [r3, #12]
 8000a96:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <HAL_ADC_PollForConversion+0x1f0>)
 8000a98:	400b      	ands	r3, r1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_ADC_PollForConversion+0x132>
 8000a9e:	2354      	movs	r3, #84	; 0x54
 8000aa0:	e000      	b.n	8000aa4 <HAL_ADC_PollForConversion+0x134>
 8000aa2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000aa4:	fb03 f302 	mul.w	r3, r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000aaa:	e01d      	b.n	8000ae8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab2:	d016      	beq.n	8000ae2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d007      	beq.n	8000aca <HAL_ADC_PollForConversion+0x15a>
 8000aba:	f7ff fbc3 	bl	8000244 <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	1ad2      	subs	r2, r2, r3
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d90b      	bls.n	8000ae2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ace:	f043 0204 	orr.w	r2, r3, #4
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e030      	b.n	8000b44 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d3dd      	bcc.n	8000aac <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f06f 0212 	mvn.w	r2, #18
 8000af8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b10:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b14:	d115      	bne.n	8000b42 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d111      	bne.n	8000b42 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d105      	bne.n	8000b42 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3a:	f043 0201 	orr.w	r2, r3, #1
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	371c      	adds	r7, #28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	20000120 	.word	0x20000120
 8000b50:	24924924 	.word	0x24924924
 8000b54:	00924924 	.word	0x00924924
 8000b58:	12492492 	.word	0x12492492
 8000b5c:	00492492 	.word	0x00492492
 8000b60:	00249249 	.word	0x00249249

08000b64 <HAL_ADC_PollForEvent>:
  *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U; 
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EVENT_TYPE(EventType));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b74:	f7ff fb66 	bl	8000244 <HAL_GetTick>
 8000b78:	6178      	str	r0, [r7, #20]
  
  /* Check selected event flag */
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8000b7a:	e01a      	b.n	8000bb2 <HAL_ADC_PollForEvent+0x4e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b82:	d016      	beq.n	8000bb2 <HAL_ADC_PollForEvent+0x4e>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d007      	beq.n	8000b9a <HAL_ADC_PollForEvent+0x36>
 8000b8a:	f7ff fb5b 	bl	8000244 <HAL_GetTick>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d90b      	bls.n	8000bb2 <HAL_ADC_PollForEvent+0x4e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9e:	f043 0204 	orr.w	r2, r3, #4
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e013      	b.n	8000bda <HAL_ADC_PollForEvent+0x76>
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d1dc      	bne.n	8000b7c <HAL_ADC_PollForEvent+0x18>
    }
  }
  
  /* Analog watchdog (level out of window) event */
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
    
  /* Clear ADC analog watchdog flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f06f 0201 	mvn.w	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
  
  /* Return ADC state */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b084      	sub	sp, #16
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d101      	bne.n	8000bfc <HAL_ADC_Start_IT+0x1a>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e0a0      	b.n	8000d3e <HAL_ADC_Start_IT+0x15c>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 fc51 	bl	80014ac <ADC_Enable>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f040 808f 	bne.w	8000d34 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c1e:	f023 0301 	bic.w	r3, r3, #1
 8000c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a46      	ldr	r2, [pc, #280]	; (8000d48 <HAL_ADC_Start_IT+0x166>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d105      	bne.n	8000c40 <HAL_ADC_Start_IT+0x5e>
 8000c34:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <HAL_ADC_Start_IT+0x16a>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d115      	bne.n	8000c6c <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d026      	beq.n	8000ca8 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c6a:	e01d      	b.n	8000ca8 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <HAL_ADC_Start_IT+0x16a>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d004      	beq.n	8000c8c <HAL_ADC_Start_IT+0xaa>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a30      	ldr	r2, [pc, #192]	; (8000d48 <HAL_ADC_Start_IT+0x166>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d10d      	bne.n	8000ca8 <HAL_ADC_Start_IT+0xc6>
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <HAL_ADC_Start_IT+0x16a>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d007      	beq.n	8000ca8 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ca0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	f023 0206 	bic.w	r2, r3, #6
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc0:	e002      	b.n	8000cc8 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f06f 0202 	mvn.w	r2, #2
 8000cd8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	6852      	ldr	r2, [r2, #4]
 8000ce4:	f042 0220 	orr.w	r2, r2, #32
 8000ce8:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cf4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cf8:	d113      	bne.n	8000d22 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <HAL_ADC_Start_IT+0x166>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d105      	bne.n	8000d10 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_ADC_Start_IT+0x16a>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d108      	bne.n	8000d22 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	6892      	ldr	r2, [r2, #8]
 8000d1a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	e00c      	b.n	8000d3c <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	6892      	ldr	r2, [r2, #8]
 8000d2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	e003      	b.n	8000d3c <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012800 	.word	0x40012800
 8000d4c:	40012400 	.word	0x40012400

08000d50 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_Stop_IT+0x1a>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e022      	b.n	8000db0 <HAL_ADC_Stop_IT+0x60>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 fbec 	bl	8001550 <ADC_ConversionStop_Disable>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d111      	bne.n	8000da6 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	6852      	ldr	r2, [r2, #4]
 8000d8c:	f022 0220 	bic.w	r2, r2, #32
 8000d90:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d9a:	f023 0301 	bic.w	r3, r3, #1
 8000d9e:	f043 0201 	orr.w	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a64      	ldr	r2, [pc, #400]	; (8000f60 <HAL_ADC_Start_DMA+0x1a8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d004      	beq.n	8000ddc <HAL_ADC_Start_DMA+0x24>
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a63      	ldr	r2, [pc, #396]	; (8000f64 <HAL_ADC_Start_DMA+0x1ac>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d106      	bne.n	8000dea <HAL_ADC_Start_DMA+0x32>
 8000ddc:	4b60      	ldr	r3, [pc, #384]	; (8000f60 <HAL_ADC_Start_DMA+0x1a8>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f040 80b3 	bne.w	8000f50 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <HAL_ADC_Start_DMA+0x40>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e0ae      	b.n	8000f56 <HAL_ADC_Start_DMA+0x19e>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f000 fb53 	bl	80014ac <ADC_Enable>
 8000e06:	4603      	mov	r3, r0
 8000e08:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 809a 	bne.w	8000f46 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e1a:	f023 0301 	bic.w	r3, r3, #1
 8000e1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a4e      	ldr	r2, [pc, #312]	; (8000f64 <HAL_ADC_Start_DMA+0x1ac>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d105      	bne.n	8000e3c <HAL_ADC_Start_DMA+0x84>
 8000e30:	4b4b      	ldr	r3, [pc, #300]	; (8000f60 <HAL_ADC_Start_DMA+0x1a8>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d115      	bne.n	8000e68 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d026      	beq.n	8000ea4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e66:	e01d      	b.n	8000ea4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a39      	ldr	r2, [pc, #228]	; (8000f60 <HAL_ADC_Start_DMA+0x1a8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d004      	beq.n	8000e88 <HAL_ADC_Start_DMA+0xd0>
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a38      	ldr	r2, [pc, #224]	; (8000f64 <HAL_ADC_Start_DMA+0x1ac>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d10d      	bne.n	8000ea4 <HAL_ADC_Start_DMA+0xec>
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <HAL_ADC_Start_DMA+0x1a8>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d007      	beq.n	8000ea4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb4:	f023 0206 	bic.w	r2, r3, #6
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ebc:	e002      	b.n	8000ec4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <HAL_ADC_Start_DMA+0x1b0>)
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <HAL_ADC_Start_DMA+0x1b4>)
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <HAL_ADC_Start_DMA+0x1b8>)
 8000ee2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f06f 0202 	mvn.w	r2, #2
 8000eec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	6892      	ldr	r2, [r2, #8]
 8000ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000efc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6a18      	ldr	r0, [r3, #32]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	334c      	adds	r3, #76	; 0x4c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f001 fdb1 	bl	8002a74 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f20:	d108      	bne.n	8000f34 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	6892      	ldr	r2, [r2, #8]
 8000f2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f30:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f32:	e00f      	b.n	8000f54 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	6892      	ldr	r2, [r2, #8]
 8000f3e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f42:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000f44:	e006      	b.n	8000f54 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000f4e:	e001      	b.n	8000f54 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40012400 	.word	0x40012400
 8000f64:	40012800 	.word	0x40012800
 8000f68:	080015c5 	.word	0x080015c5
 8000f6c:	08001641 	.word	0x08001641
 8000f70:	0800165d 	.word	0x0800165d

08000f74 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <HAL_ADC_Stop_DMA+0x1a>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e033      	b.n	8000ff6 <HAL_ADC_Stop_DMA+0x82>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 fada 	bl	8001550 <ADC_ConversionStop_Disable>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d122      	bne.n	8000fec <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	6892      	ldr	r2, [r2, #8]
 8000fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fb4:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fdb9 	bl	8002b32 <HAL_DMA_Abort>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10a      	bne.n	8000fe0 <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8000fde:	e005      	b.n	8000fec <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	2b20      	cmp	r3, #32
 800102a:	d140      	bne.n	80010ae <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b02      	cmp	r3, #2
 8001038:	d139      	bne.n	80010ae <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800105c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001060:	d11d      	bne.n	800109e <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001066:	2b00      	cmp	r3, #0
 8001068:	d119      	bne.n	800109e <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	6852      	ldr	r2, [r2, #4]
 8001074:	f022 0220 	bic.w	r2, r2, #32
 8001078:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f87c 	bl	800119c <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f06f 0212 	mvn.w	r2, #18
 80010ac:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b8:	2b80      	cmp	r3, #128	; 0x80
 80010ba:	d14f      	bne.n	800115c <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d148      	bne.n	800115c <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d105      	bne.n	80010e2 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80010ec:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80010f0:	d012      	beq.n	8001118 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d125      	bne.n	800114c <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800110a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800110e:	d11d      	bne.n	800114c <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001114:	2b00      	cmp	r3, #0
 8001116:	d119      	bne.n	800114c <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	6852      	ldr	r2, [r2, #4]
 8001122:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001126:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d105      	bne.n	800114c <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 ff25 	bl	8001f9c <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f06f 020c 	mvn.w	r2, #12
 800115a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001166:	2b40      	cmp	r3, #64	; 0x40
 8001168:	d114      	bne.n	8001194 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10d      	bne.n	8001194 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f81b 	bl	80011c0 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f06f 0201 	mvn.w	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011e4:	b490      	push	{r4, r7}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x20>
 8001200:	2302      	movs	r3, #2
 8001202:	e0dc      	b.n	80013be <HAL_ADC_ConfigChannel+0x1da>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b06      	cmp	r3, #6
 8001212:	d81c      	bhi.n	800124e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b05      	subs	r3, #5
 800122a:	221f      	movs	r2, #31
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4018      	ands	r0, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681c      	ldr	r4, [r3, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b05      	subs	r3, #5
 8001244:	fa04 f303 	lsl.w	r3, r4, r3
 8001248:	4303      	orrs	r3, r0
 800124a:	634b      	str	r3, [r1, #52]	; 0x34
 800124c:	e03c      	b.n	80012c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d81c      	bhi.n	8001290 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6819      	ldr	r1, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b23      	subs	r3, #35	; 0x23
 800126c:	221f      	movs	r2, #31
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	4018      	ands	r0, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681c      	ldr	r4, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	3b23      	subs	r3, #35	; 0x23
 8001286:	fa04 f303 	lsl.w	r3, r4, r3
 800128a:	4303      	orrs	r3, r0
 800128c:	630b      	str	r3, [r1, #48]	; 0x30
 800128e:	e01b      	b.n	80012c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	3b41      	subs	r3, #65	; 0x41
 80012a6:	221f      	movs	r2, #31
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4018      	ands	r0, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681c      	ldr	r4, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	3b41      	subs	r3, #65	; 0x41
 80012c0:	fa04 f303 	lsl.w	r3, r4, r3
 80012c4:	4303      	orrs	r3, r0
 80012c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	d91c      	bls.n	800130a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68d8      	ldr	r0, [r3, #12]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	3b1e      	subs	r3, #30
 80012e6:	2207      	movs	r2, #7
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4018      	ands	r0, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689c      	ldr	r4, [r3, #8]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	3b1e      	subs	r3, #30
 8001300:	fa04 f303 	lsl.w	r3, r4, r3
 8001304:	4303      	orrs	r3, r0
 8001306:	60cb      	str	r3, [r1, #12]
 8001308:	e019      	b.n	800133e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6918      	ldr	r0, [r3, #16]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	2207      	movs	r2, #7
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	4018      	ands	r0, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689c      	ldr	r4, [r3, #8]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	fa04 f303 	lsl.w	r3, r4, r3
 800133a:	4303      	orrs	r3, r0
 800133c:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b10      	cmp	r3, #16
 8001344:	d003      	beq.n	800134e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800134a:	2b11      	cmp	r3, #17
 800134c:	d132      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d125      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d126      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	6892      	ldr	r2, [r2, #8]
 8001370:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001374:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b10      	cmp	r3, #16
 800137c:	d11a      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_ADC_ConfigChannel+0x1e8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	0c9a      	lsrs	r2, r3, #18
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001394:	e002      	b.n	800139c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3b01      	subs	r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f9      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x1b2>
 80013a2:	e007      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	f043 0220 	orr.w	r2, r3, #32
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc90      	pop	{r4, r7}
 80013c6:	4770      	bx	lr
 80013c8:	40012400 	.word	0x40012400
 80013cc:	20000120 	.word	0x20000120
 80013d0:	431bde83 	.word	0x431bde83

080013d4 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <HAL_ADC_AnalogWDGConfig+0xa0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d003      	beq.n	80013f0 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80013ec:	4a22      	ldr	r2, [pc, #136]	; (8001478 <HAL_ADC_AnalogWDGConfig+0xa4>)
 80013ee:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_AnalogWDGConfig+0x2a>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e035      	b.n	800146a <HAL_ADC_AnalogWDGConfig+0x96>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	6852      	ldr	r2, [r2, #4]
 8001418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	e007      	b.n	8001430 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800142e:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6859      	ldr	r1, [r3, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_ADC_AnalogWDGConfig+0xa8>)
 800143c:	400b      	ands	r3, r1
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	6808      	ldr	r0, [r1, #0]
 8001442:	6839      	ldr	r1, [r7, #0]
 8001444:	6849      	ldr	r1, [r1, #4]
 8001446:	4301      	orrs	r1, r0
 8001448:	430b      	orrs	r3, r1
 800144a:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68d2      	ldr	r2, [r2, #12]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	6912      	ldr	r2, [r2, #16]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	00800200 	.word	0x00800200
 8001478:	00400200 	.word	0x00400200
 800147c:	ff3ffde0 	.word	0xff3ffde0

08001480 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <HAL_ADC_GetError>:
  * @brief  Return the ADC error code
  * @param  hadc: ADC handle
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d039      	beq.n	800153e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	6892      	ldr	r2, [r2, #8]
 80014d4:	f042 0201 	orr.w	r2, r2, #1
 80014d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <ADC_Enable+0x9c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a1b      	ldr	r2, [pc, #108]	; (800154c <ADC_Enable+0xa0>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014e8:	e002      	b.n	80014f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014f6:	f7fe fea5 	bl	8000244 <HAL_GetTick>
 80014fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014fc:	e018      	b.n	8001530 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014fe:	f7fe fea1 	bl	8000244 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d911      	bls.n	8001530 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f043 0210 	orr.w	r2, r3, #16
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e007      	b.n	8001540 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b01      	cmp	r3, #1
 800153c:	d1df      	bne.n	80014fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000120 	.word	0x20000120
 800154c:	431bde83 	.word	0x431bde83

08001550 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d127      	bne.n	80015ba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	6892      	ldr	r2, [r2, #8]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800157a:	f7fe fe63 	bl	8000244 <HAL_GetTick>
 800157e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001580:	e014      	b.n	80015ac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001582:	f7fe fe5f 	bl	8000244 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d90d      	bls.n	80015ac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	f043 0210 	orr.w	r2, r3, #16
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	f043 0201 	orr.w	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e007      	b.n	80015bc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d0e3      	beq.n	8001582 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d127      	bne.n	800162e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015f8:	d115      	bne.n	8001626 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d111      	bne.n	8001626 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d105      	bne.n	8001626 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	f043 0201 	orr.w	r2, r3, #1
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f7ff fdb8 	bl	800119c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800162c:	e004      	b.n	8001638 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fdad 	bl	80011ae <HAL_ADC_ConvHalfCpltCallback>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	f043 0204 	orr.w	r2, r3, #4
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff fda5 	bl	80011d2 <HAL_ADC_ErrorCallback>
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_ADCEx_Calibration_Start+0x1e>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e086      	b.n	80017bc <HAL_ADCEx_Calibration_Start+0x12c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff4a 	bl	8001550 <ADC_ConversionStop_Disable>
 80016bc:	4603      	mov	r3, r0
 80016be:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d175      	bne.n	80017b2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ce:	f023 0302 	bic.w	r3, r3, #2
 80016d2:	f043 0202 	orr.w	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016da:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <HAL_ADCEx_Calibration_Start+0x134>)
 80016dc:	681c      	ldr	r4, [r3, #0]
 80016de:	2002      	movs	r0, #2
 80016e0:	f005 f926 	bl	8006930 <HAL_RCCEx_GetPeriphCLKFreq>
 80016e4:	4603      	mov	r3, r0
 80016e6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80016ea:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016ec:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016ee:	e002      	b.n	80016f6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f9      	bne.n	80016f0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fed5 	bl	80014ac <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	6892      	ldr	r2, [r2, #8]
 800170c:	f042 0208 	orr.w	r2, r2, #8
 8001710:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001712:	f7fe fd97 	bl	8000244 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001718:	e014      	b.n	8001744 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800171a:	f7fe fd93 	bl	8000244 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b0a      	cmp	r3, #10
 8001726:	d90d      	bls.n	8001744 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f023 0312 	bic.w	r3, r3, #18
 8001730:	f043 0210 	orr.w	r2, r3, #16
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e03b      	b.n	80017bc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1e3      	bne.n	800171a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	6892      	ldr	r2, [r2, #8]
 800175c:	f042 0204 	orr.w	r2, r2, #4
 8001760:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001762:	f7fe fd6f 	bl	8000244 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001768:	e014      	b.n	8001794 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800176a:	f7fe fd6b 	bl	8000244 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d90d      	bls.n	8001794 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f023 0312 	bic.w	r3, r3, #18
 8001780:	f043 0210 	orr.w	r2, r3, #16
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e013      	b.n	80017bc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1e3      	bne.n	800176a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	f023 0303 	bic.w	r3, r3, #3
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	20000120 	.word	0x20000120

080017c8 <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_ADCEx_InjectedStart+0x1a>
 80017de:	2302      	movs	r3, #2
 80017e0:	e070      	b.n	80018c4 <HAL_ADCEx_InjectedStart+0xfc>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fe5e 	bl	80014ac <ADC_Enable>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d15f      	bne.n	80018ba <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <HAL_ADCEx_InjectedStart+0x104>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d105      	bne.n	8001824 <HAL_ADCEx_InjectedStart+0x5c>
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_ADCEx_InjectedStart+0x108>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d106      	bne.n	8001832 <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
 8001830:	e005      	b.n	800183e <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0204 	mvn.w	r2, #4
 8001860:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d128      	bne.n	80018c2 <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800187a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800187e:	d113      	bne.n	80018a8 <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <HAL_ADCEx_InjectedStart+0x104>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d105      	bne.n	8001896 <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_ADCEx_InjectedStart+0x108>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	6892      	ldr	r2, [r2, #8]
 80018a0:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	e00c      	b.n	80018c2 <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	6892      	ldr	r2, [r2, #8]
 80018b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	e003      	b.n	80018c2 <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40012800 	.word	0x40012800
 80018d0:	40012400 	.word	0x40012400

080018d4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_ADCEx_InjectedStop+0x1a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e030      	b.n	8001950 <HAL_ADCEx_InjectedStop+0x7c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d119      	bne.n	8001936 <HAL_ADCEx_InjectedStop+0x62>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800190c:	2b00      	cmp	r3, #0
 800190e:	d112      	bne.n	8001936 <HAL_ADCEx_InjectedStop+0x62>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fe1d 	bl	8001550 <ADC_ConversionStop_Disable>
 8001916:	4603      	mov	r3, r0
 8001918:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d112      	bne.n	8001946 <HAL_ADCEx_InjectedStop+0x72>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8001934:	e007      	b.n	8001946 <HAL_ADCEx_InjectedStop+0x72>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f043 0220 	orr.w	r2, r3, #32
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 800196a:	f7fe fc6b 	bl	8000244 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d123      	bne.n	80019c6 <HAL_ADCEx_InjectedPollForConversion+0x6e>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 800197e:	e01a      	b.n	80019b6 <HAL_ADCEx_InjectedPollForConversion+0x5e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001986:	d016      	beq.n	80019b6 <HAL_ADCEx_InjectedPollForConversion+0x5e>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_ADCEx_InjectedPollForConversion+0x46>
 800198e:	f7fe fc59 	bl	8000244 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d90b      	bls.n	80019b6 <HAL_ADCEx_InjectedPollForConversion+0x5e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	f043 0204 	orr.w	r2, r3, #4
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0ad      	b.n	8001b12 <HAL_ADCEx_InjectedPollForConversion+0x1ba>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0dd      	beq.n	8001980 <HAL_ADCEx_InjectedPollForConversion+0x28>
 80019c4:	e06c      	b.n	8001aa0 <HAL_ADCEx_InjectedPollForConversion+0x148>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019c6:	4b55      	ldr	r3, [pc, #340]	; (8001b1c <HAL_ADCEx_InjectedPollForConversion+0x1c4>)
 80019c8:	681c      	ldr	r4, [r3, #0]
 80019ca:	2002      	movs	r0, #2
 80019cc:	f004 ffb0 	bl	8006930 <HAL_RCCEx_GetPeriphCLKFreq>
 80019d0:	4603      	mov	r3, r0
 80019d2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6919      	ldr	r1, [r3, #16]
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_ADCEx_InjectedPollForConversion+0x1c8>)
 80019de:	400b      	ands	r3, r1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d118      	bne.n	8001a16 <HAL_ADCEx_InjectedPollForConversion+0xbe>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68d9      	ldr	r1, [r3, #12]
 80019ea:	4b4e      	ldr	r3, [pc, #312]	; (8001b24 <HAL_ADCEx_InjectedPollForConversion+0x1cc>)
 80019ec:	400b      	ands	r3, r1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d111      	bne.n	8001a16 <HAL_ADCEx_InjectedPollForConversion+0xbe>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6919      	ldr	r1, [r3, #16]
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <HAL_ADCEx_InjectedPollForConversion+0x1d0>)
 80019fa:	400b      	ands	r3, r1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d108      	bne.n	8001a12 <HAL_ADCEx_InjectedPollForConversion+0xba>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68d9      	ldr	r1, [r3, #12]
 8001a06:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <HAL_ADCEx_InjectedPollForConversion+0x1d4>)
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADCEx_InjectedPollForConversion+0xba>
 8001a0e:	2314      	movs	r3, #20
 8001a10:	e020      	b.n	8001a54 <HAL_ADCEx_InjectedPollForConversion+0xfc>
 8001a12:	2329      	movs	r3, #41	; 0x29
 8001a14:	e01e      	b.n	8001a54 <HAL_ADCEx_InjectedPollForConversion+0xfc>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6919      	ldr	r1, [r3, #16]
 8001a1c:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <HAL_ADCEx_InjectedPollForConversion+0x1d0>)
 8001a1e:	400b      	ands	r3, r1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d106      	bne.n	8001a32 <HAL_ADCEx_InjectedPollForConversion+0xda>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68d9      	ldr	r1, [r3, #12]
 8001a2a:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <HAL_ADCEx_InjectedPollForConversion+0x1d4>)
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00d      	beq.n	8001a4e <HAL_ADCEx_InjectedPollForConversion+0xf6>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6919      	ldr	r1, [r3, #16]
 8001a38:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <HAL_ADCEx_InjectedPollForConversion+0xfa>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68d9      	ldr	r1, [r3, #12]
 8001a46:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 8001a48:	400b      	ands	r3, r1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADCEx_InjectedPollForConversion+0xfa>
 8001a4e:	2354      	movs	r3, #84	; 0x54
 8001a50:	e000      	b.n	8001a54 <HAL_ADCEx_InjectedPollForConversion+0xfc>
 8001a52:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a54:	fb03 f302 	mul.w	r3, r3, r2
 8001a58:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a5a:	e01d      	b.n	8001a98 <HAL_ADCEx_InjectedPollForConversion+0x140>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a62:	d016      	beq.n	8001a92 <HAL_ADCEx_InjectedPollForConversion+0x13a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_ADCEx_InjectedPollForConversion+0x122>
 8001a6a:	f7fe fbeb 	bl	8000244 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d90b      	bls.n	8001a92 <HAL_ADCEx_InjectedPollForConversion+0x13a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f043 0204 	orr.w	r2, r3, #4
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e03f      	b.n	8001b12 <HAL_ADCEx_InjectedPollForConversion+0x1ba>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3301      	adds	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d3dd      	bcc.n	8001a5c <HAL_ADCEx_InjectedPollForConversion+0x104>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 020e 	mvn.w	r2, #14
 8001aa8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001ac0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001ac4:	d012      	beq.n	8001aec <HAL_ADCEx_InjectedPollForConversion+0x194>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d11d      	bne.n	8001b10 <HAL_ADCEx_InjectedPollForConversion+0x1b8>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ade:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ae2:	d115      	bne.n	8001b10 <HAL_ADCEx_InjectedPollForConversion+0x1b8>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d111      	bne.n	8001b10 <HAL_ADCEx_InjectedPollForConversion+0x1b8>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADCEx_InjectedPollForConversion+0x1b8>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd90      	pop	{r4, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000120 	.word	0x20000120
 8001b20:	24924924 	.word	0x24924924
 8001b24:	00924924 	.word	0x00924924
 8001b28:	12492492 	.word	0x12492492
 8001b2c:	00492492 	.word	0x00492492
 8001b30:	00249249 	.word	0x00249249

08001b34 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADCEx_InjectedStart_IT+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e078      	b.n	8001c40 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fca8 	bl	80014ac <ADC_Enable>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d167      	bne.n	8001c36 <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a32      	ldr	r2, [pc, #200]	; (8001c48 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d105      	bne.n	8001b90 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_ADCEx_InjectedStart_IT+0x118>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d106      	bne.n	8001b9e <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b9c:	e005      	b.n	8001baa <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0204 	mvn.w	r2, #4
 8001bcc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	6852      	ldr	r2, [r2, #4]
 8001bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bdc:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d128      	bne.n	8001c3e <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001bf6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001bfa:	d113      	bne.n	8001c24 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d105      	bne.n	8001c12 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_ADCEx_InjectedStart_IT+0x118>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d108      	bne.n	8001c24 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	6892      	ldr	r2, [r2, #8]
 8001c1c:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	e00c      	b.n	8001c3e <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	6892      	ldr	r2, [r2, #8]
 8001c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e003      	b.n	8001c3e <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40012800 	.word	0x40012800
 8001c4c:	40012400 	.word	0x40012400

08001c50 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADCEx_InjectedStop_IT+0x1a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e038      	b.n	8001cdc <HAL_ADCEx_InjectedStop_IT+0x8c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d121      	bne.n	8001cc2 <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11a      	bne.n	8001cc2 <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fc5f 	bl	8001550 <ADC_ConversionStop_Disable>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d11a      	bne.n	8001cd2 <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	6852      	ldr	r2, [r2, #4]
 8001ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001caa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8001cc0:	e007      	b.n	8001cd2 <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	f043 0220 	orr.w	r2, r3, #32
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b092      	sub	sp, #72	; 0x48
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADCEx_MultiModeStart_DMA+0x20>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e08f      	b.n	8001e24 <HAL_ADCEx_MultiModeStart_DMA+0x140>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d1c:	d00b      	beq.n	8001d36 <HAL_ADCEx_MultiModeStart_DMA+0x52>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f043 0220 	orr.w	r2, r3, #32
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e076      	b.n	8001e24 <HAL_ADCEx_MultiModeStart_DMA+0x140>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff fbb8 	bl	80014ac <ADC_Enable>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 8001d42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d107      	bne.n	8001d5a <HAL_ADCEx_MultiModeStart_DMA+0x76>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fbac 	bl	80014ac <ADC_Enable>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d15a      	bne.n	8001e18 <HAL_ADCEx_MultiModeStart_DMA+0x134>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_ADCEx_MultiModeStart_DMA+0xac>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a23      	ldr	r2, [pc, #140]	; (8001e38 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a22      	ldr	r2, [pc, #136]	; (8001e3c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f06f 0202 	mvn.w	r2, #2
 8001dbe:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	6892      	ldr	r2, [r2, #8]
 8001dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a18      	ldr	r0, [r3, #32]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	334c      	adds	r3, #76	; 0x4c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f000 fe48 	bl	8002a74 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001df2:	d108      	bne.n	8001e06 <HAL_ADCEx_MultiModeStart_DMA+0x122>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	6892      	ldr	r2, [r2, #8]
 8001dfe:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e00c      	b.n	8001e20 <HAL_ADCEx_MultiModeStart_DMA+0x13c>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	6892      	ldr	r2, [r2, #8]
 8001e10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	e003      	b.n	8001e20 <HAL_ADCEx_MultiModeStart_DMA+0x13c>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3748      	adds	r7, #72	; 0x48
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40012800 	.word	0x40012800
 8001e30:	ffeffcfe 	.word	0xffeffcfe
 8001e34:	080015c5 	.word	0x080015c5
 8001e38:	08001641 	.word	0x08001641
 8001e3c:	0800165d 	.word	0x0800165d

08001e40 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b090      	sub	sp, #64	; 0x40
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_ADCEx_MultiModeStop_DMA+0x1c>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e04f      	b.n	8001efc <HAL_ADCEx_MultiModeStop_DMA+0xbc>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
 
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC master peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fb73 	bl	8001550 <ADC_ConversionStop_Disable>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  /* Check if ADC is effectively disabled */
  if(tmp_hal_status == HAL_OK)
 8001e70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d13b      	bne.n	8001ef0 <HAL_ADCEx_MultiModeStop_DMA+0xb0>
  {
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_ADCEx_MultiModeStop_DMA+0xc4>)
 8001e7a:	60fb      	str	r3, [r7, #12]

    /* Disable ADC slave peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(&tmphadcSlave);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fb65 	bl	8001550 <ADC_ConversionStop_Disable>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Check if ADC is effectively disabled */
    if(tmp_hal_status != HAL_OK)
 8001e8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_ADCEx_MultiModeStop_DMA+0x6c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f043 0210 	orr.w	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e027      	b.n	8001efc <HAL_ADCEx_MultiModeStop_DMA+0xbc>
    }

    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	6892      	ldr	r2, [r2, #8]
 8001eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eba:	609a      	str	r2, [r3, #8]
    
    /* Reset configuration of ADC DMA continuous request for dual mode */
    CLEAR_BIT(hadc->Instance->CR1, ADC_CR1_DUALMOD);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	6852      	ldr	r2, [r2, #4]
 8001ec6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001eca:	605a      	str	r2, [r3, #4]
        
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fe2e 	bl	8002b32 <HAL_DMA_Abort>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Change ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ef8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3740      	adds	r7, #64	; 0x40
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40012800 	.word	0x40012800

08001f08 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d009      	beq.n	8001f30 <HAL_ADCEx_InjectedGetValue+0x28>
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d002      	beq.n	8001f26 <HAL_ADCEx_InjectedGetValue+0x1e>
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d00a      	beq.n	8001f3a <HAL_ADCEx_InjectedGetValue+0x32>
 8001f24:	e00e      	b.n	8001f44 <HAL_ADCEx_InjectedGetValue+0x3c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	60fb      	str	r3, [r7, #12]
      break;
 8001f2e:	e00e      	b.n	8001f4e <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	60fb      	str	r3, [r7, #12]
      break;
 8001f38:	e009      	b.n	8001f4e <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	60fb      	str	r3, [r7, #12]
      break;
 8001f42:	e004      	b.n	8001f4e <HAL_ADCEx_InjectedGetValue+0x46>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	60fb      	str	r3, [r7, #12]
      break;
 8001f4c:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <HAL_ADCEx_MultiModeGetValue>:
  *         in the selected multi mode.
  * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval The converted data value.
  */
uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  uint32_t tmpDR = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* On STM32F1 devices, ADC1 data register DR contains ADC2 conversions      */
  /* only if ADC1 DMA mode is enabled.                                        */
  tmpDR = hadc->Instance->DR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	60fb      	str	r3, [r7, #12]

  if (HAL_IS_BIT_CLR(ADC1->CR2, ADC_CR2_DMA))
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_ADCEx_MultiModeGetValue+0x3a>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d105      	bne.n	8001f86 <HAL_ADCEx_MultiModeGetValue+0x2c>
  {
    tmpDR |= (ADC2->DR << 16U);
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_ADCEx_MultiModeGetValue+0x3e>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  }
    
  /* Return ADC converted value */ 
  return tmpDR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40012400 	.word	0x40012400
 8001f98:	40012800 	.word	0x40012800

08001f9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001fae:	b4b0      	push	{r4, r5, r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADCEx_InjectedConfigChannel+0x20>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e179      	b.n	80022c2 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d119      	bne.n	8002012 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10c      	bne.n	8002000 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	0d9b      	lsrs	r3, r3, #22
 8001ff2:	059b      	lsls	r3, r3, #22
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	6809      	ldr	r1, [r1, #0]
 8001ff8:	03c9      	lsls	r1, r1, #15
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	6393      	str	r3, [r2, #56]	; 0x38
 8001ffe:	e04e      	b.n	800209e <HAL_ADCEx_InjectedConfigChannel+0xf0>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f043 0220 	orr.w	r2, r3, #32
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e045      	b.n	800209e <HAL_ADCEx_InjectedConfigChannel+0xf0>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d829      	bhi.n	8002072 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	330f      	adds	r3, #15
 800203a:	221f      	movs	r2, #31
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002044:	43db      	mvns	r3, r3
 8002046:	4018      	ands	r0, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	3b01      	subs	r3, #1
 800204e:	051c      	lsls	r4, r3, #20
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681d      	ldr	r5, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	330f      	adds	r3, #15
 8002066:	fa05 f303 	lsl.w	r3, r5, r3
 800206a:	4323      	orrs	r3, r4
 800206c:	4303      	orrs	r3, r0
 800206e:	638b      	str	r3, [r1, #56]	; 0x38
 8002070:	e015      	b.n	800209e <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	1ad2      	subs	r2, r2, r3
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	330f      	adds	r3, #15
 800208e:	221f      	movs	r2, #31
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002098:	43db      	mvns	r3, r3
 800209a:	4003      	ands	r3, r0
 800209c:	638b      	str	r3, [r1, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d00c      	beq.n	80020c6 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	69c9      	ldr	r1, [r1, #28]
 80020c2:	430b      	orrs	r3, r1
 80020c4:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d115      	bne.n	80020fa <HAL_ADCEx_InjectedConfigChannel+0x14c>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80020d6:	d108      	bne.n	80020ea <HAL_ADCEx_InjectedConfigChannel+0x13c>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	6852      	ldr	r2, [r2, #4]
 80020e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	e007      	b.n	80020fa <HAL_ADCEx_InjectedConfigChannel+0x14c>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d114      	bne.n	800212c <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <HAL_ADCEx_InjectedConfigChannel+0x16e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	6852      	ldr	r2, [r2, #4]
 8002114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	e007      	b.n	800212c <HAL_ADCEx_InjectedConfigChannel+0x17e>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b09      	cmp	r3, #9
 8002132:	d91c      	bls.n	800216e <HAL_ADCEx_InjectedConfigChannel+0x1c0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68d8      	ldr	r0, [r3, #12]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	3b1e      	subs	r3, #30
 800214a:	2207      	movs	r2, #7
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	4018      	ands	r0, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689c      	ldr	r4, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	3b1e      	subs	r3, #30
 8002164:	fa04 f303 	lsl.w	r3, r4, r3
 8002168:	4303      	orrs	r3, r0
 800216a:	60cb      	str	r3, [r1, #12]
 800216c:	e019      	b.n	80021a2 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6918      	ldr	r0, [r3, #16]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	2207      	movs	r2, #7
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	4018      	ands	r0, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689c      	ldr	r4, [r3, #8]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	fa04 f303 	lsl.w	r3, r4, r3
 800219e:	4303      	orrs	r3, r0
 80021a0:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d003      	beq.n	80021b2 <HAL_ADCEx_InjectedConfigChannel+0x204>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ae:	2b11      	cmp	r3, #17
 80021b0:	d107      	bne.n	80021c2 <HAL_ADCEx_InjectedConfigChannel+0x214>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	6892      	ldr	r2, [r2, #8]
 80021bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021c0:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d011      	beq.n	80021ee <HAL_ADCEx_InjectedConfigChannel+0x240>
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d01d      	beq.n	800220a <HAL_ADCEx_InjectedConfigChannel+0x25c>
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d129      	bne.n	8002226 <HAL_ADCEx_InjectedConfigChannel+0x278>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80021e0:	f023 030f 	bic.w	r3, r3, #15
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	68c9      	ldr	r1, [r1, #12]
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 80021ec:	e029      	b.n	8002242 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80021fc:	f023 030f 	bic.w	r3, r3, #15
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	68c9      	ldr	r1, [r1, #12]
 8002204:	430b      	orrs	r3, r1
 8002206:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8002208:	e01b      	b.n	8002242 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002218:	f023 030f 	bic.w	r3, r3, #15
 800221c:	6839      	ldr	r1, [r7, #0]
 800221e:	68c9      	ldr	r1, [r1, #12]
 8002220:	430b      	orrs	r3, r1
 8002222:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8002224:	e00d      	b.n	8002242 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002234:	f023 030f 	bic.w	r3, r3, #15
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	68c9      	ldr	r1, [r1, #12]
 800223c:	430b      	orrs	r3, r1
 800223e:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8002240:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b10      	cmp	r3, #16
 8002248:	d003      	beq.n	8002252 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800224e:	2b11      	cmp	r3, #17
 8002250:	d132      	bne.n	80022b8 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_ADCEx_InjectedConfigChannel+0x31e>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d125      	bne.n	80022a8 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d126      	bne.n	80022b8 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	6892      	ldr	r2, [r2, #8]
 8002274:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002278:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b10      	cmp	r3, #16
 8002280:	d11a      	bne.n	80022b8 <HAL_ADCEx_InjectedConfigChannel+0x30a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_ADCEx_InjectedConfigChannel+0x322>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <HAL_ADCEx_InjectedConfigChannel+0x326>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	0c9a      	lsrs	r2, r3, #18
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002298:	e002      	b.n	80022a0 <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          {
            wait_loop_index--;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3b01      	subs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f9      	bne.n	800229a <HAL_ADCEx_InjectedConfigChannel+0x2ec>
 80022a6:	e007      	b.n	80022b8 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bcb0      	pop	{r4, r5, r7}
 80022ca:	4770      	bx	lr
 80022cc:	40012400 	.word	0x40012400
 80022d0:	20000120 	.word	0x20000120
 80022d4:	431bde83 	.word	0x431bde83

080022d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80022d8:	b480      	push	{r7}
 80022da:	b091      	sub	sp, #68	; 0x44
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e032      	b.n	800235c <HAL_ADCEx_MultiModeConfigChannel+0x84>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_ADCEx_MultiModeConfigChannel+0x90>)
 8002300:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d016      	beq.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0x66>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002318:	2b01      	cmp	r3, #1
 800231a:	d010      	beq.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0x66>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_ADCEx_MultiModeConfigChannel+0x94>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10b      	bne.n	800233e <HAL_ADCEx_MultiModeConfigChannel+0x66>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	6852      	ldr	r2, [r2, #4]
 8002330:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	e008      	b.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0x78>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002358:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800235c:	4618      	mov	r0, r3
 800235e:	3744      	adds	r7, #68	; 0x44
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40012800 	.word	0x40012800
 800236c:	40012400 	.word	0x40012400

08002370 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <NVIC_SetPriorityGrouping+0x44>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <NVIC_SetPriorityGrouping+0x44>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	60d3      	str	r3, [r2, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <NVIC_EnableIRQ+0x2c>)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	79fa      	ldrb	r2, [r7, #7]
 80023e8:	f002 021f 	and.w	r2, r2, #31
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100

08002404 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800240e:	4909      	ldr	r1, [pc, #36]	; (8002434 <NVIC_DisableIRQ+0x30>)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	f002 021f 	and.w	r2, r2, #31
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	3320      	adds	r3, #32
 8002424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100

08002438 <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <NVIC_GetPendingIRQ+0x30>)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	3340      	adds	r3, #64	; 0x40
 800244c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	f003 0301 	and.w	r3, r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100

0800246c <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002476:	4909      	ldr	r1, [pc, #36]	; (800249c <NVIC_SetPendingIRQ+0x30>)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	79fa      	ldrb	r2, [r7, #7]
 8002480:	f002 021f 	and.w	r2, r2, #31
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	3340      	adds	r3, #64	; 0x40
 800248c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100

080024a0 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80024aa:	4909      	ldr	r1, [pc, #36]	; (80024d0 <NVIC_ClearPendingIRQ+0x30>)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	79fa      	ldrb	r2, [r7, #7]
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	3360      	adds	r3, #96	; 0x60
 80024c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <NVIC_GetActive>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <NVIC_GetActive+0x30>)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	3380      	adds	r3, #128	; 0x80
 80024e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f003 031f 	and.w	r3, r3, #31
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100

08002508 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	da0b      	bge.n	8002534 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	490d      	ldr	r1, [pc, #52]	; (8002554 <NVIC_SetPriority+0x4c>)
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	3b04      	subs	r3, #4
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002532:	e009      	b.n	8002548 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	4908      	ldr	r1, [pc, #32]	; (8002558 <NVIC_SetPriority+0x50>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000ed00 	.word	0xe000ed00
 8002558:	e000e100 	.word	0xe000e100

0800255c <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) < 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	da0a      	bge.n	8002584 <NVIC_GetPriority+0x28>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800256e:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <NVIC_GetPriority+0x44>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	3b04      	subs	r3, #4
 8002578:	4413      	add	r3, r2
 800257a:	7e1b      	ldrb	r3, [r3, #24]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e008      	b.n	8002596 <NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8002584:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <NVIC_GetPriority+0x48>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	4413      	add	r3, r2
 800258c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8002590:	b2db      	uxtb	r3, r3
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	b2db      	uxtb	r3, r3
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	2201      	movs	r2, #1
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	401a      	ands	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ee:	2101      	movs	r1, #1
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	1e59      	subs	r1, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f1c3 0307 	rsb	r3, r3, #7
 8002624:	2b04      	cmp	r3, #4
 8002626:	bf28      	it	cs
 8002628:	2304      	movcs	r3, #4
 800262a:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	3304      	adds	r3, #4
 8002630:	2b06      	cmp	r3, #6
 8002632:	d902      	bls.n	800263a <NVIC_DecodePriority+0x32>
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3b03      	subs	r3, #3
 8002638:	e000      	b.n	800263c <NVIC_DecodePriority+0x34>
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	40da      	lsrs	r2, r3
 8002644:	2101      	movs	r1, #1
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	401a      	ands	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8002654:	2201      	movs	r2, #1
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	401a      	ands	r2, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	601a      	str	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002678:	4905      	ldr	r1, [pc, #20]	; (8002690 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <NVIC_SystemReset+0x20>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <NVIC_SystemReset+0x24>)
 8002684:	4313      	orrs	r3, r2
 8002686:	60cb      	str	r3, [r1, #12]
 8002688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800268c:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800268e:	e7fd      	b.n	800268c <NVIC_SystemReset+0x1c>
 8002690:	e000ed00 	.word	0xe000ed00
 8002694:	05fa0004 	.word	0x05fa0004

08002698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d301      	bcc.n	80026ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00f      	b.n	80026ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <SysTick_Config+0x40>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b6:	210f      	movs	r1, #15
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f7ff ff24 	bl	8002508 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <SysTick_Config+0x40>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <SysTick_Config+0x40>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	e000e010 	.word	0xe000e010

080026dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fe43 	bl	8002370 <NVIC_SetPriorityGrouping>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002704:	f7ff fe58 	bl	80023b8 <NVIC_GetPriorityGrouping>
 8002708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f7ff ff4a 	bl	80025a8 <NVIC_EncodePriority>
 8002714:	4602      	mov	r2, r0
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fef3 	bl	8002508 <NVIC_SetPriority>
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fe4b 	bl	80023d4 <NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fe55 	bl	8002404 <NVIC_DisableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002766:	f7ff ff83 	bl	8002670 <NVIC_SystemReset>
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff8e 	bl	8002698 <SysTick_Config>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 800278a:	f7ff fe15 	bl	80023b8 <NVIC_GetPriorityGrouping>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80027a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fed7 	bl	800255c <NVIC_GetPriority>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	f7ff ff28 	bl	8002608 <NVIC_DecodePriority>
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fe4c 	bl	800246c <NVIC_SetPendingIRQ>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fe24 	bl	8002438 <NVIC_GetPendingIRQ>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fe49 	bl	80024a0 <NVIC_ClearPendingIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8002820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fe55 	bl	80024d4 <NVIC_GetActive>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d106      	bne.n	8002850 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800284e:	e005      	b.n	800285c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002850:	4a05      	ldr	r2, [pc, #20]	; (8002868 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002870:	f000 f802 	bl	8002878 <HAL_SYSTICK_Callback>
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e04f      	b.n	800293a <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_DMA_Init+0xc0>)
 80028a2:	4413      	add	r3, r2
 80028a4:	4a28      	ldr	r2, [pc, #160]	; (8002948 <HAL_DMA_Init+0xc4>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	009a      	lsls	r2, r3, #2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a25      	ldr	r2, [pc, #148]	; (800294c <HAL_DMA_Init+0xc8>)
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	bffdfff8 	.word	0xbffdfff8
 8002948:	cccccccd 	.word	0xcccccccd
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e03a      	b.n	80029d8 <HAL_DMA_DeInit+0x88>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_DMA_DeInit+0x94>)
 800299a:	4413      	add	r3, r2
 800299c:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <HAL_DMA_DeInit+0x98>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	009a      	lsls	r2, r3, #2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <HAL_DMA_DeInit+0x9c>)
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	605a      	str	r2, [r3, #4]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	bffdfff8 	.word	0xbffdfff8
 80029e8:	cccccccd 	.word	0xcccccccd
 80029ec:	40020000 	.word	0x40020000

080029f0 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Start+0x20>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e02d      	b.n	8002a6c <HAL_DMA_Start+0x7c>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d11d      	bne.n	8002a5e <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fc92 	bl	8003370 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e005      	b.n	8002a6a <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_DMA_Start_IT+0x20>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e04a      	b.n	8002b2a <HAL_DMA_Start_IT+0xb6>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d13a      	bne.n	8002b1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fc50 	bl	8003370 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	f042 020e 	orr.w	r2, r2, #14
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e00f      	b.n	8002b0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	f022 0204 	bic.w	r2, r2, #4
 8002af8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f042 020a 	orr.w	r2, r2, #10
 8002b08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e005      	b.n	8002b28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
 8002b26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]

  /* Disable DMA IT */
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	f022 020e 	bic.w	r2, r2, #14
 8002b4c:	601a      	str	r2, [r3, #0]
    
  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
    
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d005      	beq.n	8002bac <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e057      	b.n	8002c5c <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	f022 020e 	bic.w	r2, r2, #14
 8002bba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bcc:	4a26      	ldr	r2, [pc, #152]	; (8002c68 <HAL_DMA_Abort_IT+0xde>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_DMA_Abort_IT+0xe2>)
 8002bd6:	4299      	cmp	r1, r3
 8002bd8:	d02e      	beq.n	8002c38 <HAL_DMA_Abort_IT+0xae>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <HAL_DMA_Abort_IT+0xe6>)
 8002be2:	4299      	cmp	r1, r3
 8002be4:	d026      	beq.n	8002c34 <HAL_DMA_Abort_IT+0xaa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_DMA_Abort_IT+0xea>)
 8002bee:	4299      	cmp	r1, r3
 8002bf0:	d01d      	beq.n	8002c2e <HAL_DMA_Abort_IT+0xa4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <HAL_DMA_Abort_IT+0xee>)
 8002bfa:	4299      	cmp	r1, r3
 8002bfc:	d014      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x9e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4619      	mov	r1, r3
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_DMA_Abort_IT+0xf2>)
 8002c06:	4299      	cmp	r1, r3
 8002c08:	d00b      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x98>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_DMA_Abort_IT+0xf6>)
 8002c12:	4299      	cmp	r1, r3
 8002c14:	d102      	bne.n	8002c1c <HAL_DMA_Abort_IT+0x92>
 8002c16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c1a:	e00e      	b.n	8002c3a <HAL_DMA_Abort_IT+0xb0>
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c20:	e00b      	b.n	8002c3a <HAL_DMA_Abort_IT+0xb0>
 8002c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c26:	e008      	b.n	8002c3a <HAL_DMA_Abort_IT+0xb0>
 8002c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2c:	e005      	b.n	8002c3a <HAL_DMA_Abort_IT+0xb0>
 8002c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c32:	e002      	b.n	8002c3a <HAL_DMA_Abort_IT+0xb0>
 8002c34:	2310      	movs	r3, #16
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_Abort_IT+0xb0>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
    } 
  }
  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020008 	.word	0x40020008
 8002c70:	4002001c 	.word	0x4002001c
 8002c74:	40020030 	.word	0x40020030
 8002c78:	40020044 	.word	0x40020044
 8002c7c:	40020058 	.word	0x40020058
 8002c80:	4002006c 	.word	0x4002006c

08002c84 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d008      	beq.n	8002cb0 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e186      	b.n	8002fbe <HAL_DMA_PollForTransfer+0x33a>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e179      	b.n	8002fbe <HAL_DMA_PollForTransfer+0x33a>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d137      	bne.n	8002d40 <HAL_DMA_PollForTransfer+0xbc>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b94      	ldr	r3, [pc, #592]	; (8002f28 <HAL_DMA_PollForTransfer+0x2a4>)
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d02e      	beq.n	8002d3a <HAL_DMA_PollForTransfer+0xb6>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b92      	ldr	r3, [pc, #584]	; (8002f2c <HAL_DMA_PollForTransfer+0x2a8>)
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d026      	beq.n	8002d36 <HAL_DMA_PollForTransfer+0xb2>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b90      	ldr	r3, [pc, #576]	; (8002f30 <HAL_DMA_PollForTransfer+0x2ac>)
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d01d      	beq.n	8002d30 <HAL_DMA_PollForTransfer+0xac>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b8e      	ldr	r3, [pc, #568]	; (8002f34 <HAL_DMA_PollForTransfer+0x2b0>)
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d014      	beq.n	8002d2a <HAL_DMA_PollForTransfer+0xa6>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <HAL_DMA_PollForTransfer+0x2b4>)
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d00b      	beq.n	8002d24 <HAL_DMA_PollForTransfer+0xa0>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b8a      	ldr	r3, [pc, #552]	; (8002f3c <HAL_DMA_PollForTransfer+0x2b8>)
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d102      	bne.n	8002d1e <HAL_DMA_PollForTransfer+0x9a>
 8002d18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d1c:	e00e      	b.n	8002d3c <HAL_DMA_PollForTransfer+0xb8>
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	e00b      	b.n	8002d3c <HAL_DMA_PollForTransfer+0xb8>
 8002d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d28:	e008      	b.n	8002d3c <HAL_DMA_PollForTransfer+0xb8>
 8002d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2e:	e005      	b.n	8002d3c <HAL_DMA_PollForTransfer+0xb8>
 8002d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d34:	e002      	b.n	8002d3c <HAL_DMA_PollForTransfer+0xb8>
 8002d36:	2320      	movs	r3, #32
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_PollForTransfer+0xb8>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e036      	b.n	8002dae <HAL_DMA_PollForTransfer+0x12a>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b78      	ldr	r3, [pc, #480]	; (8002f28 <HAL_DMA_PollForTransfer+0x2a4>)
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d02e      	beq.n	8002daa <HAL_DMA_PollForTransfer+0x126>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <HAL_DMA_PollForTransfer+0x2a8>)
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d026      	beq.n	8002da6 <HAL_DMA_PollForTransfer+0x122>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <HAL_DMA_PollForTransfer+0x2ac>)
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d01d      	beq.n	8002da0 <HAL_DMA_PollForTransfer+0x11c>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_DMA_PollForTransfer+0x2b0>)
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d014      	beq.n	8002d9a <HAL_DMA_PollForTransfer+0x116>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <HAL_DMA_PollForTransfer+0x2b4>)
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d00b      	beq.n	8002d94 <HAL_DMA_PollForTransfer+0x110>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b6e      	ldr	r3, [pc, #440]	; (8002f3c <HAL_DMA_PollForTransfer+0x2b8>)
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d102      	bne.n	8002d8e <HAL_DMA_PollForTransfer+0x10a>
 8002d88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d8c:	e00e      	b.n	8002dac <HAL_DMA_PollForTransfer+0x128>
 8002d8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d92:	e00b      	b.n	8002dac <HAL_DMA_PollForTransfer+0x128>
 8002d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d98:	e008      	b.n	8002dac <HAL_DMA_PollForTransfer+0x128>
 8002d9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d9e:	e005      	b.n	8002dac <HAL_DMA_PollForTransfer+0x128>
 8002da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da4:	e002      	b.n	8002dac <HAL_DMA_PollForTransfer+0x128>
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	e000      	b.n	8002dac <HAL_DMA_PollForTransfer+0x128>
 8002daa:	2304      	movs	r3, #4
 8002dac:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dae:	f7fd fa49 	bl	8000244 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8002db4:	e071      	b.n	8002e9a <HAL_DMA_PollForTransfer+0x216>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8002db6:	4b62      	ldr	r3, [pc, #392]	; (8002f40 <HAL_DMA_PollForTransfer+0x2bc>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_DMA_PollForTransfer+0x2a4>)
 8002dc2:	4299      	cmp	r1, r3
 8002dc4:	d02e      	beq.n	8002e24 <HAL_DMA_PollForTransfer+0x1a0>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <HAL_DMA_PollForTransfer+0x2a8>)
 8002dce:	4299      	cmp	r1, r3
 8002dd0:	d026      	beq.n	8002e20 <HAL_DMA_PollForTransfer+0x19c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <HAL_DMA_PollForTransfer+0x2ac>)
 8002dda:	4299      	cmp	r1, r3
 8002ddc:	d01d      	beq.n	8002e1a <HAL_DMA_PollForTransfer+0x196>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_DMA_PollForTransfer+0x2b0>)
 8002de6:	4299      	cmp	r1, r3
 8002de8:	d014      	beq.n	8002e14 <HAL_DMA_PollForTransfer+0x190>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4619      	mov	r1, r3
 8002df0:	4b51      	ldr	r3, [pc, #324]	; (8002f38 <HAL_DMA_PollForTransfer+0x2b4>)
 8002df2:	4299      	cmp	r1, r3
 8002df4:	d00b      	beq.n	8002e0e <HAL_DMA_PollForTransfer+0x18a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <HAL_DMA_PollForTransfer+0x2b8>)
 8002dfe:	4299      	cmp	r1, r3
 8002e00:	d102      	bne.n	8002e08 <HAL_DMA_PollForTransfer+0x184>
 8002e02:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002e06:	e00e      	b.n	8002e26 <HAL_DMA_PollForTransfer+0x1a2>
 8002e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e0c:	e00b      	b.n	8002e26 <HAL_DMA_PollForTransfer+0x1a2>
 8002e0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e12:	e008      	b.n	8002e26 <HAL_DMA_PollForTransfer+0x1a2>
 8002e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e18:	e005      	b.n	8002e26 <HAL_DMA_PollForTransfer+0x1a2>
 8002e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e1e:	e002      	b.n	8002e26 <HAL_DMA_PollForTransfer+0x1a2>
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	e000      	b.n	8002e26 <HAL_DMA_PollForTransfer+0x1a2>
 8002e24:	2308      	movs	r3, #8
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d017      	beq.n	8002e5c <HAL_DMA_PollForTransfer+0x1d8>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e34:	2101      	movs	r1, #1
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0b0      	b.n	8002fbe <HAL_DMA_PollForTransfer+0x33a>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d01a      	beq.n	8002e9a <HAL_DMA_PollForTransfer+0x216>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_DMA_PollForTransfer+0x1f6>
 8002e6a:	f7fd f9eb 	bl	8000244 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad2      	subs	r2, r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d90f      	bls.n	8002e9a <HAL_DMA_PollForTransfer+0x216>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e091      	b.n	8002fbe <HAL_DMA_PollForTransfer+0x33a>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8002e9a:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_DMA_PollForTransfer+0x2bc>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d087      	beq.n	8002db6 <HAL_DMA_PollForTransfer+0x132>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d14b      	bne.n	8002f44 <HAL_DMA_PollForTransfer+0x2c0>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002eac:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <HAL_DMA_PollForTransfer+0x2bc>)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_DMA_PollForTransfer+0x2a4>)
 8002eb6:	4299      	cmp	r1, r3
 8002eb8:	d02e      	beq.n	8002f18 <HAL_DMA_PollForTransfer+0x294>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_DMA_PollForTransfer+0x2a8>)
 8002ec2:	4299      	cmp	r1, r3
 8002ec4:	d026      	beq.n	8002f14 <HAL_DMA_PollForTransfer+0x290>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_DMA_PollForTransfer+0x2ac>)
 8002ece:	4299      	cmp	r1, r3
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_PollForTransfer+0x28a>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_DMA_PollForTransfer+0x2b0>)
 8002eda:	4299      	cmp	r1, r3
 8002edc:	d014      	beq.n	8002f08 <HAL_DMA_PollForTransfer+0x284>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_DMA_PollForTransfer+0x2b4>)
 8002ee6:	4299      	cmp	r1, r3
 8002ee8:	d00b      	beq.n	8002f02 <HAL_DMA_PollForTransfer+0x27e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_DMA_PollForTransfer+0x2b8>)
 8002ef2:	4299      	cmp	r1, r3
 8002ef4:	d102      	bne.n	8002efc <HAL_DMA_PollForTransfer+0x278>
 8002ef6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002efa:	e00e      	b.n	8002f1a <HAL_DMA_PollForTransfer+0x296>
 8002efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f00:	e00b      	b.n	8002f1a <HAL_DMA_PollForTransfer+0x296>
 8002f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f06:	e008      	b.n	8002f1a <HAL_DMA_PollForTransfer+0x296>
 8002f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f0c:	e005      	b.n	8002f1a <HAL_DMA_PollForTransfer+0x296>
 8002f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f12:	e002      	b.n	8002f1a <HAL_DMA_PollForTransfer+0x296>
 8002f14:	2320      	movs	r3, #32
 8002f16:	e000      	b.n	8002f1a <HAL_DMA_PollForTransfer+0x296>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002f24:	e046      	b.n	8002fb4 <HAL_DMA_PollForTransfer+0x330>
 8002f26:	bf00      	nop
 8002f28:	40020008 	.word	0x40020008
 8002f2c:	4002001c 	.word	0x4002001c
 8002f30:	40020030 	.word	0x40020030
 8002f34:	40020044 	.word	0x40020044
 8002f38:	40020058 	.word	0x40020058
 8002f3c:	4002006c 	.word	0x4002006c
 8002f40:	40020000 	.word	0x40020000
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f44:	4a20      	ldr	r2, [pc, #128]	; (8002fc8 <HAL_DMA_PollForTransfer+0x344>)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <HAL_DMA_PollForTransfer+0x348>)
 8002f4e:	4299      	cmp	r1, r3
 8002f50:	d02e      	beq.n	8002fb0 <HAL_DMA_PollForTransfer+0x32c>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4619      	mov	r1, r3
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <HAL_DMA_PollForTransfer+0x34c>)
 8002f5a:	4299      	cmp	r1, r3
 8002f5c:	d026      	beq.n	8002fac <HAL_DMA_PollForTransfer+0x328>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4619      	mov	r1, r3
 8002f64:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <HAL_DMA_PollForTransfer+0x350>)
 8002f66:	4299      	cmp	r1, r3
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_PollForTransfer+0x322>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_DMA_PollForTransfer+0x354>)
 8002f72:	4299      	cmp	r1, r3
 8002f74:	d014      	beq.n	8002fa0 <HAL_DMA_PollForTransfer+0x31c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <HAL_DMA_PollForTransfer+0x358>)
 8002f7e:	4299      	cmp	r1, r3
 8002f80:	d00b      	beq.n	8002f9a <HAL_DMA_PollForTransfer+0x316>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_DMA_PollForTransfer+0x35c>)
 8002f8a:	4299      	cmp	r1, r3
 8002f8c:	d102      	bne.n	8002f94 <HAL_DMA_PollForTransfer+0x310>
 8002f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f92:	e00e      	b.n	8002fb2 <HAL_DMA_PollForTransfer+0x32e>
 8002f94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f98:	e00b      	b.n	8002fb2 <HAL_DMA_PollForTransfer+0x32e>
 8002f9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f9e:	e008      	b.n	8002fb2 <HAL_DMA_PollForTransfer+0x32e>
 8002fa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fa4:	e005      	b.n	8002fb2 <HAL_DMA_PollForTransfer+0x32e>
 8002fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002faa:	e002      	b.n	8002fb2 <HAL_DMA_PollForTransfer+0x32e>
 8002fac:	2340      	movs	r3, #64	; 0x40
 8002fae:	e000      	b.n	8002fb2 <HAL_DMA_PollForTransfer+0x32e>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40020008 	.word	0x40020008
 8002fd0:	4002001c 	.word	0x4002001c
 8002fd4:	40020030 	.word	0x40020030
 8002fd8:	40020044 	.word	0x40020044
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	4002006c 	.word	0x4002006c

08002fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2204      	movs	r2, #4
 8003002:	409a      	lsls	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d055      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xd4>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d050      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003034:	4a6d      	ldr	r2, [pc, #436]	; (80031ec <HAL_DMA_IRQHandler+0x208>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4619      	mov	r1, r3
 800303c:	4b6c      	ldr	r3, [pc, #432]	; (80031f0 <HAL_DMA_IRQHandler+0x20c>)
 800303e:	4299      	cmp	r1, r3
 8003040:	d02e      	beq.n	80030a0 <HAL_DMA_IRQHandler+0xbc>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4619      	mov	r1, r3
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_DMA_IRQHandler+0x210>)
 800304a:	4299      	cmp	r1, r3
 800304c:	d026      	beq.n	800309c <HAL_DMA_IRQHandler+0xb8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	4b68      	ldr	r3, [pc, #416]	; (80031f8 <HAL_DMA_IRQHandler+0x214>)
 8003056:	4299      	cmp	r1, r3
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_IRQHandler+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4619      	mov	r1, r3
 8003060:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_DMA_IRQHandler+0x218>)
 8003062:	4299      	cmp	r1, r3
 8003064:	d014      	beq.n	8003090 <HAL_DMA_IRQHandler+0xac>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
 800306c:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_DMA_IRQHandler+0x21c>)
 800306e:	4299      	cmp	r1, r3
 8003070:	d00b      	beq.n	800308a <HAL_DMA_IRQHandler+0xa6>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4619      	mov	r1, r3
 8003078:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_DMA_IRQHandler+0x220>)
 800307a:	4299      	cmp	r1, r3
 800307c:	d102      	bne.n	8003084 <HAL_DMA_IRQHandler+0xa0>
 800307e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003082:	e00e      	b.n	80030a2 <HAL_DMA_IRQHandler+0xbe>
 8003084:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003088:	e00b      	b.n	80030a2 <HAL_DMA_IRQHandler+0xbe>
 800308a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800308e:	e008      	b.n	80030a2 <HAL_DMA_IRQHandler+0xbe>
 8003090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003094:	e005      	b.n	80030a2 <HAL_DMA_IRQHandler+0xbe>
 8003096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800309a:	e002      	b.n	80030a2 <HAL_DMA_IRQHandler+0xbe>
 800309c:	2340      	movs	r3, #64	; 0x40
 800309e:	e000      	b.n	80030a2 <HAL_DMA_IRQHandler+0xbe>
 80030a0:	2304      	movs	r3, #4
 80030a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 809a 	beq.w	80031e2 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	e094      	b.n	80031e2 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2202      	movs	r2, #2
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05c      	beq.n	8003182 <HAL_DMA_IRQHandler+0x19e>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d057      	beq.n	8003182 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	f022 020a 	bic.w	r2, r2, #10
 80030ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030f8:	4a3c      	ldr	r2, [pc, #240]	; (80031ec <HAL_DMA_IRQHandler+0x208>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <HAL_DMA_IRQHandler+0x20c>)
 8003102:	4299      	cmp	r1, r3
 8003104:	d02e      	beq.n	8003164 <HAL_DMA_IRQHandler+0x180>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <HAL_DMA_IRQHandler+0x210>)
 800310e:	4299      	cmp	r1, r3
 8003110:	d026      	beq.n	8003160 <HAL_DMA_IRQHandler+0x17c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4619      	mov	r1, r3
 8003118:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <HAL_DMA_IRQHandler+0x214>)
 800311a:	4299      	cmp	r1, r3
 800311c:	d01d      	beq.n	800315a <HAL_DMA_IRQHandler+0x176>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4619      	mov	r1, r3
 8003124:	4b35      	ldr	r3, [pc, #212]	; (80031fc <HAL_DMA_IRQHandler+0x218>)
 8003126:	4299      	cmp	r1, r3
 8003128:	d014      	beq.n	8003154 <HAL_DMA_IRQHandler+0x170>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_DMA_IRQHandler+0x21c>)
 8003132:	4299      	cmp	r1, r3
 8003134:	d00b      	beq.n	800314e <HAL_DMA_IRQHandler+0x16a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4619      	mov	r1, r3
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_DMA_IRQHandler+0x220>)
 800313e:	4299      	cmp	r1, r3
 8003140:	d102      	bne.n	8003148 <HAL_DMA_IRQHandler+0x164>
 8003142:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003146:	e00e      	b.n	8003166 <HAL_DMA_IRQHandler+0x182>
 8003148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314c:	e00b      	b.n	8003166 <HAL_DMA_IRQHandler+0x182>
 800314e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003152:	e008      	b.n	8003166 <HAL_DMA_IRQHandler+0x182>
 8003154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003158:	e005      	b.n	8003166 <HAL_DMA_IRQHandler+0x182>
 800315a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800315e:	e002      	b.n	8003166 <HAL_DMA_IRQHandler+0x182>
 8003160:	2320      	movs	r3, #32
 8003162:	e000      	b.n	8003166 <HAL_DMA_IRQHandler+0x182>
 8003164:	2302      	movs	r3, #2
 8003166:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d034      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003180:	e02f      	b.n	80031e2 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2208      	movs	r2, #8
 8003188:	409a      	lsls	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d028      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x200>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d023      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	f022 020e 	bic.w	r2, r2, #14
 80031aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
    }
  }
  return;
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
}
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020008 	.word	0x40020008
 80031f4:	4002001c 	.word	0x4002001c
 80031f8:	40020030 	.word	0x40020030
 80031fc:	40020044 	.word	0x40020044
 8003200:	40020058 	.word	0x40020058
 8003204:	4002006c 	.word	0x4002006c

08003208 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	460b      	mov	r3, r1
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_DMA_RegisterCallback+0x20>
 8003224:	2302      	movs	r3, #2
 8003226:	e032      	b.n	800328e <HAL_DMA_RegisterCallback+0x86>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003236:	2b01      	cmp	r3, #1
 8003238:	d122      	bne.n	8003280 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 800323a:	7afb      	ldrb	r3, [r7, #11]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d81b      	bhi.n	8003278 <HAL_DMA_RegisterCallback+0x70>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_DMA_RegisterCallback+0x40>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003259 	.word	0x08003259
 800324c:	08003261 	.word	0x08003261
 8003250:	08003269 	.word	0x08003269
 8003254:	08003271 	.word	0x08003271
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800325e:	e011      	b.n	8003284 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8003266:	e00d      	b.n	8003284 <HAL_DMA_RegisterCallback+0x7c>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 800326e:	e009      	b.n	8003284 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8003276:	e005      	b.n	8003284 <HAL_DMA_RegisterCallback+0x7c>
      
    default:
      status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 800327c:	bf00      	nop
 800327e:	e001      	b.n	8003284 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
}
 800328e:	4618      	mov	r0, r3
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <HAL_DMA_UnRegisterCallback>:
  * @param CallbackID: User Callback identifer
  *                    a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_DMA_UnRegisterCallback+0x1e>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e040      	b.n	8003338 <HAL_DMA_UnRegisterCallback+0xa0>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d130      	bne.n	800332a <HAL_DMA_UnRegisterCallback+0x92>
  {
    switch (CallbackID)
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d829      	bhi.n	8003322 <HAL_DMA_UnRegisterCallback+0x8a>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <HAL_DMA_UnRegisterCallback+0x3c>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032e9 	.word	0x080032e9
 80032d8:	080032f1 	.word	0x080032f1
 80032dc:	080032f9 	.word	0x080032f9
 80032e0:	08003301 	.word	0x08003301
 80032e4:	08003309 	.word	0x08003309
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80032ee:	e01e      	b.n	800332e <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 80032f6:	e01a      	b.n	800332e <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 80032fe:	e016      	b.n	800332e <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8003306:	e012      	b.n	800332e <HAL_DMA_UnRegisterCallback+0x96>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
      hdma->XferHalfCpltCallback = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma->XferErrorCallback = NULL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
      hdma->XferAbortCallback = NULL;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8003320:	e005      	b.n	800332e <HAL_DMA_UnRegisterCallback+0x96>

    default:
      status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      break;
 8003326:	bf00      	nop
 8003328:	e001      	b.n	800332e <HAL_DMA_UnRegisterCallback+0x96>
    }
  }
  else
  {
    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003386:	2101      	movs	r1, #1
 8003388:	fa01 f202 	lsl.w	r2, r1, r2
 800338c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b10      	cmp	r3, #16
 800339c:	d108      	bne.n	80033b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033ae:	e007      	b.n	80033c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80033cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033e6:	4b2f      	ldr	r3, [pc, #188]	; (80034a4 <HAL_FLASH_Program+0xd8>)
 80033e8:	7e1b      	ldrb	r3, [r3, #24]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_FLASH_Program+0x26>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e054      	b.n	800349c <HAL_FLASH_Program+0xd0>
 80033f2:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <HAL_FLASH_Program+0xd8>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033fc:	f000 fa20 	bl	8003840 <FLASH_WaitForLastOperation>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d144      	bne.n	8003494 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003410:	2301      	movs	r3, #1
 8003412:	757b      	strb	r3, [r7, #21]
 8003414:	e007      	b.n	8003426 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d102      	bne.n	8003422 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800341c:	2302      	movs	r3, #2
 800341e:	757b      	strb	r3, [r7, #21]
 8003420:	e001      	b.n	8003426 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003422:	2304      	movs	r3, #4
 8003424:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003426:	2300      	movs	r3, #0
 8003428:	75bb      	strb	r3, [r7, #22]
 800342a:	e02d      	b.n	8003488 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800342c:	7dbb      	ldrb	r3, [r7, #22]
 800342e:	005a      	lsls	r2, r3, #1
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	eb02 0e03 	add.w	lr, r2, r3
 8003436:	7dbb      	ldrb	r3, [r7, #22]
 8003438:	0119      	lsls	r1, r3, #4
 800343a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800343e:	f1c1 0620 	rsb	r6, r1, #32
 8003442:	f1a1 0020 	sub.w	r0, r1, #32
 8003446:	fa22 f401 	lsr.w	r4, r2, r1
 800344a:	fa03 f606 	lsl.w	r6, r3, r6
 800344e:	4334      	orrs	r4, r6
 8003450:	fa23 f000 	lsr.w	r0, r3, r0
 8003454:	4304      	orrs	r4, r0
 8003456:	fa23 f501 	lsr.w	r5, r3, r1
 800345a:	b2a3      	uxth	r3, r4
 800345c:	4619      	mov	r1, r3
 800345e:	4670      	mov	r0, lr
 8003460:	f000 f9d2 	bl	8003808 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003464:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003468:	f000 f9ea 	bl	8003840 <FLASH_WaitForLastOperation>
 800346c:	4603      	mov	r3, r0
 800346e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003470:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_FLASH_Program+0xdc>)
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <HAL_FLASH_Program+0xdc>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d107      	bne.n	8003492 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003482:	7dbb      	ldrb	r3, [r7, #22]
 8003484:	3301      	adds	r3, #1
 8003486:	75bb      	strb	r3, [r7, #22]
 8003488:	7dba      	ldrb	r2, [r7, #22]
 800348a:	7d7b      	ldrb	r3, [r7, #21]
 800348c:	429a      	cmp	r2, r3
 800348e:	d3cd      	bcc.n	800342c <HAL_FLASH_Program+0x60>
 8003490:	e000      	b.n	8003494 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003492:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_FLASH_Program+0xd8>)
 8003496:	2200      	movs	r2, #0
 8003498:	761a      	strb	r2, [r3, #24]

  return status;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
}
 800349c:	4618      	mov	r0, r3
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a4:	20000420 	.word	0x20000420
 80034a8:	40022000 	.word	0x40022000

080034ac <HAL_FLASH_Program_IT>:
  * @param  Data:        Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 80034c0:	7e1b      	ldrb	r3, [r3, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_FLASH_Program_IT+0x1e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e030      	b.n	800352c <HAL_FLASH_Program_IT+0x80>
 80034ca:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	761a      	strb	r2, [r3, #24]
    /* Enable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  }
#else
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80034d0:	4a19      	ldr	r2, [pc, #100]	; (8003538 <HAL_FLASH_Program_IT+0x8c>)
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_FLASH_Program_IT+0x8c>)
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80034da:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */
  
  pFlash.Address = Address;
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6093      	str	r3, [r2, #8]
  pFlash.Data = Data;
 80034e2:	4a14      	ldr	r2, [pc, #80]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 80034e4:	e897 0018 	ldmia.w	r7, {r3, r4}
 80034e8:	e9c2 3404 	strd	r3, r4, [r2, #16]

  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <HAL_FLASH_Program_IT+0x54>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 80034f4:	2203      	movs	r2, #3
 80034f6:	701a      	strb	r2, [r3, #0]
    /* Program halfword (16-bit) at a specified address. */
    pFlash.DataRemaining = 1U;
 80034f8:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e00f      	b.n	8003520 <HAL_FLASH_Program_IT+0x74>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d106      	bne.n	8003514 <HAL_FLASH_Program_IT+0x68>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 8003508:	2204      	movs	r2, #4
 800350a:	701a      	strb	r2, [r3, #0]
    /* Program word (32-bit : 2*16-bit) at a specified address. */
    pFlash.DataRemaining = 2U;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 800350e:	2202      	movs	r2, #2
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	e005      	b.n	8003520 <HAL_FLASH_Program_IT+0x74>
  }
  else
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 8003516:	2205      	movs	r2, #5
 8003518:	701a      	strb	r2, [r3, #0]
    /* Program double word (64-bit : 4*16-bit) at a specified address. */
    pFlash.DataRemaining = 4U;
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_FLASH_Program_IT+0x88>)
 800351c:	2204      	movs	r2, #4
 800351e:	605a      	str	r2, [r3, #4]
  }

  /* Program halfword (16-bit) at a specified address. */
  FLASH_Program_HalfWord(Address, (uint16_t)Data);
 8003520:	883b      	ldrh	r3, [r7, #0]
 8003522:	4619      	mov	r1, r3
 8003524:	68b8      	ldr	r0, [r7, #8]
 8003526:	f000 f96f 	bl	8003808 <FLASH_Program_HalfWord>

  return status;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd90      	pop	{r4, r7, pc}
 8003534:	20000420 	.word	0x20000420
 8003538:	40022000 	.word	0x40022000

0800353c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800353c:	b5b0      	push	{r4, r5, r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003546:	4b6c      	ldr	r3, [pc, #432]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_FLASH_IRQHandler+0x22>
 8003552:	4b69      	ldr	r3, [pc, #420]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00e      	beq.n	800357c <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800355e:	4b67      	ldr	r3, [pc, #412]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8003564:	4b65      	ldr	r3, [pc, #404]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003566:	f04f 32ff 	mov.w	r2, #4294967295
 800356a:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 800356c:	f000 f9ae 	bl	80038cc <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8ce 	bl	8003712 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003576:	4b61      	ldr	r3, [pc, #388]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800357c:	4b5e      	ldr	r3, [pc, #376]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 809e 	beq.w	80036c6 <HAL_FLASH_IRQHandler+0x18a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800358a:	4b5b      	ldr	r3, [pc, #364]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 800358c:	2220      	movs	r2, #32
 800358e:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8003590:	4b5a      	ldr	r3, [pc, #360]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8095 	beq.w	80036c6 <HAL_FLASH_IRQHandler+0x18a>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800359c:	4b57      	ldr	r3, [pc, #348]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d12d      	bne.n	8003602 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80035a6:	4b55      	ldr	r3, [pc, #340]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	4a53      	ldr	r2, [pc, #332]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80035ae:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80035b0:	4b52      	ldr	r3, [pc, #328]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d017      	beq.n	80035e8 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f89e 	bl	8003700 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80035c4:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035cc:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80035ce:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80035d4:	4a48      	ldr	r2, [pc, #288]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 80035d6:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f023 0302 	bic.w	r3, r3, #2
 80035de:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fdbb 	bl	800415c <FLASH_PageErase>
 80035e6:	e06e      	b.n	80036c6 <HAL_FLASH_IRQHandler+0x18a>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	4a43      	ldr	r2, [pc, #268]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80035f4:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f880 	bl	8003700 <HAL_FLASH_EndOfOperationCallback>
 8003600:	e061      	b.n	80036c6 <HAL_FLASH_IRQHandler+0x18a>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003602:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d10c      	bne.n	8003626 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800360c:	4a3a      	ldr	r2, [pc, #232]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f023 0304 	bic.w	r3, r3, #4
 8003616:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8003618:	2000      	movs	r0, #0
 800361a:	f000 f871 	bl	8003700 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e04f      	b.n	80036c6 <HAL_FLASH_IRQHandler+0x18a>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8003626:	4b35      	ldr	r3, [pc, #212]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	4a33      	ldr	r2, [pc, #204]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 800362e:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d022      	beq.n	800367e <HAL_FLASH_IRQHandler+0x142>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	3302      	adds	r3, #2
 800363e:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003640:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 800364a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800364e:	0c14      	lsrs	r4, r2, #16
 8003650:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003654:	0c1d      	lsrs	r5, r3, #16
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003658:	e9c3 4504 	strd	r4, r5, [r3, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800365c:	4a26      	ldr	r2, [pc, #152]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 800365e:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8003668:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 800366a:	f103 0410 	add.w	r4, r3, #16
 800366e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003672:	b29b      	uxth	r3, r3
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f8c6 	bl	8003808 <FLASH_Program_HalfWord>
 800367c:	e023      	b.n	80036c6 <HAL_FLASH_IRQHandler+0x18a>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800367e:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b03      	cmp	r3, #3
 8003686:	d105      	bne.n	8003694 <HAL_FLASH_IRQHandler+0x158>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f837 	bl	8003700 <HAL_FLASH_EndOfOperationCallback>
 8003692:	e011      	b.n	80036b8 <HAL_FLASH_IRQHandler+0x17c>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b04      	cmp	r3, #4
 800369c:	d106      	bne.n	80036ac <HAL_FLASH_IRQHandler+0x170>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	3b02      	subs	r3, #2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f82b 	bl	8003700 <HAL_FLASH_EndOfOperationCallback>
 80036aa:	e005      	b.n	80036b8 <HAL_FLASH_IRQHandler+0x17c>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	3b06      	subs	r3, #6
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f824 	bl	8003700 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80036ba:	f04f 32ff 	mov.w	r2, #4294967295
 80036be:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10e      	bne.n	80036ee <HAL_FLASH_IRQHandler+0x1b2>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80036d0:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f023 0307 	bic.w	r3, r3, #7
 80036da:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80036dc:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_FLASH_IRQHandler+0x1bc>)
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80036e6:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_FLASH_IRQHandler+0x1c0>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	761a      	strb	r2, [r3, #24]
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bdb0      	pop	{r4, r5, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40022000 	.word	0x40022000
 80036fc:	20000420 	.word	0x20000420

08003700 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <HAL_FLASH_Unlock+0x40>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_FLASH_Unlock+0x40>)
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_FLASH_Unlock+0x44>)
 800373e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_FLASH_Unlock+0x40>)
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <HAL_FLASH_Unlock+0x48>)
 8003744:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_FLASH_Unlock+0x40>)
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003756:	79fb      	ldrb	r3, [r7, #7]
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40022000 	.word	0x40022000
 8003768:	45670123 	.word	0x45670123
 800376c:	cdef89ab 	.word	0xcdef89ab

08003770 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003774:	4a05      	ldr	r2, [pc, #20]	; (800378c <HAL_FLASH_Lock+0x1c>)
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_FLASH_Lock+0x1c>)
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800377e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40022000 	.word	0x40022000

08003790 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_FLASH_OB_Unlock+0x2c>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_FLASH_OB_Unlock+0x2c>)
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <HAL_FLASH_OB_Unlock+0x30>)
 80037a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_FLASH_OB_Unlock+0x2c>)
 80037a8:	4a06      	ldr	r2, [pc, #24]	; (80037c4 <HAL_FLASH_OB_Unlock+0x34>)
 80037aa:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40022000 	.word	0x40022000
 80037c0:	45670123 	.word	0x45670123
 80037c4:	cdef89ab 	.word	0xcdef89ab

080037c8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80037cc:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <HAL_FLASH_OB_Lock+0x1c>)
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_FLASH_OB_Lock+0x1c>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40022000 	.word	0x40022000

080037e8 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 80037ec:	f7fe ffb9 	bl	8002762 <HAL_NVIC_SystemReset>
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80037f8:	4b02      	ldr	r3, [pc, #8]	; (8003804 <HAL_FLASH_GetError+0x10>)
 80037fa:	69db      	ldr	r3, [r3, #28]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	20000420 	.word	0x20000420

08003808 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <FLASH_Program_HalfWord+0x30>)
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <FLASH_Program_HalfWord+0x34>)
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <FLASH_Program_HalfWord+0x34>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	887a      	ldrh	r2, [r7, #2]
 800382a:	801a      	strh	r2, [r3, #0]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000420 	.word	0x20000420
 800383c:	40022000 	.word	0x40022000

08003840 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7fc fcfc 	bl	8000244 <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800384e:	e010      	b.n	8003872 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d00c      	beq.n	8003872 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <FLASH_WaitForLastOperation+0x2e>
 800385e:	f7fc fcf1 	bl	8000244 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1ad2      	subs	r2, r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d901      	bls.n	8003872 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e025      	b.n	80038be <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <FLASH_WaitForLastOperation+0x88>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e8      	bne.n	8003850 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <FLASH_WaitForLastOperation+0x88>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <FLASH_WaitForLastOperation+0x88>)
 800388c:	2220      	movs	r2, #32
 800388e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <FLASH_WaitForLastOperation+0x88>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <FLASH_WaitForLastOperation+0x88>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d105      	bne.n	80038b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <FLASH_WaitForLastOperation+0x88>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80038b4:	f000 f80a 	bl	80038cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40022000 	.word	0x40022000

080038cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <FLASH_SetErrorCode+0x98>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80038e2:	4b21      	ldr	r3, [pc, #132]	; (8003968 <FLASH_SetErrorCode+0x9c>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <FLASH_SetErrorCode+0x9c>)
 80038ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f043 0310 	orr.w	r3, r3, #16
 80038f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80038f6:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <FLASH_SetErrorCode+0x98>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <FLASH_SetErrorCode+0x9c>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	4a17      	ldr	r2, [pc, #92]	; (8003968 <FLASH_SetErrorCode+0x9c>)
 800390c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <FLASH_SetErrorCode+0x98>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <FLASH_SetErrorCode+0x9c>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <FLASH_SetErrorCode+0x9c>)
 800392c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800392e:	4a0d      	ldr	r2, [pc, #52]	; (8003964 <FLASH_SetErrorCode+0x98>)
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <FLASH_SetErrorCode+0x98>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f240 1201 	movw	r2, #257	; 0x101
 8003940:	4293      	cmp	r3, r2
 8003942:	d106      	bne.n	8003952 <FLASH_SetErrorCode+0x86>
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <FLASH_SetErrorCode+0x98>)
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <FLASH_SetErrorCode+0x98>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	61d3      	str	r3, [r2, #28]
}  
 8003950:	e002      	b.n	8003958 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003952:	4a04      	ldr	r2, [pc, #16]	; (8003964 <FLASH_SetErrorCode+0x98>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	60d3      	str	r3, [r2, #12]
}  
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40022000 	.word	0x40022000
 8003968:	20000420 	.word	0x20000420

0800396c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800397e:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <HAL_FLASHEx_Erase+0xd0>)
 8003980:	7e1b      	ldrb	r3, [r3, #24]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_FLASHEx_Erase+0x1e>
 8003986:	2302      	movs	r3, #2
 8003988:	e053      	b.n	8003a32 <HAL_FLASHEx_Erase+0xc6>
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_FLASHEx_Erase+0xd0>)
 800398c:	2201      	movs	r2, #1
 800398e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d116      	bne.n	80039c6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003998:	f24c 3050 	movw	r0, #50000	; 0xc350
 800399c:	f7ff ff50 	bl	8003840 <FLASH_WaitForLastOperation>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d141      	bne.n	8003a2a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f000 f988 	bl	8003cbc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039b0:	f7ff ff46 	bl	8003840 <FLASH_WaitForLastOperation>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80039b8:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <HAL_FLASHEx_Erase+0xd4>)
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <HAL_FLASHEx_Erase+0xd4>)
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f023 0304 	bic.w	r3, r3, #4
 80039c2:	6113      	str	r3, [r2, #16]
 80039c4:	e031      	b.n	8003a2a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80039c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039ca:	f7ff ff39 	bl	8003840 <FLASH_WaitForLastOperation>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d12a      	bne.n	8003a2a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f04f 32ff 	mov.w	r2, #4294967295
 80039da:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	e019      	b.n	8003a18 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80039e4:	68b8      	ldr	r0, [r7, #8]
 80039e6:	f000 fbb9 	bl	800415c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039ee:	f7ff ff27 	bl	8003840 <FLASH_WaitForLastOperation>
 80039f2:	4603      	mov	r3, r0
 80039f4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <HAL_FLASHEx_Erase+0xd4>)
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_FLASHEx_Erase+0xd4>)
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	601a      	str	r2, [r3, #0]
            break;
 8003a0e:	e00c      	b.n	8003a2a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a16:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	029a      	lsls	r2, r3, #10
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d8dc      	bhi.n	80039e4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a2a:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <HAL_FLASHEx_Erase+0xd0>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	761a      	strb	r2, [r3, #24]

  return status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000420 	.word	0x20000420
 8003a40:	40022000 	.word	0x40022000

08003a44 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_FLASHEx_Erase_IT+0x7c>)
 8003a52:	7e1b      	ldrb	r3, [r3, #24]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_FLASHEx_Erase_IT+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e02d      	b.n	8003ab8 <HAL_FLASHEx_Erase_IT+0x74>
 8003a5c:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <HAL_FLASHEx_Erase_IT+0x7c>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	761a      	strb	r2, [r3, #24]

  /* If procedure already ongoing, reject the next one */
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8003a62:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <HAL_FLASHEx_Erase_IT+0x7c>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_FLASHEx_Erase_IT+0x2c>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e023      	b.n	8003ab8 <HAL_FLASHEx_Erase_IT+0x74>
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <HAL_FLASHEx_Erase_IT+0x80>)
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <HAL_FLASHEx_Erase_IT+0x80>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003a7a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  
#endif
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d108      	bne.n	8003a96 <HAL_FLASHEx_Erase_IT+0x52>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <HAL_FLASHEx_Erase_IT+0x7c>)
 8003a86:	2202      	movs	r2, #2
 8003a88:	701a      	strb	r2, [r3, #0]
        FLASH_MassErase(pEraseInit->Banks);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f914 	bl	8003cbc <FLASH_MassErase>
 8003a94:	e00f      	b.n	8003ab6 <HAL_FLASHEx_Erase_IT+0x72>

    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_FLASHEx_Erase_IT+0x7c>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = pEraseInit->NbPages;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <HAL_FLASHEx_Erase_IT+0x7c>)
 8003aa2:	6053      	str	r3, [r2, #4]
    pFlash.Address = pEraseInit->PageAddress;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <HAL_FLASHEx_Erase_IT+0x7c>)
 8003aaa:	6093      	str	r3, [r2, #8]

    /*Erase 1st page and wait for IT*/
    FLASH_PageErase(pEraseInit->PageAddress);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fb53 	bl	800415c <FLASH_PageErase>
  }

  return status;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000420 	.word	0x20000420
 8003ac4:	40022000 	.word	0x40022000

08003ac8 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 8003ace:	23a5      	movs	r3, #165	; 0xa5
 8003ad0:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8003ad6:	f000 fb15 	bl	8004104 <FLASH_OB_GetRDP>
 8003ada:	4603      	mov	r3, r0
 8003adc:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ade:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ae2:	f7ff fead 	bl	8003840 <FLASH_WaitForLastOperation>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d123      	bne.n	8003b38 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003af0:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_FLASHEx_OBErase+0x7c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8003af6:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <HAL_FLASHEx_OBErase+0x80>)
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_FLASHEx_OBErase+0x80>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f043 0320 	orr.w	r3, r3, #32
 8003b00:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b02:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <HAL_FLASHEx_OBErase+0x80>)
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_FLASHEx_OBErase+0x80>)
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0c:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b12:	f7ff fe95 	bl	8003840 <FLASH_WaitForLastOperation>
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <HAL_FLASHEx_OBErase+0x80>)
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_FLASHEx_OBErase+0x80>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f023 0320 	bic.w	r3, r3, #32
 8003b24:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8003b2c:	79bb      	ldrb	r3, [r7, #6]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa22 	bl	8003f78 <FLASH_OB_RDP_LevelConfig>
 8003b34:	4603      	mov	r3, r0
 8003b36:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8003b38:	79fb      	ldrb	r3, [r7, #7]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000420 	.word	0x20000420
 8003b48:	40022000 	.word	0x40022000

08003b4c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b58:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <HAL_FLASHEx_OBProgram+0xf4>)
 8003b5a:	7e1b      	ldrb	r3, [r3, #24]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_FLASHEx_OBProgram+0x18>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e069      	b.n	8003c38 <HAL_FLASHEx_OBProgram+0xec>
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_FLASHEx_OBProgram+0xf4>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01a      	beq.n	8003bac <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f8b6 	bl	8003cf4 <FLASH_OB_EnableWRP>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]
 8003b8c:	e006      	b.n	8003b9c <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f950 	bl	8003e38 <FLASH_OB_DisableWRP>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <HAL_FLASHEx_OBProgram+0xf4>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	761a      	strb	r2, [r3, #24]
      return status;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	e045      	b.n	8003c38 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7c1b      	ldrb	r3, [r3, #16]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f9db 	bl	8003f78 <FLASH_OB_RDP_LevelConfig>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <HAL_FLASHEx_OBProgram+0xf4>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	761a      	strb	r2, [r3, #24]
      return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	e030      	b.n	8003c38 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00e      	beq.n	8003c00 <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7c5b      	ldrb	r3, [r3, #17]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fa16 	bl	8004018 <FLASH_OB_UserConfig>
 8003bec:	4603      	mov	r3, r0
 8003bee:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_FLASHEx_OBProgram+0xf4>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	761a      	strb	r2, [r3, #24]
      return status;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	e01b      	b.n	8003c38 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d011      	beq.n	8003c30 <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7e1b      	ldrb	r3, [r3, #24]
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f000 fa36 	bl	8004088 <FLASH_OB_ProgramData>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_FLASHEx_OBProgram+0xf4>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	761a      	strb	r2, [r3, #24]
      return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	e003      	b.n	8003c38 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_FLASHEx_OBProgram+0xf4>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	761a      	strb	r2, [r3, #24]

  return status;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000420 	.word	0x20000420

08003c44 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2207      	movs	r2, #7
 8003c50:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8003c52:	f000 fa4d 	bl	80040f0 <FLASH_OB_GetWRP>
 8003c56:	4602      	mov	r2, r0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8003c5c:	f000 fa52 	bl	8004104 <FLASH_OB_GetRDP>
 8003c60:	4603      	mov	r3, r0
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8003c68:	f000 fa68 	bl	800413c <FLASH_OB_GetUser>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	745a      	strb	r2, [r3, #17]
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_FLASHEx_OBGetUserData>:
  *            @arg @ref OB_DATA_ADDRESS_DATA0
  *            @arg @ref OB_DATA_ADDRESS_DATA1
  * @retval Value programmed in USER data
  */
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t value = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
  
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_FLASHEx_OBGetUserData+0x38>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d105      	bne.n	8003c9c <HAL_FLASHEx_OBGetUserData+0x20>
  {
    /* Get value programmed in OB USER Data0 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_FLASHEx_OBGetUserData+0x3c>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	0a9b      	lsrs	r3, r3, #10
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e004      	b.n	8003ca6 <HAL_FLASHEx_OBGetUserData+0x2a>
  }
  else
  {
    /* Get value programmed in OB USER Data1 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_FLASHEx_OBGetUserData+0x3c>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	0c9b      	lsrs	r3, r3, #18
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
  }
  
  return value;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	1ffff804 	.word	0x1ffff804
 8003cb8:	40022000 	.word	0x40022000

08003cbc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <FLASH_MassErase+0x30>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <FLASH_MassErase+0x34>)
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <FLASH_MassErase+0x34>)
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003cd6:	4a06      	ldr	r2, [pc, #24]	; (8003cf0 <FLASH_MassErase+0x34>)
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <FLASH_MassErase+0x34>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	20000420 	.word	0x20000420
 8003cf0:	40022000 	.word	0x40022000

08003cf4 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8003d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d04:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8003d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0a:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8003d0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d10:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8003d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d16:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8003d18:	f000 f9ea 	bl	80040f0 <FLASH_OB_GetWRP>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	43db      	mvns	r3, r3
 8003d26:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0e1b      	lsrs	r3, r3, #24
 8003d48:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d4e:	f7ff fd77 	bl	8003840 <FLASH_WaitForLastOperation>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d162      	bne.n	8003e22 <FLASH_OB_EnableWRP+0x12e>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <FLASH_OB_EnableWRP+0x138>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8003d62:	f7ff feb1 	bl	8003ac8 <HAL_FLASHEx_OBErase>
 8003d66:	4603      	mov	r3, r0
 8003d68:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d158      	bne.n	8003e22 <FLASH_OB_EnableWRP+0x12e>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003d70:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <FLASH_OB_EnableWRP+0x13c>)
 8003d72:	4b2f      	ldr	r3, [pc, #188]	; (8003e30 <FLASH_OB_EnableWRP+0x13c>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f043 0310 	orr.w	r3, r3, #16
 8003d7a:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8003d7c:	8abb      	ldrh	r3, [r7, #20]
 8003d7e:	2bff      	cmp	r3, #255	; 0xff
 8003d80:	d00d      	beq.n	8003d9e <FLASH_OB_EnableWRP+0xaa>
      {
        OB->WRP0 &= WRP0_Data;
 8003d82:	492c      	ldr	r1, [pc, #176]	; (8003e34 <FLASH_OB_EnableWRP+0x140>)
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <FLASH_OB_EnableWRP+0x140>)
 8003d86:	891b      	ldrh	r3, [r3, #8]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	8abb      	ldrh	r3, [r7, #20]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d96:	f7ff fd53 	bl	8003840 <FLASH_WaitForLastOperation>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d110      	bne.n	8003dc6 <FLASH_OB_EnableWRP+0xd2>
 8003da4:	8a7b      	ldrh	r3, [r7, #18]
 8003da6:	2bff      	cmp	r3, #255	; 0xff
 8003da8:	d00d      	beq.n	8003dc6 <FLASH_OB_EnableWRP+0xd2>
      {
        OB->WRP1 &= WRP1_Data;
 8003daa:	4922      	ldr	r1, [pc, #136]	; (8003e34 <FLASH_OB_EnableWRP+0x140>)
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <FLASH_OB_EnableWRP+0x140>)
 8003dae:	895b      	ldrh	r3, [r3, #10]
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	8a7b      	ldrh	r3, [r7, #18]
 8003db4:	4013      	ands	r3, r2
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dbe:	f7ff fd3f 	bl	8003840 <FLASH_WaitForLastOperation>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d110      	bne.n	8003dee <FLASH_OB_EnableWRP+0xfa>
 8003dcc:	8a3b      	ldrh	r3, [r7, #16]
 8003dce:	2bff      	cmp	r3, #255	; 0xff
 8003dd0:	d00d      	beq.n	8003dee <FLASH_OB_EnableWRP+0xfa>
      {
        OB->WRP2 &= WRP2_Data;
 8003dd2:	4918      	ldr	r1, [pc, #96]	; (8003e34 <FLASH_OB_EnableWRP+0x140>)
 8003dd4:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <FLASH_OB_EnableWRP+0x140>)
 8003dd6:	899b      	ldrh	r3, [r3, #12]
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	8a3b      	ldrh	r3, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003de2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de6:	f7ff fd2b 	bl	8003840 <FLASH_WaitForLastOperation>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d110      	bne.n	8003e16 <FLASH_OB_EnableWRP+0x122>
 8003df4:	89fb      	ldrh	r3, [r7, #14]
 8003df6:	2bff      	cmp	r3, #255	; 0xff
 8003df8:	d00d      	beq.n	8003e16 <FLASH_OB_EnableWRP+0x122>
      {
        OB->WRP3 &= WRP3_Data;
 8003dfa:	490e      	ldr	r1, [pc, #56]	; (8003e34 <FLASH_OB_EnableWRP+0x140>)
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <FLASH_OB_EnableWRP+0x140>)
 8003dfe:	89db      	ldrh	r3, [r3, #14]
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	4013      	ands	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e0e:	f7ff fd17 	bl	8003840 <FLASH_WaitForLastOperation>
 8003e12:	4603      	mov	r3, r0
 8003e14:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003e16:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <FLASH_OB_EnableWRP+0x13c>)
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <FLASH_OB_EnableWRP+0x13c>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f023 0310 	bic.w	r3, r3, #16
 8003e20:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000420 	.word	0x20000420
 8003e30:	40022000 	.word	0x40022000
 8003e34:	1ffff800 	.word	0x1ffff800

08003e38 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8003e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e48:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8003e4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e4e:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8003e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e54:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8003e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e5a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8003e5c:	f000 f948 	bl	80040f0 <FLASH_OB_GetWRP>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	0e1b      	lsrs	r3, r3, #24
 8003e88:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e8e:	f7ff fcd7 	bl	8003840 <FLASH_WaitForLastOperation>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d162      	bne.n	8003f62 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e9c:	4b33      	ldr	r3, [pc, #204]	; (8003f6c <FLASH_OB_DisableWRP+0x134>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8003ea2:	f7ff fe11 	bl	8003ac8 <HAL_FLASHEx_OBErase>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d158      	bne.n	8003f62 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <FLASH_OB_DisableWRP+0x138>)
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <FLASH_OB_DisableWRP+0x138>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f043 0310 	orr.w	r3, r3, #16
 8003eba:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8003ebc:	8abb      	ldrh	r3, [r7, #20]
 8003ebe:	2bff      	cmp	r3, #255	; 0xff
 8003ec0:	d00d      	beq.n	8003ede <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 8003ec2:	492c      	ldr	r1, [pc, #176]	; (8003f74 <FLASH_OB_DisableWRP+0x13c>)
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <FLASH_OB_DisableWRP+0x13c>)
 8003ec6:	891b      	ldrh	r3, [r3, #8]
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	8abb      	ldrh	r3, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ed2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ed6:	f7ff fcb3 	bl	8003840 <FLASH_WaitForLastOperation>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d110      	bne.n	8003f06 <FLASH_OB_DisableWRP+0xce>
 8003ee4:	8a7b      	ldrh	r3, [r7, #18]
 8003ee6:	2bff      	cmp	r3, #255	; 0xff
 8003ee8:	d00d      	beq.n	8003f06 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8003eea:	4922      	ldr	r1, [pc, #136]	; (8003f74 <FLASH_OB_DisableWRP+0x13c>)
 8003eec:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <FLASH_OB_DisableWRP+0x13c>)
 8003eee:	895b      	ldrh	r3, [r3, #10]
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	8a7b      	ldrh	r3, [r7, #18]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003efa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003efe:	f7ff fc9f 	bl	8003840 <FLASH_WaitForLastOperation>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d110      	bne.n	8003f2e <FLASH_OB_DisableWRP+0xf6>
 8003f0c:	8a3b      	ldrh	r3, [r7, #16]
 8003f0e:	2bff      	cmp	r3, #255	; 0xff
 8003f10:	d00d      	beq.n	8003f2e <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8003f12:	4918      	ldr	r1, [pc, #96]	; (8003f74 <FLASH_OB_DisableWRP+0x13c>)
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <FLASH_OB_DisableWRP+0x13c>)
 8003f16:	899b      	ldrh	r3, [r3, #12]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	8a3b      	ldrh	r3, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f26:	f7ff fc8b 	bl	8003840 <FLASH_WaitForLastOperation>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <FLASH_OB_DisableWRP+0x11e>
 8003f34:	89fb      	ldrh	r3, [r7, #14]
 8003f36:	2bff      	cmp	r3, #255	; 0xff
 8003f38:	d00d      	beq.n	8003f56 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 8003f3a:	490e      	ldr	r1, [pc, #56]	; (8003f74 <FLASH_OB_DisableWRP+0x13c>)
 8003f3c:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <FLASH_OB_DisableWRP+0x13c>)
 8003f3e:	89db      	ldrh	r3, [r3, #14]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	89fb      	ldrh	r3, [r7, #14]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f4e:	f7ff fc77 	bl	8003840 <FLASH_WaitForLastOperation>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003f56:	4a06      	ldr	r2, [pc, #24]	; (8003f70 <FLASH_OB_DisableWRP+0x138>)
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <FLASH_OB_DisableWRP+0x138>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f023 0310 	bic.w	r3, r3, #16
 8003f60:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000420 	.word	0x20000420
 8003f70:	40022000 	.word	0x40022000
 8003f74:	1ffff800 	.word	0x1ffff800

08003f78 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f8a:	f7ff fc59 	bl	8003840 <FLASH_WaitForLastOperation>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d133      	bne.n	8004000 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <FLASH_OB_RDP_LevelConfig+0x94>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8003f9e:	4a1c      	ldr	r2, [pc, #112]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f043 0320 	orr.w	r3, r3, #32
 8003fa8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003faa:	4a19      	ldr	r2, [pc, #100]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb4:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fba:	f7ff fc41 	bl	8003840 <FLASH_WaitForLastOperation>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8003fc2:	4a13      	ldr	r2, [pc, #76]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f023 0320 	bic.w	r3, r3, #32
 8003fcc:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d115      	bne.n	8004000 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003fd4:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f043 0310 	orr.w	r3, r3, #16
 8003fde:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8003fe2:	79fa      	ldrb	r2, [r7, #7]
 8003fe4:	b292      	uxth	r2, r2
 8003fe6:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8003fe8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fec:	f7ff fc28 	bl	8003840 <FLASH_WaitForLastOperation>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003ff4:	4a06      	ldr	r2, [pc, #24]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <FLASH_OB_RDP_LevelConfig+0x98>)
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000420 	.word	0x20000420
 8004010:	40022000 	.word	0x40022000
 8004014:	1ffff800 	.word	0x1ffff800

08004018 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004026:	f24c 3050 	movw	r0, #50000	; 0xc350
 800402a:	f7ff fc09 	bl	8003840 <FLASH_WaitForLastOperation>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d11b      	bne.n	8004070 <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <FLASH_OB_UserConfig+0x64>)
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800403e:	4a10      	ldr	r2, [pc, #64]	; (8004080 <FLASH_OB_UserConfig+0x68>)
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <FLASH_OB_UserConfig+0x68>)
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f043 0310 	orr.w	r3, r3, #16
 8004048:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 800404a:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <FLASH_OB_UserConfig+0x6c>)
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	f063 0377 	orn	r3, r3, #119	; 0x77
 8004052:	b2db      	uxtb	r3, r3
 8004054:	b29b      	uxth	r3, r3
 8004056:	8053      	strh	r3, [r2, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004058:	f24c 3050 	movw	r0, #50000	; 0xc350
 800405c:	f7ff fbf0 	bl	8003840 <FLASH_WaitForLastOperation>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <FLASH_OB_UserConfig+0x68>)
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <FLASH_OB_UserConfig+0x68>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f023 0310 	bic.w	r3, r3, #16
 800406e:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000420 	.word	0x20000420
 8004080:	40022000 	.word	0x40022000
 8004084:	1ffff800 	.word	0x1ffff800

08004088 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800409c:	f7ff fbd0 	bl	8003840 <FLASH_WaitForLastOperation>
 80040a0:	4603      	mov	r3, r0
 80040a2:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d118      	bne.n	80040dc <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <FLASH_OB_ProgramData+0x60>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80040b0:	4a0e      	ldr	r2, [pc, #56]	; (80040ec <FLASH_OB_ProgramData+0x64>)
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <FLASH_OB_ProgramData+0x64>)
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f043 0310 	orr.w	r3, r3, #16
 80040ba:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	b292      	uxth	r2, r2
 80040c2:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040c8:	f7ff fbba 	bl	8003840 <FLASH_WaitForLastOperation>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80040d0:	4a06      	ldr	r2, [pc, #24]	; (80040ec <FLASH_OB_ProgramData+0x64>)
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <FLASH_OB_ProgramData+0x64>)
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f023 0310 	bic.w	r3, r3, #16
 80040da:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000420 	.word	0x20000420
 80040ec:	40022000 	.word	0x40022000

080040f0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 80040f4:	4b02      	ldr	r3, [pc, #8]	; (8004100 <FLASH_OB_GetWRP+0x10>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40022000 	.word	0x40022000

08004104 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 800410a:	23a5      	movs	r3, #165	; 0xa5
 800410c:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <FLASH_OB_GetRDP+0x34>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d102      	bne.n	8004128 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	e001      	b.n	800412c <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8004128:	23a5      	movs	r3, #165	; 0xa5
 800412a:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 800412c:	687b      	ldr	r3, [r7, #4]
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	40022000 	.word	0x40022000

0800413c <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <FLASH_OB_GetUser+0x1c>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	b2db      	uxtb	r3, r3
}
 800414e:	4618      	mov	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40022000 	.word	0x40022000

0800415c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <FLASH_PageErase+0x38>)
 8004166:	2200      	movs	r2, #0
 8004168:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800416a:	4a0b      	ldr	r2, [pc, #44]	; (8004198 <FLASH_PageErase+0x3c>)
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <FLASH_PageErase+0x3c>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <FLASH_PageErase+0x3c>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800417c:	4a06      	ldr	r2, [pc, #24]	; (8004198 <FLASH_PageErase+0x3c>)
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <FLASH_PageErase+0x3c>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004186:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000420 	.word	0x20000420
 8004198:	40022000 	.word	0x40022000

0800419c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800419c:	b480      	push	{r7}
 800419e:	b08b      	sub	sp, #44	; 0x2c
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
 80041be:	e127      	b.n	8004410 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80041c0:	2201      	movs	r2, #1
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f040 8116 	bne.w	800440a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b12      	cmp	r3, #18
 80041e4:	d034      	beq.n	8004250 <HAL_GPIO_Init+0xb4>
 80041e6:	2b12      	cmp	r3, #18
 80041e8:	d80d      	bhi.n	8004206 <HAL_GPIO_Init+0x6a>
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d02b      	beq.n	8004246 <HAL_GPIO_Init+0xaa>
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d804      	bhi.n	80041fc <HAL_GPIO_Init+0x60>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d031      	beq.n	800425a <HAL_GPIO_Init+0xbe>
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d01c      	beq.n	8004234 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041fa:	e048      	b.n	800428e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d043      	beq.n	8004288 <HAL_GPIO_Init+0xec>
 8004200:	2b11      	cmp	r3, #17
 8004202:	d01b      	beq.n	800423c <HAL_GPIO_Init+0xa0>
          break;
 8004204:	e043      	b.n	800428e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8004206:	4a87      	ldr	r2, [pc, #540]	; (8004424 <HAL_GPIO_Init+0x288>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d026      	beq.n	800425a <HAL_GPIO_Init+0xbe>
 800420c:	4a85      	ldr	r2, [pc, #532]	; (8004424 <HAL_GPIO_Init+0x288>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d806      	bhi.n	8004220 <HAL_GPIO_Init+0x84>
 8004212:	4a85      	ldr	r2, [pc, #532]	; (8004428 <HAL_GPIO_Init+0x28c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d020      	beq.n	800425a <HAL_GPIO_Init+0xbe>
 8004218:	4a84      	ldr	r2, [pc, #528]	; (800442c <HAL_GPIO_Init+0x290>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01d      	beq.n	800425a <HAL_GPIO_Init+0xbe>
          break;
 800421e:	e036      	b.n	800428e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8004220:	4a83      	ldr	r2, [pc, #524]	; (8004430 <HAL_GPIO_Init+0x294>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d019      	beq.n	800425a <HAL_GPIO_Init+0xbe>
 8004226:	4a83      	ldr	r2, [pc, #524]	; (8004434 <HAL_GPIO_Init+0x298>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d016      	beq.n	800425a <HAL_GPIO_Init+0xbe>
 800422c:	4a82      	ldr	r2, [pc, #520]	; (8004438 <HAL_GPIO_Init+0x29c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_GPIO_Init+0xbe>
          break;
 8004232:	e02c      	b.n	800428e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	623b      	str	r3, [r7, #32]
          break;
 800423a:	e028      	b.n	800428e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	3304      	adds	r3, #4
 8004242:	623b      	str	r3, [r7, #32]
          break;
 8004244:	e023      	b.n	800428e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	3308      	adds	r3, #8
 800424c:	623b      	str	r3, [r7, #32]
          break;
 800424e:	e01e      	b.n	800428e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	330c      	adds	r3, #12
 8004256:	623b      	str	r3, [r7, #32]
          break;
 8004258:	e019      	b.n	800428e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004262:	2304      	movs	r3, #4
 8004264:	623b      	str	r3, [r7, #32]
          break;
 8004266:	e012      	b.n	800428e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d105      	bne.n	800427c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004270:	2308      	movs	r3, #8
 8004272:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	611a      	str	r2, [r3, #16]
          break;
 800427a:	e008      	b.n	800428e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800427c:	2308      	movs	r3, #8
 800427e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	615a      	str	r2, [r3, #20]
          break;
 8004286:	e002      	b.n	800428e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004288:	2300      	movs	r3, #0
 800428a:	623b      	str	r3, [r7, #32]
          break;
 800428c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2bff      	cmp	r3, #255	; 0xff
 8004292:	d801      	bhi.n	8004298 <HAL_GPIO_Init+0xfc>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	e001      	b.n	800429c <HAL_GPIO_Init+0x100>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2bff      	cmp	r3, #255	; 0xff
 80042a2:	d802      	bhi.n	80042aa <HAL_GPIO_Init+0x10e>
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	e002      	b.n	80042b0 <HAL_GPIO_Init+0x114>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	3b08      	subs	r3, #8
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	210f      	movs	r1, #15
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	401a      	ands	r2, r3
 80042c2:	6a39      	ldr	r1, [r7, #32]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8096 	beq.w	800440a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042de:	4a57      	ldr	r2, [pc, #348]	; (800443c <HAL_GPIO_Init+0x2a0>)
 80042e0:	4b56      	ldr	r3, [pc, #344]	; (800443c <HAL_GPIO_Init+0x2a0>)
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6193      	str	r3, [r2, #24]
 80042ea:	4b54      	ldr	r3, [pc, #336]	; (800443c <HAL_GPIO_Init+0x2a0>)
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80042f6:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_GPIO_Init+0x2a4>)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3302      	adds	r3, #2
 80042fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004302:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4013      	ands	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a49      	ldr	r2, [pc, #292]	; (8004444 <HAL_GPIO_Init+0x2a8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_GPIO_Init+0x1ae>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a48      	ldr	r2, [pc, #288]	; (8004448 <HAL_GPIO_Init+0x2ac>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00d      	beq.n	8004346 <HAL_GPIO_Init+0x1aa>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a47      	ldr	r2, [pc, #284]	; (800444c <HAL_GPIO_Init+0x2b0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <HAL_GPIO_Init+0x1a6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a46      	ldr	r2, [pc, #280]	; (8004450 <HAL_GPIO_Init+0x2b4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_GPIO_Init+0x1a2>
 800433a:	2303      	movs	r3, #3
 800433c:	e006      	b.n	800434c <HAL_GPIO_Init+0x1b0>
 800433e:	2304      	movs	r3, #4
 8004340:	e004      	b.n	800434c <HAL_GPIO_Init+0x1b0>
 8004342:	2302      	movs	r3, #2
 8004344:	e002      	b.n	800434c <HAL_GPIO_Init+0x1b0>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_GPIO_Init+0x1b0>
 800434a:	2300      	movs	r3, #0
 800434c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434e:	f002 0203 	and.w	r2, r2, #3
 8004352:	0092      	lsls	r2, r2, #2
 8004354:	4093      	lsls	r3, r2
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800435c:	4938      	ldr	r1, [pc, #224]	; (8004440 <HAL_GPIO_Init+0x2a4>)
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	089b      	lsrs	r3, r3, #2
 8004362:	3302      	adds	r3, #2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004376:	4937      	ldr	r1, [pc, #220]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 8004378:	4b36      	ldr	r3, [pc, #216]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
 8004382:	e006      	b.n	8004392 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004384:	4933      	ldr	r1, [pc, #204]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 8004386:	4b33      	ldr	r3, [pc, #204]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	43db      	mvns	r3, r3
 800438e:	4013      	ands	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800439e:	492d      	ldr	r1, [pc, #180]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043a0:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
 80043aa:	e006      	b.n	80043ba <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043ac:	4929      	ldr	r1, [pc, #164]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043ae:	4b29      	ldr	r3, [pc, #164]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	4013      	ands	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d006      	beq.n	80043d4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043c6:	4923      	ldr	r1, [pc, #140]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
 80043d2:	e006      	b.n	80043e2 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043d4:	491f      	ldr	r1, [pc, #124]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	43db      	mvns	r3, r3
 80043de:	4013      	ands	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d006      	beq.n	80043fc <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043ee:	4919      	ldr	r1, [pc, #100]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043f0:	4b18      	ldr	r3, [pc, #96]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60cb      	str	r3, [r1, #12]
 80043fa:	e006      	b.n	800440a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043fc:	4915      	ldr	r1, [pc, #84]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_GPIO_Init+0x2b8>)
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	43db      	mvns	r3, r3
 8004406:	4013      	ands	r3, r2
 8004408:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	3301      	adds	r3, #1
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	2b0f      	cmp	r3, #15
 8004414:	f67f aed4 	bls.w	80041c0 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8004418:	bf00      	nop
 800441a:	372c      	adds	r7, #44	; 0x2c
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	10210000 	.word	0x10210000
 8004428:	10110000 	.word	0x10110000
 800442c:	10120000 	.word	0x10120000
 8004430:	10310000 	.word	0x10310000
 8004434:	10320000 	.word	0x10320000
 8004438:	10220000 	.word	0x10220000
 800443c:	40021000 	.word	0x40021000
 8004440:	40010000 	.word	0x40010000
 8004444:	40010800 	.word	0x40010800
 8004448:	40010c00 	.word	0x40010c00
 800444c:	40011000 	.word	0x40011000
 8004450:	40011400 	.word	0x40011400
 8004454:	40010400 	.word	0x40010400

08004458 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004472:	e09a      	b.n	80045aa <HAL_GPIO_DeInit+0x152>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8004474:	2201      	movs	r2, #1
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	409a      	lsls	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 808e 	beq.w	80045a4 <HAL_GPIO_DeInit+0x14c>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2bff      	cmp	r3, #255	; 0xff
 800448c:	d801      	bhi.n	8004492 <HAL_GPIO_DeInit+0x3a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	e001      	b.n	8004496 <HAL_GPIO_DeInit+0x3e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2bff      	cmp	r3, #255	; 0xff
 800449c:	d802      	bhi.n	80044a4 <HAL_GPIO_DeInit+0x4c>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	e002      	b.n	80044aa <HAL_GPIO_DeInit+0x52>
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	3b08      	subs	r3, #8
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	613b      	str	r3, [r7, #16]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	210f      	movs	r1, #15
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	2104      	movs	r1, #4
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	401a      	ands	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 80044d8:	4a3a      	ldr	r2, [pc, #232]	; (80045c4 <HAL_GPIO_DeInit+0x16c>)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	3302      	adds	r3, #2
 80044e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e4:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	220f      	movs	r2, #15
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4013      	ands	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a32      	ldr	r2, [pc, #200]	; (80045c8 <HAL_GPIO_DeInit+0x170>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_GPIO_DeInit+0xd2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a31      	ldr	r2, [pc, #196]	; (80045cc <HAL_GPIO_DeInit+0x174>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00d      	beq.n	8004526 <HAL_GPIO_DeInit+0xce>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a30      	ldr	r2, [pc, #192]	; (80045d0 <HAL_GPIO_DeInit+0x178>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <HAL_GPIO_DeInit+0xca>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2f      	ldr	r2, [pc, #188]	; (80045d4 <HAL_GPIO_DeInit+0x17c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d101      	bne.n	800451e <HAL_GPIO_DeInit+0xc6>
 800451a:	2303      	movs	r3, #3
 800451c:	e006      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 800451e:	2304      	movs	r3, #4
 8004520:	e004      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 8004522:	2302      	movs	r3, #2
 8004524:	e002      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_GPIO_DeInit+0xd4>
 800452a:	2300      	movs	r3, #0
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	f002 0203 	and.w	r2, r2, #3
 8004532:	0092      	lsls	r2, r2, #2
 8004534:	fa03 f202 	lsl.w	r2, r3, r2
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	429a      	cmp	r2, r3
 800453c:	d132      	bne.n	80045a4 <HAL_GPIO_DeInit+0x14c>
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	220f      	movs	r2, #15
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 800454e:	481d      	ldr	r0, [pc, #116]	; (80045c4 <HAL_GPIO_DeInit+0x16c>)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	491b      	ldr	r1, [pc, #108]	; (80045c4 <HAL_GPIO_DeInit+0x16c>)
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	0892      	lsrs	r2, r2, #2
 800455a:	3202      	adds	r2, #2
 800455c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	43d2      	mvns	r2, r2
 8004564:	400a      	ands	r2, r1
 8004566:	3302      	adds	r3, #2
 8004568:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800456c:	491a      	ldr	r1, [pc, #104]	; (80045d8 <HAL_GPIO_DeInit+0x180>)
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_GPIO_DeInit+0x180>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	43db      	mvns	r3, r3
 8004576:	4013      	ands	r3, r2
 8004578:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800457a:	4917      	ldr	r1, [pc, #92]	; (80045d8 <HAL_GPIO_DeInit+0x180>)
 800457c:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HAL_GPIO_DeInit+0x180>)
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	43db      	mvns	r3, r3
 8004584:	4013      	ands	r3, r2
 8004586:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004588:	4913      	ldr	r1, [pc, #76]	; (80045d8 <HAL_GPIO_DeInit+0x180>)
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <HAL_GPIO_DeInit+0x180>)
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	43db      	mvns	r3, r3
 8004592:	4013      	ands	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004596:	4910      	ldr	r1, [pc, #64]	; (80045d8 <HAL_GPIO_DeInit+0x180>)
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_GPIO_DeInit+0x180>)
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	43db      	mvns	r3, r3
 80045a0:	4013      	ands	r3, r2
 80045a2:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	fa22 f303 	lsr.w	r3, r2, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f47f af5e 	bne.w	8004474 <HAL_GPIO_DeInit+0x1c>
  }
}
 80045b8:	bf00      	nop
 80045ba:	3724      	adds	r7, #36	; 0x24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40010800 	.word	0x40010800
 80045cc:	40010c00 	.word	0x40010c00
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40011400 	.word	0x40011400
 80045d8:	40010400 	.word	0x40010400

080045dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
 80045f8:	e001      	b.n	80045fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	807b      	strh	r3, [r7, #2]
 8004616:	4613      	mov	r3, r2
 8004618:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800461a:	787b      	ldrb	r3, [r7, #1]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004620:	887a      	ldrh	r2, [r7, #2]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004626:	e003      	b.n	8004630 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	041a      	lsls	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	611a      	str	r2, [r3, #16]
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	887b      	ldrh	r3, [r7, #2]
 800464c:	405a      	eors	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60da      	str	r2, [r3, #12]
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8004668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800466c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	619a      	str	r2, [r3, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800467c:	887a      	ldrh	r2, [r7, #2]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	619a      	str	r2, [r3, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	60fb      	str	r3, [r7, #12]

  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046c0:	4a05      	ldr	r2, [pc, #20]	; (80046d8 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f807 	bl	80046dc <HAL_GPIO_EXTI_Callback>
  }
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40010400 	.word	0x40010400

080046dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 80046fa:	4807      	ldr	r0, [pc, #28]	; (8004718 <HAL_GPIOEx_ConfigEventout+0x28>)
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_GPIOEx_ConfigEventout+0x28>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	430b      	orrs	r3, r1
 800470a:	4313      	orrs	r3, r2
 800470c:	6003      	str	r3, [r0, #0]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	40010000 	.word	0x40010000

0800471c <HAL_GPIOEx_EnableEventout>:
/**
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <HAL_GPIOEx_EnableEventout+0x18>)
 8004722:	4b04      	ldr	r3, [pc, #16]	; (8004734 <HAL_GPIOEx_EnableEventout+0x18>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	6013      	str	r3, [r2, #0]
}
 800472c:	bf00      	nop
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40010000 	.word	0x40010000

08004738 <HAL_GPIOEx_DisableEventout>:
/**
  * @brief  Disables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_DisableEventout(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <HAL_GPIOEx_DisableEventout+0x18>)
 800473e:	4b04      	ldr	r3, [pc, #16]	; (8004750 <HAL_GPIOEx_DisableEventout+0x18>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004746:	6013      	str	r3, [r2, #0]
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	40010000 	.word	0x40010000

08004754 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004756:	b08b      	sub	sp, #44	; 0x2c
 8004758:	af06      	add	r7, sp, #24
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0ca      	b.n	8004900 <HAL_PCD_Init+0x1ac>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_PCD_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f005 fb04 	bl	8009d8c <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f002 f9b7 	bl	8006b04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	687e      	ldr	r6, [r7, #4]
 800479e:	466d      	mov	r5, sp
 80047a0:	f106 0410 	add.w	r4, r6, #16
 80047a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	602b      	str	r3, [r5, #0]
 80047ac:	1d33      	adds	r3, r6, #4
 80047ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047b0:	6838      	ldr	r0, [r7, #0]
 80047b2:	f002 f97d 	bl	8006ab0 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f002 f9bd 	bl	8006b3c <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e037      	b.n	8004838 <HAL_PCD_Init+0xe4>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	015b      	lsls	r3, r3, #5
 80047ce:	4413      	add	r3, r2
 80047d0:	3329      	adds	r3, #41	; 0x29
 80047d2:	2201      	movs	r2, #1
 80047d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	b2d9      	uxtb	r1, r3
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	015b      	lsls	r3, r3, #5
 80047e0:	4413      	add	r3, r2
 80047e2:	3328      	adds	r3, #40	; 0x28
 80047e4:	460a      	mov	r2, r1
 80047e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	b299      	uxth	r1, r3
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	015b      	lsls	r3, r3, #5
 80047f2:	4413      	add	r3, r2
 80047f4:	3334      	adds	r3, #52	; 0x34
 80047f6:	460a      	mov	r2, r1
 80047f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	015b      	lsls	r3, r3, #5
 8004800:	4413      	add	r3, r2
 8004802:	332b      	adds	r3, #43	; 0x2b
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0U;
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	015b      	lsls	r3, r3, #5
 800480e:	4413      	add	r3, r2
 8004810:	3338      	adds	r3, #56	; 0x38
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0U;
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	015b      	lsls	r3, r3, #5
 800481c:	4413      	add	r3, r2
 800481e:	333c      	adds	r3, #60	; 0x3c
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0U;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3302      	adds	r3, #2
 800482a:	015b      	lsls	r3, r3, #5
 800482c:	4413      	add	r3, r2
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3301      	adds	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b0e      	cmp	r3, #14
 800483c:	d9c4      	bls.n	80047c8 <HAL_PCD_Init+0x74>
  }
 
  for (index = 0U; index < 15U ; index++)
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e03c      	b.n	80048be <HAL_PCD_Init+0x16a>
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	015b      	lsls	r3, r3, #5
 800484a:	4413      	add	r3, r2
 800484c:	f203 2329 	addw	r3, r3, #553	; 0x229
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	b2d9      	uxtb	r1, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	015b      	lsls	r3, r3, #5
 800485e:	4413      	add	r3, r2
 8004860:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004864:	460a      	mov	r2, r1
 8004866:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	b299      	uxth	r1, r3
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	015b      	lsls	r3, r3, #5
 8004872:	4413      	add	r3, r2
 8004874:	3334      	adds	r3, #52	; 0x34
 8004876:	460a      	mov	r2, r1
 8004878:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	015b      	lsls	r3, r3, #5
 8004880:	4413      	add	r3, r2
 8004882:	f203 232b 	addw	r3, r3, #555	; 0x22b
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0U;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	015b      	lsls	r3, r3, #5
 8004890:	4413      	add	r3, r2
 8004892:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	015b      	lsls	r3, r3, #5
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0U;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3312      	adds	r3, #18
 80048b0:	015b      	lsls	r3, r3, #5
 80048b2:	4413      	add	r3, r2
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < 15U ; index++)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b0e      	cmp	r3, #14
 80048c2:	d9bf      	bls.n	8004844 <HAL_PCD_Init+0xf0>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	687e      	ldr	r6, [r7, #4]
 80048cc:	466d      	mov	r5, sp
 80048ce:	f106 0410 	add.w	r4, r6, #16
 80048d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	602b      	str	r3, [r5, #0]
 80048da:	1d33      	adds	r3, r6, #4
 80048dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048de:	6838      	ldr	r0, [r7, #0]
 80048e0:	f002 f938 	bl	8006b54 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  USB_DevDisconnect (hpcd->Instance);  
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f003 f96c 	bl	8007bd6 <USB_DevDisconnect>
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004908 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral 
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e00e      	b.n	8004938 <HAL_PCD_DeInit+0x30>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2203      	movs	r2, #3
 800491e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  /* Stop Device */
  HAL_PCD_Stop(hpcd);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f844 	bl	80049b0 <HAL_PCD_Stop>
  
  /* DeInit the low level hardware */
  HAL_PCD_MspDeInit(hpcd);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f005 fa55 	bl	8009dd8 <HAL_PCD_MspDeInit>
  
  hpcd->State = HAL_PCD_STATE_RESET; 
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
  
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr
  * @brief  DeInitializes PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspDeInit could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	bc80      	pop	{r7}
 8004962:	4770      	bx	lr

08004964 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_PCD_Start+0x16>
 8004976:	2302      	movs	r3, #2
 8004978:	e016      	b.n	80049a8 <HAL_PCD_Start+0x44>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8004982:	2101      	movs	r1, #1
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f005 fe2c 	bl	800a5e2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f003 f917 	bl	8007bc2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f002 f899 	bl	8006ad0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_PCD_Stop>:
  * @brief  Stop The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_PCD_Stop+0x16>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e017      	b.n	80049f6 <HAL_PCD_Stop+0x46>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  __HAL_PCD_DISABLE(hpcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f002 f896 	bl	8006b04 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f003 f8c7 	bl	8007b70 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f003 f8f5 	bl	8007bd6 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{ 
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f003 f8ed 	bl	8007bea <USB_ReadInterrupts>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1a:	d102      	bne.n	8004a22 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fbdb 	bl	80051d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f003 f8df 	bl	8007bea <USB_ReadInterrupts>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a36:	d112      	bne.n	8004a5e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004a44:	b292      	uxth	r2, r2
 8004a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f005 fa2a 	bl	8009eaa <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8004a56:	2100      	movs	r1, #0
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f97f 	bl	8004d5c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f003 f8c1 	bl	8007bea <USB_ReadInterrupts>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a72:	d10b      	bne.n	8004a8c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004a80:	b292      	uxth	r2, r2
 8004a82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a86:	b292      	uxth	r2, r2
 8004a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f003 f8aa 	bl	8007bea <USB_ReadInterrupts>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa0:	d10b      	bne.n	8004aba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004aae:	b292      	uxth	r2, r2
 8004ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab4:	b292      	uxth	r2, r2
 8004ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f003 f893 	bl	8007bea <USB_ReadInterrupts>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ace:	d126      	bne.n	8004b1e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004adc:	b292      	uxth	r2, r2
 8004ade:	f022 0204 	bic.w	r2, r2, #4
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004af4:	b292      	uxth	r2, r2
 8004af6:	f022 0208 	bic.w	r2, r2, #8
 8004afa:	b292      	uxth	r2, r2
 8004afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f005 fa0f 	bl	8009f24 <HAL_PCD_ResumeCallback>

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004b12:	b292      	uxth	r2, r2
 8004b14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b18:	b292      	uxth	r2, r2
 8004b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f003 f861 	bl	8007bea <USB_ReadInterrupts>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b32:	d131      	bne.n	8004b98 <HAL_PCD_IRQHandler+0x19a>
  { 
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004b40:	b292      	uxth	r2, r2
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	b292      	uxth	r2, r2
 8004b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5e:	b292      	uxth	r2, r2
 8004b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8004b70:	b292      	uxth	r2, r2
 8004b72:	f042 0204 	orr.w	r2, r2, #4
 8004b76:	b292      	uxth	r2, r2
 8004b78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f003 f832 	bl	8007bea <USB_ReadInterrupts>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b90:	d002      	beq.n	8004b98 <HAL_PCD_IRQHandler+0x19a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f005 f9ab 	bl	8009eee <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f003 f824 	bl	8007bea <USB_ReadInterrupts>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bac:	d10e      	bne.n	8004bcc <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f005 f961 	bl	8009e8e <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 f80a 	bl	8007bea <USB_ReadInterrupts>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be0:	d10b      	bne.n	8004bfa <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8004bee:	b292      	uxth	r2, r2
 8004bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf4:	b292      	uxth	r2, r2
 8004bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
  * @brief  USB Start Of Frame callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
  * @brief  USB Reset callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
  * @brief  Suspend event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr
  * @brief  Resume event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
  * @brief  Connection event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
  * @brief  Disconnection event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_PCD_DevConnect+0x16>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e011      	b.n	8004d12 <HAL_PCD_DevConnect+0x3a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f005 fc72 	bl	800a5e2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect(hpcd->Instance);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f002 ff5d 	bl	8007bc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_PCD_DevDisconnect+0x16>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e011      	b.n	8004d54 <HAL_PCD_DevDisconnect+0x3a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 0U);
 8004d38:	2100      	movs	r1, #0
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f005 fc51 	bl	800a5e2 <HAL_PCDEx_SetConnectionState>
  USB_DevDisconnect(hpcd->Instance);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f002 ff46 	bl	8007bd6 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_PCD_SetAddress+0x1a>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e013      	b.n	8004d9e <HAL_PCD_SetAddress+0x42>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  hpcd->USB_Address = address;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f002 ff04 	bl	8007b9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	4608      	mov	r0, r1
 8004db0:	4611      	mov	r1, r2
 8004db2:	461a      	mov	r2, r3
 8004db4:	4603      	mov	r3, r0
 8004db6:	70fb      	strb	r3, [r7, #3]
 8004db8:	460b      	mov	r3, r1
 8004dba:	803b      	strh	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8004dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da08      	bge.n	8004de2 <HAL_PCD_EP_Open+0x3c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd6:	015b      	lsls	r3, r3, #5
 8004dd8:	3328      	adds	r3, #40	; 0x28
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e008      	b.n	8004df4 <HAL_PCD_EP_Open+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de8:	015b      	lsls	r3, r3, #5
 8004dea:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8004e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	09db      	lsrs	r3, r3, #7
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8004e10:	883a      	ldrh	r2, [r7, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	78ba      	ldrb	r2, [r7, #2]
 8004e1a:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_PCD_EP_Open+0x84>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e00e      	b.n	8004e48 <HAL_PCD_EP_Open+0xa2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 fec4 	bl	8006bc6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return ret;
 8004e46:	7afb      	ldrb	r3, [r7, #11]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80U) == 0x80U)
 8004e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	da08      	bge.n	8004e7a <HAL_PCD_EP_Close+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6e:	015b      	lsls	r3, r3, #5
 8004e70:	3328      	adds	r3, #40	; 0x28
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e008      	b.n	8004e8c <HAL_PCD_EP_Close+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e80:	015b      	lsls	r3, r3, #5
 8004e82:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8004e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	09db      	lsrs	r3, r3, #7
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_PCD_EP_Close+0x66>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e00e      	b.n	8004ed4 <HAL_PCD_EP_Close+0x84>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f002 f941 	bl	800714c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8004ef0:	7afb      	ldrb	r3, [r7, #11]
 8004ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef6:	015b      	lsls	r3, r3, #5
 8004ef8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2200      	movs	r2, #0
 8004f18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <HAL_PCD_EP_Receive+0x62>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6979      	ldr	r1, [r7, #20]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 fa90 	bl	800745c <USB_EPStartXfer>
 8004f3c:	e005      	b.n	8004f4a <HAL_PCD_EP_Receive+0x6e>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6979      	ldr	r1, [r7, #20]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f002 fa89 	bl	800745c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	3312      	adds	r3, #18
 8004f6a:	015b      	lsls	r3, r3, #5
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3304      	adds	r3, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b086      	sub	sp, #24
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8004f92:	7afb      	ldrb	r3, [r7, #11]
 8004f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f98:	015b      	lsls	r3, r3, #5
 8004f9a:	3328      	adds	r3, #40	; 0x28
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8004fba:	7afb      	ldrb	r3, [r7, #11]
 8004fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & 0x7FU) == 0U)
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
 8004fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <HAL_PCD_EP_Transmit+0x60>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6979      	ldr	r1, [r7, #20]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f002 fa40 	bl	800745c <USB_EPStartXfer>
 8004fdc:	e005      	b.n	8004fea <HAL_PCD_EP_Transmit+0x6c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6979      	ldr	r1, [r7, #20]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f002 fa39 	bl	800745c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 8005004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	da08      	bge.n	800501e <HAL_PCD_EP_SetStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005012:	015b      	lsls	r3, r3, #5
 8005014:	3328      	adds	r3, #40	; 0x28
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e006      	b.n	800502c <HAL_PCD_EP_SetStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	015b      	lsls	r3, r3, #5
 8005022:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4413      	add	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005038:	b2da      	uxtb	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 800503e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	09db      	lsrs	r3, r3, #7
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_PCD_EP_SetStall+0x68>
 8005058:	2302      	movs	r3, #2
 800505a:	e01c      	b.n	8005096 <HAL_PCD_EP_SetStall+0xa2>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68f9      	ldr	r1, [r7, #12]
 800506a:	4618      	mov	r0, r3
 800506c:	f002 fc96 	bl	800799c <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005076:	2b00      	cmp	r3, #0
 8005078:	d108      	bne.n	800508c <HAL_PCD_EP_SetStall+0x98>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f002 fdf6 	bl	8007c78 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
  
  if ((0x80U & ep_addr) == 0x80U)
 80050ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da08      	bge.n	80050c8 <HAL_PCD_EP_ClrStall+0x2a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050bc:	015b      	lsls	r3, r3, #5
 80050be:	3328      	adds	r3, #40	; 0x28
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e006      	b.n	80050d6 <HAL_PCD_EP_ClrStall+0x38>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	015b      	lsls	r3, r3, #5
 80050cc:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80050e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	09db      	lsrs	r3, r3, #7
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_PCD_EP_ClrStall+0x68>
 8005102:	2302      	movs	r3, #2
 8005104:	e00e      	b.n	8005124 <HAL_PCD_EP_ClrStall+0x86>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68f9      	ldr	r1, [r7, #12]
 8005114:	4618      	mov	r0, r3
 8005116:	f002 fca1 	bl	8007a5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_PCD_EP_Flush>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_PCD_EP_Flush+0x1a>
 8005142:	2302      	movs	r3, #2
 8005144:	e01b      	b.n	800517e <HAL_PCD_EP_Flush+0x52>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  if ((ep_addr & 0x80U) == 0x80U)
 800514e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005152:	2b00      	cmp	r3, #0
 8005154:	da09      	bge.n	800516a <HAL_PCD_EP_Flush+0x3e>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7FU);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f001 fd1a 	bl	8006b9c <USB_FlushTxFifo>
 8005168:	e004      	b.n	8005174 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f001 fd1f 	bl	8006bb2 <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
  
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  HAL_PCD_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  return(USB_ActivateRemoteWakeup(hpcd->Instance));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f002 fd7b 	bl	8007c8e <USB_ActivateRemoteWakeup>
 8005198:	4603      	mov	r3, r0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  HAL_PCD_DeActivateRemoteWakeup : de-active remote wakeup signalling
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  return(USB_DeActivateRemoteWakeup(hpcd->Instance));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f002 fd81 	bl	8007cb6 <USB_DeActivateRemoteWakeup>
 80051b4:	4603      	mov	r3, r0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_PCD_GetState>:
  * @brief  Return the PCD state
  * @param  hpcd: PCD handle
  * @retval HAL state
  */
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  return hpcd->State;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 80051cc:	b2db      	uxtb	r3, r3
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80051d8:	b590      	push	{r4, r7, lr}
 80051da:	b089      	sub	sp, #36	; 0x24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
  uint16_t count = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	83fb      	strh	r3, [r7, #30]
  uint8_t epindex = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	75fb      	strb	r3, [r7, #23]
  __IO uint16_t wIstr = 0;  
 80051ec:	2300      	movs	r3, #0
 80051ee:	81fb      	strh	r3, [r7, #14]
  __IO uint16_t wEPVal = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80051f4:	e308      	b.n	8005808 <PCD_EP_ISR_Handler+0x630>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80051f6:	89fb      	ldrh	r3, [r7, #14]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	75fb      	strb	r3, [r7, #23]
    
    if (epindex == 0)
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 812a 	bne.w	800545e <PCD_EP_ISR_Handler+0x286>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800520a:	89fb      	ldrh	r3, [r7, #14]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b00      	cmp	r3, #0
 8005214:	d14d      	bne.n	80052b2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3328      	adds	r3, #40	; 0x28
 8005232:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	3302      	adds	r3, #2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	441a      	add	r2, r3
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005270:	2100      	movs	r1, #0
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f004 fdf4 	bl	8009e60 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 82c1 	beq.w	8005808 <PCD_EP_ISR_Handler+0x630>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f040 82bc 	bne.w	8005808 <PCD_EP_ISR_Handler+0x630>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	b292      	uxth	r2, r2
 80052a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052b0:	e2aa      	b.n	8005808 <PCD_EP_ISR_Handler+0x630>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80052b8:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80052c4:	89bb      	ldrh	r3, [r7, #12]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d031      	beq.n	8005334 <PCD_EP_ISR_Handler+0x15c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4413      	add	r3, r2
 80052e4:	3306      	adds	r3, #6
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f203 412c 	addw	r1, r3, #1068	; 0x42c
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	889a      	ldrh	r2, [r3, #4]
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f002 fd2a 	bl	8007d6a <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b299      	uxth	r1, r3
 8005322:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005326:	400b      	ands	r3, r1
 8005328:	b29b      	uxth	r3, r3
 800532a:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f004 fd6d 	bl	8009e0c <HAL_PCD_SetupStageCallback>
 8005332:	e269      	b.n	8005808 <PCD_EP_ISR_Handler+0x630>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005334:	89bb      	ldrh	r3, [r7, #12]
 8005336:	b29b      	uxth	r3, r3
 8005338:	b21b      	sxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	f280 8264 	bge.w	8005808 <PCD_EP_ISR_Handler+0x630>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b299      	uxth	r1, r3
 800534c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005350:	400b      	ands	r3, r1
 8005352:	b29b      	uxth	r3, r3
 8005354:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	3306      	adds	r3, #6
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0U)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d011      	beq.n	80053b0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	6959      	ldr	r1, [r3, #20]
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	889a      	ldrh	r2, [r3, #4]
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f002 fce4 	bl	8007d6a <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	441a      	add	r2, r3
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f004 fd3c 	bl	8009e30 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3306      	adds	r3, #6
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b3e      	cmp	r3, #62	; 0x3e
 80053d8:	d918      	bls.n	800540c <PCD_EP_ISR_Handler+0x234>
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	83bb      	strh	r3, [r7, #28]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <PCD_EP_ISR_Handler+0x21c>
 80053ee:	8bbb      	ldrh	r3, [r7, #28]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	83bb      	strh	r3, [r7, #28]
 80053f4:	8bbb      	ldrh	r3, [r7, #28]
 80053f6:	029b      	lsls	r3, r3, #10
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005402:	b29b      	uxth	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e012      	b.n	8005432 <PCD_EP_ISR_Handler+0x25a>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	83bb      	strh	r3, [r7, #28]
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <PCD_EP_ISR_Handler+0x24e>
 8005420:	8bbb      	ldrh	r3, [r7, #28]
 8005422:	3301      	adds	r3, #1
 8005424:	83bb      	strh	r3, [r7, #28]
 8005426:	8bbb      	ldrh	r3, [r7, #28]
 8005428:	029b      	lsls	r3, r3, #10
 800542a:	b29b      	uxth	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	b29c      	uxth	r4, r3
 8005444:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005448:	b29c      	uxth	r4, r3
 800544a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800544e:	b29c      	uxth	r4, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b98      	ldr	r3, [pc, #608]	; (80056b8 <PCD_EP_ISR_Handler+0x4e0>)
 8005456:	4323      	orrs	r3, r4
 8005458:	b29b      	uxth	r3, r3
 800545a:	8013      	strh	r3, [r2, #0]
 800545c:	e1d4      	b.n	8005808 <PCD_EP_ISR_Handler+0x630>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005470:	89bb      	ldrh	r3, [r7, #12]
 8005472:	b29b      	uxth	r3, r3
 8005474:	b21b      	sxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	f280 80d0 	bge.w	800561c <PCD_EP_ISR_Handler+0x444>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	7dfb      	ldrb	r3, [r7, #23]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b299      	uxth	r1, r3
 8005498:	f640 738f 	movw	r3, #3983	; 0xf8f
 800549c:	400b      	ands	r3, r1
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	015b      	lsls	r3, r3, #5
 80054a6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	4413      	add	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	7a9b      	ldrb	r3, [r3, #10]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d122      	bne.n	80054fe <PCD_EP_ISR_Handler+0x326>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4413      	add	r3, r2
 80054cc:	3306      	adds	r3, #6
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80054e4:	8bfb      	ldrh	r3, [r7, #30]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d073      	beq.n	80055d2 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	6959      	ldr	r1, [r3, #20]
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	889a      	ldrh	r2, [r3, #4]
 80054f6:	8bfb      	ldrh	r3, [r7, #30]
 80054f8:	f002 fc37 	bl	8007d6a <USB_ReadPMA>
 80054fc:	e069      	b.n	80055d2 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d022      	beq.n	800555e <PCD_EP_ISR_Handler+0x386>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	3302      	adds	r3, #2
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005542:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8005544:	8bfb      	ldrh	r3, [r7, #30]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02b      	beq.n	80055a2 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	6959      	ldr	r1, [r3, #20]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	88da      	ldrh	r2, [r3, #6]
 8005556:	8bfb      	ldrh	r3, [r7, #30]
 8005558:	f002 fc07 	bl	8007d6a <USB_ReadPMA>
 800555c:	e021      	b.n	80055a2 <PCD_EP_ISR_Handler+0x3ca>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	3306      	adds	r3, #6
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005588:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800558a:	8bfb      	ldrh	r3, [r7, #30]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <PCD_EP_ISR_Handler+0x3ca>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	6959      	ldr	r1, [r3, #20]
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	891a      	ldrh	r2, [r3, #8]
 800559c:	8bfb      	ldrh	r3, [r7, #30]
 800559e:	f002 fbe4 	bl	8007d6a <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	441a      	add	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b299      	uxth	r1, r3
 80055c2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80055c6:	400b      	ands	r3, r1
 80055c8:	b299      	uxth	r1, r3
 80055ca:	4b3c      	ldr	r3, [pc, #240]	; (80056bc <PCD_EP_ISR_Handler+0x4e4>)
 80055cc:	430b      	orrs	r3, r1
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	69da      	ldr	r2, [r3, #28]
 80055d6:	8bfb      	ldrh	r3, [r7, #30]
 80055d8:	441a      	add	r2, r3
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	8bfb      	ldrh	r3, [r7, #30]
 80055e4:	441a      	add	r2, r3
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <PCD_EP_ISR_Handler+0x424>
 80055f2:	8bfa      	ldrh	r2, [r7, #30]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d206      	bcs.n	800560a <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f004 fc14 	bl	8009e30 <HAL_PCD_DataOutStageCallback>
 8005608:	e008      	b.n	800561c <PCD_EP_ISR_Handler+0x444>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	7819      	ldrb	r1, [r3, #0]
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fc60 	bl	8004edc <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800561c:	89bb      	ldrh	r3, [r7, #12]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80ef 	beq.w	8005808 <PCD_EP_ISR_Handler+0x630>
      {
        ep = &hpcd->IN_ep[epindex];
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	015b      	lsls	r3, r3, #5
 800562e:	3328      	adds	r3, #40	; 0x28
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	b29b      	uxth	r3, r3
 800565c:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	7a9b      	ldrb	r3, [r3, #10]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d12c      	bne.n	80056c0 <PCD_EP_ISR_Handler+0x4e8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566e:	b29b      	uxth	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4413      	add	r3, r2
 800567a:	3302      	adds	r3, #2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0U)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 8083 	beq.w	80057a4 <PCD_EP_ISR_Handler+0x5cc>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	6959      	ldr	r1, [r3, #20]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	889a      	ldrh	r2, [r3, #4]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f002 fb15 	bl	8007cde <USB_WritePMA>
 80056b4:	e076      	b.n	80057a4 <PCD_EP_ISR_Handler+0x5cc>
 80056b6:	bf00      	nop
 80056b8:	ffff8080 	.word	0xffff8080
 80056bc:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d026      	beq.n	8005728 <PCD_EP_ISR_Handler+0x550>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4413      	add	r3, r2
 80056ee:	3302      	adds	r3, #2
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d031      	beq.n	8005774 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	6959      	ldr	r1, [r3, #20]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	88da      	ldrh	r2, [r3, #6]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f002 fadc 	bl	8007cde <USB_WritePMA>
 8005726:	e025      	b.n	8005774 <PCD_EP_ISR_Handler+0x59c>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	3306      	adds	r3, #6
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0U)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <PCD_EP_ISR_Handler+0x59c>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	6959      	ldr	r1, [r3, #20]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	891a      	ldrh	r2, [r3, #8]
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f002 fab5 	bl	8007cde <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4619      	mov	r1, r3
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b299      	uxth	r1, r3
 8005794:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005798:	400b      	ands	r3, r1
 800579a:	b299      	uxth	r1, r3
 800579c:	4b22      	ldr	r3, [pc, #136]	; (8005828 <PCD_EP_ISR_Handler+0x650>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4413      	add	r3, r2
 80057b8:	3302      	adds	r3, #2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	441a      	add	r2, r3
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <PCD_EP_ISR_Handler+0x61e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f004 fb36 	bl	8009e60 <HAL_PCD_DataInStageCallback>
 80057f4:	e008      	b.n	8005808 <PCD_EP_ISR_Handler+0x630>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	7819      	ldrb	r1, [r3, #0]
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fbbb 	bl	8004f7e <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	81fa      	strh	r2, [r7, #14]
 8005816:	b21b      	sxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	f6ff acec 	blt.w	80051f6 <PCD_EP_ISR_Handler+0x1e>
        }
      } 
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3724      	adds	r7, #36	; 0x24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd90      	pop	{r4, r7, pc}
 8005828:	ffffc080 	.word	0xffffc080

0800582c <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	817b      	strh	r3, [r7, #10]
 800583a:	4613      	mov	r3, r2
 800583c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_PCDEx_PMAConfig+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800584c:	897b      	ldrh	r3, [r7, #10]
 800584e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005852:	015b      	lsls	r3, r3, #5
 8005854:	3328      	adds	r3, #40	; 0x28
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	e006      	b.n	800586c <HAL_PCDEx_PMAConfig+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800585e:	897b      	ldrh	r3, [r7, #10]
 8005860:	015b      	lsls	r3, r3, #5
 8005862:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800586c:	893b      	ldrh	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <HAL_PCDEx_PMAConfig+0x56>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	b29a      	uxth	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	809a      	strh	r2, [r3, #4]
 8005880:	e00b      	b.n	800589a <HAL_PCDEx_PMAConfig+0x6e>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2201      	movs	r2, #1
 8005886:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	b29a      	uxth	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	0c1b      	lsrs	r3, r3, #16
 8005894:	b29a      	uxth	r2, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */ 
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 80058c0:	bf20      	wfe
  __asm volatile( "nop" );
 80058c2:	bf00      	nop
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <HAL_PWR_DeInit>:
/**
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 80058d0:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <HAL_PWR_DeInit+0x24>)
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <HAL_PWR_DeInit+0x24>)
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058da:	6113      	str	r3, [r2, #16]
  __HAL_RCC_PWR_RELEASE_RESET();
 80058dc:	4a04      	ldr	r2, [pc, #16]	; (80058f0 <HAL_PWR_DeInit+0x24>)
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <HAL_PWR_DeInit+0x24>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6113      	str	r3, [r2, #16]
}
 80058e8:	bf00      	nop
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr
 80058f0:	40021000 	.word	0x40021000

080058f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80058f8:	4b03      	ldr	r3, [pc, #12]	; (8005908 <HAL_PWR_EnableBkUpAccess+0x14>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	420e0020 	.word	0x420e0020

0800590c <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005910:	4b03      	ldr	r3, [pc, #12]	; (8005920 <HAL_PWR_DisableBkUpAccess+0x14>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
}
 8005916:	bf00      	nop
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	420e0020 	.word	0x420e0020

08005924 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 800592c:	492a      	ldr	r1, [pc, #168]	; (80059d8 <HAL_PWR_ConfigPVD+0xb4>)
 800592e:	4b2a      	ldr	r3, [pc, #168]	; (80059d8 <HAL_PWR_ConfigPVD+0xb4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800593e:	4a27      	ldr	r2, [pc, #156]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 8005940:	4b26      	ldr	r3, [pc, #152]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005948:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800594a:	4a24      	ldr	r2, [pc, #144]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 800594c:	4b23      	ldr	r3, [pc, #140]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005954:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8005956:	4a21      	ldr	r2, [pc, #132]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 8005958:	4b20      	ldr	r3, [pc, #128]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005960:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8005962:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 8005964:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800596c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800597a:	4a18      	ldr	r2, [pc, #96]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005984:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8005992:	4a12      	ldr	r2, [pc, #72]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 8005994:	4b11      	ldr	r3, [pc, #68]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80059aa:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b4:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80059c2:	4a06      	ldr	r2, [pc, #24]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_PWR_ConfigPVD+0xb8>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	60d3      	str	r3, [r2, #12]
  }
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr
 80059d8:	40007000 	.word	0x40007000
 80059dc:	40010400 	.word	0x40010400

080059e0 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80059e4:	4b03      	ldr	r3, [pc, #12]	; (80059f4 <HAL_PWR_EnablePVD+0x14>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
}
 80059ea:	bf00      	nop
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	420e0010 	.word	0x420e0010

080059f8 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80059fc:	4b03      	ldr	r3, [pc, #12]	; (8005a0c <HAL_PWR_DisablePVD+0x14>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
}
 8005a02:	bf00      	nop
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	420e0010 	.word	0x420e0010

08005a10 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	fa93 f3a3 	rbit	r3, r3
 8005a22:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005a24:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 8005a26:	fab3 f383 	clz	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_PWR_EnableWakeUpPin+0x34>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	461a      	mov	r2, r3
 8005a34:	2301      	movs	r3, #1
 8005a36:	6013      	str	r3, [r2, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	10838020 	.word	0x10838020

08005a48 <HAL_PWR_DisableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	fa93 f3a3 	rbit	r3, r3
 8005a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 8005a5e:	fab3 f383 	clz	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_PWR_DisableWakeUpPin+0x34>)
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	10838020 	.word	0x10838020

08005a80 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a8c:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f023 0304 	bic.w	r3, r3, #4
 8005a96:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_PWR_EnterSLEEPMode+0x22>
  __ASM volatile ("wfi");
 8005a9e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005aa0:	e002      	b.n	8005aa8 <HAL_PWR_EnterSLEEPMode+0x28>
  __ASM volatile ("sev");
 8005aa2:	bf40      	sev
  __ASM volatile ("wfe");
 8005aa4:	bf20      	wfe
 8005aa6:	bf20      	wfe
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8005ac4:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_PWR_EnterSTOPMode+0x5c>)
 8005ac6:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <HAL_PWR_EnterSTOPMode+0x5c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f023 0302 	bic.w	r3, r3, #2
 8005ace:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8005ad0:	4910      	ldr	r1, [pc, #64]	; (8005b14 <HAL_PWR_EnterSTOPMode+0x5c>)
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <HAL_PWR_EnterSTOPMode+0x5c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f023 0201 	bic.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005ae0:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <HAL_PWR_EnterSTOPMode+0x60>)
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <HAL_PWR_EnterSTOPMode+0x60>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f043 0304 	orr.w	r3, r3, #4
 8005aea:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_PWR_EnterSTOPMode+0x3e>
  __ASM volatile ("wfi");
 8005af2:	bf30      	wfi
 8005af4:	e004      	b.n	8005b00 <HAL_PWR_EnterSTOPMode+0x48>
  __ASM volatile ("sev");
 8005af6:	bf40      	sev
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
    PWR_OverloadWfe(); /* WFE redefine locally */
 8005af8:	f7ff fee0 	bl	80058bc <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8005afc:	f7ff fede 	bl	80058bc <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b00:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <HAL_PWR_EnterSTOPMode+0x60>)
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_PWR_EnterSTOPMode+0x60>)
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f023 0304 	bic.w	r3, r3, #4
 8005b0a:	6113      	str	r3, [r2, #16]
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40007000 	.word	0x40007000
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8005b20:	4a08      	ldr	r2, [pc, #32]	; (8005b44 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005b22:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f043 0302 	orr.w	r3, r3, #2
 8005b2a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b2c:	4a06      	ldr	r2, [pc, #24]	; (8005b48 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8005b38:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8005b3a:	bf00      	nop
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40007000 	.word	0x40007000
 8005b48:	e000ed00 	.word	0xe000ed00

08005b4c <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8005b50:	4a04      	ldr	r2, [pc, #16]	; (8005b64 <HAL_PWR_EnableSleepOnExit+0x18>)
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <HAL_PWR_EnableSleepOnExit+0x18>)
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f043 0302 	orr.w	r3, r3, #2
 8005b5a:	6113      	str	r3, [r2, #16]
}
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr
 8005b64:	e000ed00 	.word	0xe000ed00

08005b68 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8005b6c:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <HAL_PWR_DisableSleepOnExit+0x18>)
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <HAL_PWR_DisableSleepOnExit+0x18>)
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f023 0302 	bic.w	r3, r3, #2
 8005b76:	6113      	str	r3, [r2, #16]
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8005b88:	4a04      	ldr	r2, [pc, #16]	; (8005b9c <HAL_PWR_EnableSEVOnPend+0x18>)
 8005b8a:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <HAL_PWR_EnableSEVOnPend+0x18>)
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f043 0310 	orr.w	r3, r3, #16
 8005b92:	6113      	str	r3, [r2, #16]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr
 8005b9c:	e000ed00 	.word	0xe000ed00

08005ba0 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8005ba4:	4a04      	ldr	r2, [pc, #16]	; (8005bb8 <HAL_PWR_DisableSEVOnPend+0x18>)
 8005ba6:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <HAL_PWR_DisableSEVOnPend+0x18>)
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	6113      	str	r3, [r2, #16]
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr
 8005bb8:	e000ed00 	.word	0xe000ed00

08005bbc <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_PWR_PVD_IRQHandler+0x20>)
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005bcc:	f000 f808 	bl	8005be0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <HAL_PWR_PVD_IRQHandler+0x20>)
 8005bd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005bd6:	615a      	str	r2, [r3, #20]
  }
}
 8005bd8:	bf00      	nop
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40010400 	.word	0x40010400

08005be0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005bf2:	f7fa fb27 	bl	8000244 <HAL_GetTick>
 8005bf6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005bf8:	4a44      	ldr	r2, [pc, #272]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005bfa:	4b44      	ldr	r3, [pc, #272]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c06:	f7fa fb1d 	bl	8000244 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e075      	b.n	8005d04 <HAL_RCC_DeInit+0x118>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005c18:	4b3c      	ldr	r3, [pc, #240]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8005c24:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005c26:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c32:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005c34:	f7fa fb06 	bl	8000244 <HAL_GetTick>
 8005c38:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8005c3a:	4b34      	ldr	r3, [pc, #208]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c42:	f7fa faff 	bl	8000244 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e055      	b.n	8005d04 <HAL_RCC_DeInit+0x118>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005c58:	4b2c      	ldr	r3, [pc, #176]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1ee      	bne.n	8005c42 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005c64:	4b2a      	ldr	r3, [pc, #168]	; (8005d10 <HAL_RCC_DeInit+0x124>)
 8005c66:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <HAL_RCC_DeInit+0x128>)
 8005c68:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f7fa faa8 	bl	80001c0 <HAL_InitTick>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e044      	b.n	8005d04 <HAL_RCC_DeInit+0x118>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005c7a:	f7fa fae3 	bl	8000244 <HAL_GetTick>
 8005c7e:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005c80:	4a22      	ldr	r2, [pc, #136]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005c82:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c8e:	f7fa fad9 	bl	8000244 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e031      	b.n	8005d04 <HAL_RCC_DeInit+0x118>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCC_DeInit+0xa2>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8005cac:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005cb2:	f7fa fac7 	bl	8000244 <HAL_GetTick>
 8005cb6:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005cc2:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_DeInit+0xec>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc6:	f7fa fabd 	bl	8000244 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b64      	cmp	r3, #100	; 0x64
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_DeInit+0xec>
    {
      return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e015      	b.n	8005d04 <HAL_RCC_DeInit+0x118>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f0      	bne.n	8005cc6 <HAL_RCC_DeInit+0xda>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005ce4:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005ce6:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cee:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005cf0:	4a06      	ldr	r2, [pc, #24]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8005cfc:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <HAL_RCC_DeInit+0x120>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	20000120 	.word	0x20000120
 8005d14:	007a1200 	.word	0x007a1200

08005d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8087 	beq.w	8005e40 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005d32:	4b92      	ldr	r3, [pc, #584]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 030c 	and.w	r3, r3, #12
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d00c      	beq.n	8005d58 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d3e:	4b8f      	ldr	r3, [pc, #572]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 030c 	and.w	r3, r3, #12
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d112      	bne.n	8005d70 <HAL_RCC_OscConfig+0x58>
 8005d4a:	4b8c      	ldr	r3, [pc, #560]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d56:	d10b      	bne.n	8005d70 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d06c      	beq.n	8005e3e <HAL_RCC_OscConfig+0x126>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d168      	bne.n	8005e3e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e22d      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d78:	d106      	bne.n	8005d88 <HAL_RCC_OscConfig+0x70>
 8005d7a:	4a80      	ldr	r2, [pc, #512]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d7c:	4b7f      	ldr	r3, [pc, #508]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e02e      	b.n	8005de6 <HAL_RCC_OscConfig+0xce>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10c      	bne.n	8005daa <HAL_RCC_OscConfig+0x92>
 8005d90:	4a7a      	ldr	r2, [pc, #488]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d92:	4b7a      	ldr	r3, [pc, #488]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4a77      	ldr	r2, [pc, #476]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005d9e:	4b77      	ldr	r3, [pc, #476]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e01d      	b.n	8005de6 <HAL_RCC_OscConfig+0xce>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005db2:	d10c      	bne.n	8005dce <HAL_RCC_OscConfig+0xb6>
 8005db4:	4a71      	ldr	r2, [pc, #452]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005db6:	4b71      	ldr	r3, [pc, #452]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	4a6e      	ldr	r2, [pc, #440]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005dc2:	4b6e      	ldr	r3, [pc, #440]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	e00b      	b.n	8005de6 <HAL_RCC_OscConfig+0xce>
 8005dce:	4a6b      	ldr	r2, [pc, #428]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005dd0:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	4a68      	ldr	r2, [pc, #416]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005ddc:	4b67      	ldr	r3, [pc, #412]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d013      	beq.n	8005e16 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7fa fa29 	bl	8000244 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df6:	f7fa fa25 	bl	8000244 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b64      	cmp	r3, #100	; 0x64
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e1e1      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e08:	4b5c      	ldr	r3, [pc, #368]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0xde>
 8005e14:	e014      	b.n	8005e40 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e16:	f7fa fa15 	bl	8000244 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e1e:	f7fa fa11 	bl	8000244 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b64      	cmp	r3, #100	; 0x64
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e1cd      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e30:	4b52      	ldr	r3, [pc, #328]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f0      	bne.n	8005e1e <HAL_RCC_OscConfig+0x106>
 8005e3c:	e000      	b.n	8005e40 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d063      	beq.n	8005f14 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 030c 	and.w	r3, r3, #12
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e58:	4b48      	ldr	r3, [pc, #288]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f003 030c 	and.w	r3, r3, #12
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d11c      	bne.n	8005e9e <HAL_RCC_OscConfig+0x186>
 8005e64:	4b45      	ldr	r3, [pc, #276]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d116      	bne.n	8005e9e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e70:	4b42      	ldr	r3, [pc, #264]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_OscConfig+0x170>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e1a1      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e88:	493c      	ldr	r1, [pc, #240]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005e8a:	4b3c      	ldr	r3, [pc, #240]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9c:	e03a      	b.n	8005f14 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d020      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ea6:	4b36      	ldr	r3, [pc, #216]	; (8005f80 <HAL_RCC_OscConfig+0x268>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eac:	f7fa f9ca 	bl	8000244 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb4:	f7fa f9c6 	bl	8000244 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e182      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec6:	4b2d      	ldr	r3, [pc, #180]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed2:	492a      	ldr	r1, [pc, #168]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005ed4:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	600b      	str	r3, [r1, #0]
 8005ee6:	e015      	b.n	8005f14 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <HAL_RCC_OscConfig+0x268>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eee:	f7fa f9a9 	bl	8000244 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef6:	f7fa f9a5 	bl	8000244 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e161      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f08:	4b1c      	ldr	r3, [pc, #112]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d039      	beq.n	8005f94 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d019      	beq.n	8005f5c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f28:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <HAL_RCC_OscConfig+0x26c>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2e:	f7fa f989 	bl	8000244 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fa f985 	bl	8000244 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e141      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <HAL_RCC_OscConfig+0x264>)
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0f0      	beq.n	8005f36 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8005f54:	2001      	movs	r0, #1
 8005f56:	f000 fbe1 	bl	800671c <RCC_Delay>
 8005f5a:	e01b      	b.n	8005f94 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <HAL_RCC_OscConfig+0x26c>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f62:	f7fa f96f 	bl	8000244 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f68:	e00e      	b.n	8005f88 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f6a:	f7fa f96b 	bl	8000244 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d907      	bls.n	8005f88 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e127      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	42420000 	.word	0x42420000
 8005f84:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f88:	4b92      	ldr	r3, [pc, #584]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1ea      	bne.n	8005f6a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80a6 	beq.w	80060ee <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa6:	4b8b      	ldr	r3, [pc, #556]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10d      	bne.n	8005fce <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fb2:	4a88      	ldr	r2, [pc, #544]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8005fb4:	4b87      	ldr	r3, [pc, #540]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbc:	61d3      	str	r3, [r2, #28]
 8005fbe:	4b85      	ldr	r3, [pc, #532]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fce:	4b82      	ldr	r3, [pc, #520]	; (80061d8 <HAL_RCC_OscConfig+0x4c0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d118      	bne.n	800600c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fda:	4a7f      	ldr	r2, [pc, #508]	; (80061d8 <HAL_RCC_OscConfig+0x4c0>)
 8005fdc:	4b7e      	ldr	r3, [pc, #504]	; (80061d8 <HAL_RCC_OscConfig+0x4c0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe6:	f7fa f92d 	bl	8000244 <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fee:	f7fa f929 	bl	8000244 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b64      	cmp	r3, #100	; 0x64
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e0e5      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006000:	4b75      	ldr	r3, [pc, #468]	; (80061d8 <HAL_RCC_OscConfig+0x4c0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0f0      	beq.n	8005fee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d106      	bne.n	8006022 <HAL_RCC_OscConfig+0x30a>
 8006014:	4a6f      	ldr	r2, [pc, #444]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006016:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	6213      	str	r3, [r2, #32]
 8006020:	e02d      	b.n	800607e <HAL_RCC_OscConfig+0x366>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10c      	bne.n	8006044 <HAL_RCC_OscConfig+0x32c>
 800602a:	4a6a      	ldr	r2, [pc, #424]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800602c:	4b69      	ldr	r3, [pc, #420]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	6213      	str	r3, [r2, #32]
 8006036:	4a67      	ldr	r2, [pc, #412]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006038:	4b66      	ldr	r3, [pc, #408]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	6213      	str	r3, [r2, #32]
 8006042:	e01c      	b.n	800607e <HAL_RCC_OscConfig+0x366>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2b05      	cmp	r3, #5
 800604a:	d10c      	bne.n	8006066 <HAL_RCC_OscConfig+0x34e>
 800604c:	4a61      	ldr	r2, [pc, #388]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800604e:	4b61      	ldr	r3, [pc, #388]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f043 0304 	orr.w	r3, r3, #4
 8006056:	6213      	str	r3, [r2, #32]
 8006058:	4a5e      	ldr	r2, [pc, #376]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800605a:	4b5e      	ldr	r3, [pc, #376]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6213      	str	r3, [r2, #32]
 8006064:	e00b      	b.n	800607e <HAL_RCC_OscConfig+0x366>
 8006066:	4a5b      	ldr	r2, [pc, #364]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006068:	4b5a      	ldr	r3, [pc, #360]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	6213      	str	r3, [r2, #32]
 8006072:	4a58      	ldr	r2, [pc, #352]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006074:	4b57      	ldr	r3, [pc, #348]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f023 0304 	bic.w	r3, r3, #4
 800607c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d015      	beq.n	80060b2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006086:	f7fa f8dd 	bl	8000244 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608c:	e00a      	b.n	80060a4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800608e:	f7fa f8d9 	bl	8000244 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f241 3288 	movw	r2, #5000	; 0x1388
 800609c:	4293      	cmp	r3, r2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e093      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a4:	4b4b      	ldr	r3, [pc, #300]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ee      	beq.n	800608e <HAL_RCC_OscConfig+0x376>
 80060b0:	e014      	b.n	80060dc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060b2:	f7fa f8c7 	bl	8000244 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b8:	e00a      	b.n	80060d0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ba:	f7fa f8c3 	bl	8000244 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e07d      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d0:	4b40      	ldr	r3, [pc, #256]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1ee      	bne.n	80060ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060dc:	7dfb      	ldrb	r3, [r7, #23]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d105      	bne.n	80060ee <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e2:	4a3c      	ldr	r2, [pc, #240]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 80060e4:	4b3b      	ldr	r3, [pc, #236]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d069      	beq.n	80061ca <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060f6:	4b37      	ldr	r3, [pc, #220]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f003 030c 	and.w	r3, r3, #12
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d061      	beq.n	80061c6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d146      	bne.n	8006198 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610a:	4b34      	ldr	r3, [pc, #208]	; (80061dc <HAL_RCC_OscConfig+0x4c4>)
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006110:	f7fa f898 	bl	8000244 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006118:	f7fa f894 	bl	8000244 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e050      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800612a:	4b2a      	ldr	r3, [pc, #168]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613e:	d108      	bne.n	8006152 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006140:	4924      	ldr	r1, [pc, #144]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006142:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	4313      	orrs	r3, r2
 8006150:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006152:	4820      	ldr	r0, [pc, #128]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006154:	4b1f      	ldr	r3, [pc, #124]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a19      	ldr	r1, [r3, #32]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	430b      	orrs	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <HAL_RCC_OscConfig+0x4c4>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fa f868 	bl	8000244 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006178:	f7fa f864 	bl	8000244 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e020      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800618a:	4b12      	ldr	r3, [pc, #72]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0x460>
 8006196:	e018      	b.n	80061ca <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006198:	4b10      	ldr	r3, [pc, #64]	; (80061dc <HAL_RCC_OscConfig+0x4c4>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619e:	f7fa f851 	bl	8000244 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fa f84d 	bl	8000244 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e009      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_RCC_OscConfig+0x4bc>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f0      	bne.n	80061a6 <HAL_RCC_OscConfig+0x48e>
 80061c4:	e001      	b.n	80061ca <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	40021000 	.word	0x40021000
 80061d8:	40007000 	.word	0x40007000
 80061dc:	42420060 	.word	0x42420060

080061e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80061ee:	4b72      	ldr	r3, [pc, #456]	; (80063b8 <HAL_RCC_ClockConfig+0x1d8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0207 	and.w	r2, r3, #7
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d210      	bcs.n	800621e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fc:	496e      	ldr	r1, [pc, #440]	; (80063b8 <HAL_RCC_ClockConfig+0x1d8>)
 80061fe:	4b6e      	ldr	r3, [pc, #440]	; (80063b8 <HAL_RCC_ClockConfig+0x1d8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f023 0207 	bic.w	r2, r3, #7
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800620c:	4b6a      	ldr	r3, [pc, #424]	; (80063b8 <HAL_RCC_ClockConfig+0x1d8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0207 	and.w	r2, r3, #7
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d001      	beq.n	800621e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e0c8      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d008      	beq.n	800623c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800622a:	4964      	ldr	r1, [pc, #400]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800622c:	4b63      	ldr	r3, [pc, #396]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d06a      	beq.n	800631e <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006250:	4b5a      	ldr	r3, [pc, #360]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d115      	bne.n	8006288 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0a7      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d107      	bne.n	8006278 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006268:	4b54      	ldr	r3, [pc, #336]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e09b      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006278:	4b50      	ldr	r3, [pc, #320]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e093      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006288:	494c      	ldr	r1, [pc, #304]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800628a:	4b4c      	ldr	r3, [pc, #304]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f023 0203 	bic.w	r2, r3, #3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4313      	orrs	r3, r2
 8006298:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800629a:	f7f9 ffd3 	bl	8000244 <HAL_GetTick>
 800629e:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d112      	bne.n	80062ce <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062a8:	e00a      	b.n	80062c0 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062aa:	f7f9 ffcb 	bl	8000244 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e077      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80062c0:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 030c 	and.w	r3, r3, #12
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d1ee      	bne.n	80062aa <HAL_RCC_ClockConfig+0xca>
 80062cc:	e027      	b.n	800631e <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d11d      	bne.n	8006312 <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062d6:	e00a      	b.n	80062ee <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d8:	f7f9 ffb4 	bl	8000244 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e060      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ee:	4b33      	ldr	r3, [pc, #204]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d1ee      	bne.n	80062d8 <HAL_RCC_ClockConfig+0xf8>
 80062fa:	e010      	b.n	800631e <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062fc:	f7f9 ffa2 	bl	8000244 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	f241 3288 	movw	r2, #5000	; 0x1388
 800630a:	4293      	cmp	r3, r2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e04e      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006312:	4b2a      	ldr	r3, [pc, #168]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1ee      	bne.n	80062fc <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800631e:	4b26      	ldr	r3, [pc, #152]	; (80063b8 <HAL_RCC_ClockConfig+0x1d8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0207 	and.w	r2, r3, #7
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d910      	bls.n	800634e <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632c:	4922      	ldr	r1, [pc, #136]	; (80063b8 <HAL_RCC_ClockConfig+0x1d8>)
 800632e:	4b22      	ldr	r3, [pc, #136]	; (80063b8 <HAL_RCC_ClockConfig+0x1d8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 0207 	bic.w	r2, r3, #7
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800633c:	4b1e      	ldr	r3, [pc, #120]	; (80063b8 <HAL_RCC_ClockConfig+0x1d8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0207 	and.w	r2, r3, #7
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d001      	beq.n	800634e <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e030      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800635a:	4918      	ldr	r1, [pc, #96]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800635c:	4b17      	ldr	r3, [pc, #92]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4313      	orrs	r3, r2
 800636a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006378:	4910      	ldr	r1, [pc, #64]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4313      	orrs	r3, r2
 800638a:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800638c:	f000 f86c 	bl	8006468 <HAL_RCC_GetSysClockFreq>
 8006390:	4601      	mov	r1, r0
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <HAL_RCC_ClockConfig+0x1dc>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	091b      	lsrs	r3, r3, #4
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <HAL_RCC_ClockConfig+0x1e0>)
 800639e:	5cd3      	ldrb	r3, [r2, r3]
 80063a0:	fa21 f303 	lsr.w	r3, r1, r3
 80063a4:	4a07      	ldr	r2, [pc, #28]	; (80063c4 <HAL_RCC_ClockConfig+0x1e4>)
 80063a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80063a8:	2000      	movs	r0, #0
 80063aa:	f7f9 ff09 	bl	80001c0 <HAL_InitTick>
  
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40022000 	.word	0x40022000
 80063bc:	40021000 	.word	0x40021000
 80063c0:	0800ab30 	.word	0x0800ab30
 80063c4:	20000120 	.word	0x20000120

080063c8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80063d4:	f107 0318 	add.w	r3, r7, #24
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	609a      	str	r2, [r3, #8]
 80063e0:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80063e2:	2302      	movs	r3, #2
 80063e4:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80063e6:	2303      	movs	r3, #3
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80063ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063f2:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80063f4:	4a0e      	ldr	r2, [pc, #56]	; (8006430 <HAL_RCC_MCOConfig+0x68>)
 80063f6:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <HAL_RCC_MCOConfig+0x68>)
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	f043 0304 	orr.w	r3, r3, #4
 80063fe:	6193      	str	r3, [r2, #24]
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <HAL_RCC_MCOConfig+0x68>)
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800640c:	f107 0318 	add.w	r3, r7, #24
 8006410:	4619      	mov	r1, r3
 8006412:	4808      	ldr	r0, [pc, #32]	; (8006434 <HAL_RCC_MCOConfig+0x6c>)
 8006414:	f7fd fec2 	bl	800419c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8006418:	4905      	ldr	r1, [pc, #20]	; (8006430 <HAL_RCC_MCOConfig+0x68>)
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_RCC_MCOConfig+0x68>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4313      	orrs	r3, r2
 8006426:	604b      	str	r3, [r1, #4]
}
 8006428:	bf00      	nop
 800642a:	3728      	adds	r7, #40	; 0x28
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40021000 	.word	0x40021000
 8006434:	40010800 	.word	0x40010800

08006438 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800643c:	4b03      	ldr	r3, [pc, #12]	; (800644c <HAL_RCC_EnableCSS+0x14>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	4242004c 	.word	0x4242004c

08006450 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <HAL_RCC_DisableCSS+0x14>)
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
}
 800645a:	bf00      	nop
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	4242004c 	.word	0x4242004c

08006468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006468:	b490      	push	{r4, r7}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800646e:	4b2a      	ldr	r3, [pc, #168]	; (8006518 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006470:	1d3c      	adds	r4, r7, #4
 8006472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006478:	4b28      	ldr	r3, [pc, #160]	; (800651c <HAL_RCC_GetSysClockFreq+0xb4>)
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
 8006482:	2300      	movs	r3, #0
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	2300      	movs	r3, #0
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006492:	4b23      	ldr	r3, [pc, #140]	; (8006520 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d002      	beq.n	80064a8 <HAL_RCC_GetSysClockFreq+0x40>
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d003      	beq.n	80064ae <HAL_RCC_GetSysClockFreq+0x46>
 80064a6:	e02d      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064a8:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064aa:	623b      	str	r3, [r7, #32]
      break;
 80064ac:	e02d      	b.n	800650a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	0c9b      	lsrs	r3, r3, #18
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064ba:	4413      	add	r3, r2
 80064bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80064c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064cc:	4b14      	ldr	r3, [pc, #80]	; (8006520 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	0c5b      	lsrs	r3, r3, #17
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80064da:	4413      	add	r3, r2
 80064dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80064e0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4a0f      	ldr	r2, [pc, #60]	; (8006524 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064e6:	fb02 f203 	mul.w	r2, r2, r3
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
 80064f2:	e004      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	4a0c      	ldr	r2, [pc, #48]	; (8006528 <HAL_RCC_GetSysClockFreq+0xc0>)
 80064f8:	fb02 f303 	mul.w	r3, r2, r3
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	623b      	str	r3, [r7, #32]
      break;
 8006502:	e002      	b.n	800650a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006504:	4b07      	ldr	r3, [pc, #28]	; (8006524 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006506:	623b      	str	r3, [r7, #32]
      break;
 8006508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800650a:	6a3b      	ldr	r3, [r7, #32]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3728      	adds	r7, #40	; 0x28
 8006510:	46bd      	mov	sp, r7
 8006512:	bc90      	pop	{r4, r7}
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	0800aaf8 	.word	0x0800aaf8
 800651c:	0800ab08 	.word	0x0800ab08
 8006520:	40021000 	.word	0x40021000
 8006524:	007a1200 	.word	0x007a1200
 8006528:	003d0900 	.word	0x003d0900

0800652c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006530:	4b02      	ldr	r3, [pc, #8]	; (800653c <HAL_RCC_GetHCLKFreq+0x10>)
 8006532:	681b      	ldr	r3, [r3, #0]
}
 8006534:	4618      	mov	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr
 800653c:	20000120 	.word	0x20000120

08006540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006544:	f7ff fff2 	bl	800652c <HAL_RCC_GetHCLKFreq>
 8006548:	4601      	mov	r1, r0
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	4a03      	ldr	r2, [pc, #12]	; (8006564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006556:	5cd3      	ldrb	r3, [r2, r3]
 8006558:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800655c:	4618      	mov	r0, r3
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40021000 	.word	0x40021000
 8006564:	0800ab40 	.word	0x0800ab40

08006568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800656c:	f7ff ffde 	bl	800652c <HAL_RCC_GetHCLKFreq>
 8006570:	4601      	mov	r1, r0
 8006572:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	0adb      	lsrs	r3, r3, #11
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	4a03      	ldr	r2, [pc, #12]	; (800658c <HAL_RCC_GetPCLK2Freq+0x24>)
 800657e:	5cd3      	ldrb	r3, [r2, r3]
 8006580:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40021000 	.word	0x40021000
 800658c:	0800ab40 	.word	0x0800ab40

08006590 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	220f      	movs	r2, #15
 800659c:	601a      	str	r2, [r3, #0]
  /* Get the Prediv1 source --------------------------------------------------*/
  RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
#endif /* RCC_CFGR2_PREDIV1SRC */

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800659e:	4b3c      	ldr	r3, [pc, #240]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065aa:	d104      	bne.n	80065b6 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80065b2:	605a      	str	r2, [r3, #4]
 80065b4:	e00e      	b.n	80065d4 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 80065b6:	4b36      	ldr	r3, [pc, #216]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c2:	d104      	bne.n	80065ce <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065ca:	605a      	str	r2, [r3, #4]
 80065cc:	e002      	b.n	80065d4 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	605a      	str	r2, [r3, #4]
  }
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 80065d4:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	609a      	str	r2, [r3, #8]

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80065e0:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d103      	bne.n	80065f4 <HAL_RCC_GetOscConfig+0x64>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	611a      	str	r2, [r3, #16]
 80065f2:	e002      	b.n	80065fa <HAL_RCC_GetOscConfig+0x6a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	611a      	str	r2, [r3, #16]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 80065fa:	4b25      	ldr	r3, [pc, #148]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	08db      	lsrs	r3, r3, #3
 8006600:	f003 021f 	and.w	r2, r3, #31
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	615a      	str	r2, [r3, #20]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8006608:	4b21      	ldr	r3, [pc, #132]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b04      	cmp	r3, #4
 8006612:	d103      	bne.n	800661c <HAL_RCC_GetOscConfig+0x8c>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2205      	movs	r2, #5
 8006618:	60da      	str	r2, [r3, #12]
 800661a:	e00c      	b.n	8006636 <HAL_RCC_GetOscConfig+0xa6>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800661c:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d103      	bne.n	8006630 <HAL_RCC_GetOscConfig+0xa0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	e002      	b.n	8006636 <HAL_RCC_GetOscConfig+0xa6>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	60da      	str	r2, [r3, #12]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8006636:	4b16      	ldr	r3, [pc, #88]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d103      	bne.n	800664a <HAL_RCC_GetOscConfig+0xba>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	619a      	str	r2, [r3, #24]
 8006648:	e002      	b.n	8006650 <HAL_RCC_GetOscConfig+0xc0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	619a      	str	r2, [r3, #24]
  }
  

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8006650:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800665c:	d103      	bne.n	8006666 <HAL_RCC_GetOscConfig+0xd6>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2202      	movs	r2, #2
 8006662:	61da      	str	r2, [r3, #28]
 8006664:	e002      	b.n	800666c <HAL_RCC_GetOscConfig+0xdc>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 800666c:	4b08      	ldr	r3, [pc, #32]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetOscConfig+0x100>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
  }
  RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
  RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
#endif /* RCC_CR_PLL2ON */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	bc80      	pop	{r7}
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000

08006694 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	220f      	movs	r2, #15
 80066a2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066a4:	4b11      	ldr	r3, [pc, #68]	; (80066ec <HAL_RCC_GetClockConfig+0x58>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f003 0203 	and.w	r2, r3, #3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80066b0:	4b0e      	ldr	r3, [pc, #56]	; (80066ec <HAL_RCC_GetClockConfig+0x58>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <HAL_RCC_GetClockConfig+0x58>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80066c8:	4b08      	ldr	r3, [pc, #32]	; (80066ec <HAL_RCC_GetClockConfig+0x58>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	08db      	lsrs	r3, r3, #3
 80066ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80066d6:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <HAL_RCC_GetClockConfig+0x5c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0207 	and.w	r2, r3, #7
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr
 80066ec:	40021000 	.word	0x40021000
 80066f0:	40022000 	.word	0x40022000

080066f4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <HAL_RCC_NMI_IRQHandler+0x20>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	d104      	bne.n	800670e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006704:	f000 f828 	bl	8006758 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <HAL_RCC_NMI_IRQHandler+0x24>)
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	701a      	strb	r2, [r3, #0]
  }
}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000
 8006718:	4002100a 	.word	0x4002100a

0800671c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006724:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <RCC_Delay+0x34>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a0a      	ldr	r2, [pc, #40]	; (8006754 <RCC_Delay+0x38>)
 800672a:	fba2 2303 	umull	r2, r3, r2, r3
 800672e:	0a5b      	lsrs	r3, r3, #9
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("nop");
 8006738:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	1e5a      	subs	r2, r3, #1
 800673e:	60fa      	str	r2, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f9      	bne.n	8006738 <RCC_Delay+0x1c>
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000120 	.word	0x20000120
 8006754:	10624dd3 	.word	0x10624dd3

08006758 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 800675c:	bf00      	nop
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d07d      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006780:	2300      	movs	r3, #0
 8006782:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006784:	4b4f      	ldr	r3, [pc, #316]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10d      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006790:	4a4c      	ldr	r2, [pc, #304]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006792:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679a:	61d3      	str	r3, [r2, #28]
 800679c:	4b49      	ldr	r3, [pc, #292]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a4:	60bb      	str	r3, [r7, #8]
 80067a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ac:	4b46      	ldr	r3, [pc, #280]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d118      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067b8:	4a43      	ldr	r2, [pc, #268]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ba:	4b43      	ldr	r3, [pc, #268]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067c4:	f7f9 fd3e 	bl	8000244 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ca:	e008      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067cc:	f7f9 fd3a 	bl	8000244 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b64      	cmp	r3, #100	; 0x64
 80067d8:	d901      	bls.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e06d      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067de:	4b3a      	ldr	r3, [pc, #232]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067ea:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d02e      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	d027      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006808:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006810:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006812:	4b2e      	ldr	r3, [pc, #184]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006814:	2201      	movs	r2, #1
 8006816:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006818:	4b2c      	ldr	r3, [pc, #176]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800681e:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d014      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682e:	f7f9 fd09 	bl	8000244 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006834:	e00a      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7f9 fd05 	bl	8000244 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e036      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800684c:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ee      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006858:	491a      	ldr	r1, [pc, #104]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685a:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4313      	orrs	r3, r2
 8006868:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d105      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006870:	4a14      	ldr	r2, [pc, #80]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006872:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800687a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006888:	490e      	ldr	r1, [pc, #56]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688a:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	4313      	orrs	r3, r2
 8006898:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068a6:	4907      	ldr	r1, [pc, #28]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40007000 	.word	0x40007000
 80068cc:	42420440 	.word	0x42420440

080068d0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that 
  *         returns the configuration information for the Extended Peripherals clocks(RTC, I2S, ADC clocks).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t srcclk = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

  /* Get the RTC configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80068e2:	4b12      	ldr	r3, [pc, #72]	; (800692c <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ea:	60fb      	str	r3, [r7, #12]
  /* Source clock is LSE or LSI*/
  PeriphClkInit->RTCClockSelection = srcclk;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Get the ADC clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f043 0202 	orr.w	r2, r3, #2
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 80068fe:	4b0b      	ldr	r3, [pc, #44]	; (800692c <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f043 0210 	orr.w	r2, r3, #16
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 8006916:	4b05      	ldr	r3, [pc, #20]	; (800692c <HAL_RCCEx_GetPeriphCLKConfig+0x5c>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60da      	str	r2, [r3, #12]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr
 800692c:	40021000 	.word	0x40021000

08006930 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006930:	b590      	push	{r4, r7, lr}
 8006932:	b08d      	sub	sp, #52	; 0x34
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006938:	4b57      	ldr	r3, [pc, #348]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800693a:	f107 040c 	add.w	r4, r7, #12
 800693e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006944:	4b55      	ldr	r3, [pc, #340]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
 800694e:	2300      	movs	r3, #0
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006952:	2300      	movs	r3, #0
 8006954:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	2300      	movs	r3, #0
 800695c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f000 8084 	beq.w	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006966:	2b10      	cmp	r3, #16
 8006968:	d002      	beq.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800696a:	2b01      	cmp	r3, #1
 800696c:	d049      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 800696e:	e08d      	b.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8006970:	4b4b      	ldr	r3, [pc, #300]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8006976:	4b4a      	ldr	r3, [pc, #296]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8083 	beq.w	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	0c9b      	lsrs	r3, r3, #18
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006990:	4413      	add	r3, r2
 8006992:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006996:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d018      	beq.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069a2:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	0c5b      	lsrs	r3, r3, #17
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80069b0:	4413      	add	r3, r2
 80069b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00d      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80069c2:	4a38      	ldr	r2, [pc, #224]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	6a3a      	ldr	r2, [r7, #32]
 80069cc:	fb02 f303 	mul.w	r3, r2, r3
 80069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d2:	e004      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	4a34      	ldr	r2, [pc, #208]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80069d8:	fb02 f303 	mul.w	r3, r2, r3
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80069de:	4b30      	ldr	r3, [pc, #192]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ea:	d102      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80069f0:	e04b      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	4a2d      	ldr	r2, [pc, #180]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80069f8:	fba2 2303 	umull	r2, r3, r2, r3
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a00:	e043      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 8006a02:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a12:	d108      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 8006a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a24:	e022      	b.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a30:	d109      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8006a32:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 8006a3e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a44:	e012      	b.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a50:	d109      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8006a52:	4b13      	ldr	r3, [pc, #76]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 8006a5e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a64:	e002      	b.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a6a:	e00f      	b.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8006a6c:	e00e      	b.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006a6e:	f7ff fd7b 	bl	8006568 <HAL_RCC_GetPCLK2Freq>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	0b9b      	lsrs	r3, r3, #14
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	3301      	adds	r3, #1
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006a88:	e000      	b.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 8006a8a:	bf00      	nop
    }
  }
  return(frequency);
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3734      	adds	r7, #52	; 0x34
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd90      	pop	{r4, r7, pc}
 8006a96:	bf00      	nop
 8006a98:	0800ab0c 	.word	0x0800ab0c
 8006a9c:	0800ab1c 	.word	0x0800ab1c
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	007a1200 	.word	0x007a1200
 8006aa8:	003d0900 	.word	0x003d0900
 8006aac:	aaaaaaab 	.word	0xaaaaaaab

08006ab0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	f107 0014 	add.w	r0, r7, #20
 8006abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	b004      	add	sp, #16
 8006ace:	4770      	bx	lr

08006ad0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8006adc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006ae0:	60fb      	str	r3, [r7, #12]
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	4313      	orrs	r3, r2
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask = 0;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8006b10:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8006b14:	60fb      	str	r3, [r7, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4013      	ands	r3, r2
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  UNUSED(mode);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b54:	b084      	sub	sp, #16
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	f107 0014 	add.w	r0, r7, #20
 8006b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff ffa2 	bl	8006ad0 <USB_EnableGlobalInt>
    
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b98:	b004      	add	sp, #16
 8006b9a:	4770      	bx	lr

08006b9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_TypeDef *USBx, uint32_t num)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  UNUSED(num);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bc6:	b490      	push	{r4, r7}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	78db      	ldrb	r3, [r3, #3]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d860      	bhi.n	8006c9a <USB_ActivateEndpoint+0xd4>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <USB_ActivateEndpoint+0x1a>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006bf1 	.word	0x08006bf1
 8006be4:	08006c6f 	.word	0x08006c6f
 8006be8:	08006c1d 	.word	0x08006c1d
 8006bec:	08006c43 	.word	0x08006c43
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	441a      	add	r2, r3
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	8013      	strh	r3, [r2, #0]
    break;
 8006c1a:	e03f      	b.n	8006c9c <USB_ActivateEndpoint+0xd6>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	441a      	add	r2, r3
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	8013      	strh	r3, [r2, #0]
    break;
 8006c40:	e02c      	b.n	8006c9c <USB_ActivateEndpoint+0xd6>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	441a      	add	r2, r3
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	8013      	strh	r3, [r2, #0]
    break;
 8006c6c:	e016      	b.n	8006c9c <USB_ActivateEndpoint+0xd6>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	441a      	add	r2, r3
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	8013      	strh	r3, [r2, #0]
    break;
 8006c98:	e000      	b.n	8006c9c <USB_ActivateEndpoint+0xd6>
  default:
      break;
 8006c9a:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b299      	uxth	r1, r3
 8006cb4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006cb8:	400b      	ands	r3, r1
 8006cba:	b299      	uxth	r1, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	b299      	uxth	r1, r3
 8006cc6:	4b75      	ldr	r3, [pc, #468]	; (8006e9c <USB_ActivateEndpoint+0x2d6>)
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	7a9b      	ldrb	r3, [r3, #10]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 80e8 	bne.w	8006ea8 <USB_ActivateEndpoint+0x2e2>
  {
    if (ep->is_in)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	785b      	ldrb	r3, [r3, #1]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d04c      	beq.n	8006d7a <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	005a      	lsls	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	889b      	ldrh	r3, [r3, #4]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d013      	beq.n	8006d48 <USB_ActivateEndpoint+0x182>
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	441a      	add	r2, r3
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b299      	uxth	r1, r3
 8006d38:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006d3c:	400b      	ands	r3, r1
 8006d3e:	b299      	uxth	r1, r3
 8006d40:	4b57      	ldr	r3, [pc, #348]	; (8006ea0 <USB_ActivateEndpoint+0x2da>)
 8006d42:	430b      	orrs	r3, r1
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5e:	b29c      	uxth	r4, r3
 8006d60:	f084 0320 	eor.w	r3, r4, #32
 8006d64:	b29c      	uxth	r4, r3
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	441a      	add	r2, r3
 8006d70:	4b4a      	ldr	r3, [pc, #296]	; (8006e9c <USB_ActivateEndpoint+0x2d6>)
 8006d72:	4323      	orrs	r3, r4
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	8013      	strh	r3, [r2, #0]
 8006d78:	e1d9      	b.n	800712e <USB_ActivateEndpoint+0x568>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	005a      	lsls	r2, r3, #1
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d98:	461a      	mov	r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	889b      	ldrh	r3, [r3, #4]
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	4413      	add	r3, r2
 8006db8:	3306      	adds	r3, #6
 8006dba:	005a      	lsls	r2, r3, #1
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b3e      	cmp	r3, #62	; 0x3e
 8006dcc:	d918      	bls.n	8006e00 <USB_ActivateEndpoint+0x23a>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	81fb      	strh	r3, [r7, #14]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <USB_ActivateEndpoint+0x222>
 8006de2:	89fb      	ldrh	r3, [r7, #14]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	81fb      	strh	r3, [r7, #14]
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	029b      	lsls	r3, r3, #10
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e012      	b.n	8006e26 <USB_ActivateEndpoint+0x260>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	81fb      	strh	r3, [r7, #14]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <USB_ActivateEndpoint+0x254>
 8006e14:	89fb      	ldrh	r3, [r7, #14]
 8006e16:	3301      	adds	r3, #1
 8006e18:	81fb      	strh	r3, [r7, #14]
 8006e1a:	89fb      	ldrh	r3, [r7, #14]
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d013      	beq.n	8006e64 <USB_ActivateEndpoint+0x29e>
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	441a      	add	r2, r3
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b299      	uxth	r1, r3
 8006e54:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006e58:	400b      	ands	r3, r1
 8006e5a:	b299      	uxth	r1, r3
 8006e5c:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <USB_ActivateEndpoint+0x2de>)
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	b29c      	uxth	r4, r3
 8006e7c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006e80:	b29c      	uxth	r4, r3
 8006e82:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006e86:	b29c      	uxth	r4, r3
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	441a      	add	r2, r3
 8006e92:	4b02      	ldr	r3, [pc, #8]	; (8006e9c <USB_ActivateEndpoint+0x2d6>)
 8006e94:	4323      	orrs	r3, r4
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8013      	strh	r3, [r2, #0]
 8006e9a:	e148      	b.n	800712e <USB_ActivateEndpoint+0x568>
 8006e9c:	ffff8080 	.word	0xffff8080
 8006ea0:	ffff80c0 	.word	0xffff80c0
 8006ea4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	441a      	add	r2, r3
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b299      	uxth	r1, r3
 8006ec0:	f640 630f 	movw	r3, #3599	; 0xe0f
 8006ec4:	400b      	ands	r3, r1
 8006ec6:	b299      	uxth	r1, r3
 8006ec8:	4b9c      	ldr	r3, [pc, #624]	; (800713c <USB_ActivateEndpoint+0x576>)
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	005a      	lsls	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eec:	461a      	mov	r2, r3
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	88db      	ldrh	r3, [r3, #6]
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	461a      	mov	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	4413      	add	r3, r2
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	005a      	lsls	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f18:	461a      	mov	r2, r3
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	891b      	ldrh	r3, [r3, #8]
 8006f1e:	085b      	lsrs	r3, r3, #1
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f040 8083 	bne.w	8007036 <USB_ActivateEndpoint+0x470>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d013      	beq.n	8006f6e <USB_ActivateEndpoint+0x3a8>
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	441a      	add	r2, r3
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b299      	uxth	r1, r3
 8006f5e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006f62:	400b      	ands	r3, r1
 8006f64:	b299      	uxth	r1, r3
 8006f66:	4b76      	ldr	r3, [pc, #472]	; (8007140 <USB_ActivateEndpoint+0x57a>)
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d013      	beq.n	8006fac <USB_ActivateEndpoint+0x3e6>
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	441a      	add	r2, r3
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b299      	uxth	r1, r3
 8006f9c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006fa0:	400b      	ands	r3, r1
 8006fa2:	b299      	uxth	r1, r3
 8006fa4:	4b67      	ldr	r3, [pc, #412]	; (8007144 <USB_ActivateEndpoint+0x57e>)
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	441a      	add	r2, r3
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b299      	uxth	r1, r3
 8006fc4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006fc8:	400b      	ands	r3, r1
 8006fca:	b299      	uxth	r1, r3
 8006fcc:	4b5d      	ldr	r3, [pc, #372]	; (8007144 <USB_ActivateEndpoint+0x57e>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fea:	b29c      	uxth	r4, r3
 8006fec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006ff0:	b29c      	uxth	r4, r3
 8006ff2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006ff6:	b29c      	uxth	r4, r3
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	441a      	add	r2, r3
 8007002:	4b51      	ldr	r3, [pc, #324]	; (8007148 <USB_ActivateEndpoint+0x582>)
 8007004:	4323      	orrs	r3, r4
 8007006:	b29b      	uxth	r3, r3
 8007008:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007020:	b29c      	uxth	r4, r3
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	441a      	add	r2, r3
 800702c:	4b46      	ldr	r3, [pc, #280]	; (8007148 <USB_ActivateEndpoint+0x582>)
 800702e:	4323      	orrs	r3, r4
 8007030:	b29b      	uxth	r3, r3
 8007032:	8013      	strh	r3, [r2, #0]
 8007034:	e07b      	b.n	800712e <USB_ActivateEndpoint+0x568>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d013      	beq.n	8007074 <USB_ActivateEndpoint+0x4ae>
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	441a      	add	r2, r3
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b299      	uxth	r1, r3
 8007064:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007068:	400b      	ands	r3, r1
 800706a:	b299      	uxth	r1, r3
 800706c:	4b34      	ldr	r3, [pc, #208]	; (8007140 <USB_ActivateEndpoint+0x57a>)
 800706e:	430b      	orrs	r3, r1
 8007070:	b29b      	uxth	r3, r3
 8007072:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d013      	beq.n	80070b2 <USB_ActivateEndpoint+0x4ec>
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	441a      	add	r2, r3
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b299      	uxth	r1, r3
 80070a2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80070a6:	400b      	ands	r3, r1
 80070a8:	b299      	uxth	r1, r3
 80070aa:	4b26      	ldr	r3, [pc, #152]	; (8007144 <USB_ActivateEndpoint+0x57e>)
 80070ac:	430b      	orrs	r3, r1
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	441a      	add	r2, r3
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b299      	uxth	r1, r3
 80070ca:	f640 730f 	movw	r3, #3855	; 0xf0f
 80070ce:	400b      	ands	r3, r1
 80070d0:	b299      	uxth	r1, r3
 80070d2:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <USB_ActivateEndpoint+0x57a>)
 80070d4:	430b      	orrs	r3, r1
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070f0:	b29c      	uxth	r4, r3
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	441a      	add	r2, r3
 80070fc:	4b12      	ldr	r3, [pc, #72]	; (8007148 <USB_ActivateEndpoint+0x582>)
 80070fe:	4323      	orrs	r3, r4
 8007100:	b29b      	uxth	r3, r3
 8007102:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711a:	b29c      	uxth	r4, r3
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	4b08      	ldr	r3, [pc, #32]	; (8007148 <USB_ActivateEndpoint+0x582>)
 8007128:	4323      	orrs	r3, r4
 800712a:	b29b      	uxth	r3, r3
 800712c:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bc90      	pop	{r4, r7}
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	ffff8180 	.word	0xffff8180
 8007140:	ffffc080 	.word	0xffffc080
 8007144:	ffff80c0 	.word	0xffff80c0
 8007148:	ffff8080 	.word	0xffff8080

0800714c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800714c:	b490      	push	{r4, r7}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0) 
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	7a9b      	ldrb	r3, [r3, #10]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d16d      	bne.n	800723a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d034      	beq.n	80071d0 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d013      	beq.n	80071a4 <USB_DeactivateEndpoint+0x58>
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b299      	uxth	r1, r3
 8007194:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007198:	400b      	ands	r3, r1
 800719a:	b299      	uxth	r1, r3
 800719c:	4b68      	ldr	r3, [pc, #416]	; (8007340 <USB_DeactivateEndpoint+0x1f4>)
 800719e:	430b      	orrs	r3, r1
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ba:	b29c      	uxth	r4, r3
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	441a      	add	r2, r3
 80071c6:	4b5f      	ldr	r3, [pc, #380]	; (8007344 <USB_DeactivateEndpoint+0x1f8>)
 80071c8:	4323      	orrs	r3, r4
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	8013      	strh	r3, [r2, #0]
 80071ce:	e139      	b.n	8007444 <USB_DeactivateEndpoint+0x2f8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d013      	beq.n	800720e <USB_DeactivateEndpoint+0xc2>
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	441a      	add	r2, r3
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b299      	uxth	r1, r3
 80071fe:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007202:	400b      	ands	r3, r1
 8007204:	b299      	uxth	r1, r3
 8007206:	4b50      	ldr	r3, [pc, #320]	; (8007348 <USB_DeactivateEndpoint+0x1fc>)
 8007208:	430b      	orrs	r3, r1
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007224:	b29c      	uxth	r4, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	4b44      	ldr	r3, [pc, #272]	; (8007344 <USB_DeactivateEndpoint+0x1f8>)
 8007232:	4323      	orrs	r3, r4
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]
 8007238:	e104      	b.n	8007444 <USB_DeactivateEndpoint+0x2f8>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	785b      	ldrb	r3, [r3, #1]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f040 8084 	bne.w	800734c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d013      	beq.n	8007282 <USB_DeactivateEndpoint+0x136>
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b299      	uxth	r1, r3
 8007272:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007276:	400b      	ands	r3, r1
 8007278:	b299      	uxth	r1, r3
 800727a:	4b33      	ldr	r3, [pc, #204]	; (8007348 <USB_DeactivateEndpoint+0x1fc>)
 800727c:	430b      	orrs	r3, r1
 800727e:	b29b      	uxth	r3, r3
 8007280:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d013      	beq.n	80072c0 <USB_DeactivateEndpoint+0x174>
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b299      	uxth	r1, r3
 80072b0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80072b4:	400b      	ands	r3, r1
 80072b6:	b299      	uxth	r1, r3
 80072b8:	4b21      	ldr	r3, [pc, #132]	; (8007340 <USB_DeactivateEndpoint+0x1f4>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	b29b      	uxth	r3, r3
 80072be:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	441a      	add	r2, r3
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b299      	uxth	r1, r3
 80072d8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80072dc:	400b      	ands	r3, r1
 80072de:	b299      	uxth	r1, r3
 80072e0:	4b17      	ldr	r3, [pc, #92]	; (8007340 <USB_DeactivateEndpoint+0x1f4>)
 80072e2:	430b      	orrs	r3, r1
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	b29c      	uxth	r4, r3
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <USB_DeactivateEndpoint+0x1f8>)
 800730c:	4323      	orrs	r3, r4
 800730e:	b29b      	uxth	r3, r3
 8007310:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007328:	b29c      	uxth	r4, r3
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	4b03      	ldr	r3, [pc, #12]	; (8007344 <USB_DeactivateEndpoint+0x1f8>)
 8007336:	4323      	orrs	r3, r4
 8007338:	b29b      	uxth	r3, r3
 800733a:	8013      	strh	r3, [r2, #0]
 800733c:	e082      	b.n	8007444 <USB_DeactivateEndpoint+0x2f8>
 800733e:	bf00      	nop
 8007340:	ffff80c0 	.word	0xffff80c0
 8007344:	ffff8080 	.word	0xffff8080
 8007348:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d013      	beq.n	800738a <USB_DeactivateEndpoint+0x23e>
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	441a      	add	r2, r3
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b299      	uxth	r1, r3
 800737a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800737e:	400b      	ands	r3, r1
 8007380:	b299      	uxth	r1, r3
 8007382:	4b33      	ldr	r3, [pc, #204]	; (8007450 <USB_DeactivateEndpoint+0x304>)
 8007384:	430b      	orrs	r3, r1
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d013      	beq.n	80073c8 <USB_DeactivateEndpoint+0x27c>
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	441a      	add	r2, r3
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	440b      	add	r3, r1
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b299      	uxth	r1, r3
 80073b8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80073bc:	400b      	ands	r3, r1
 80073be:	b299      	uxth	r1, r3
 80073c0:	4b24      	ldr	r3, [pc, #144]	; (8007454 <USB_DeactivateEndpoint+0x308>)
 80073c2:	430b      	orrs	r3, r1
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	441a      	add	r2, r3
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	440b      	add	r3, r1
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b299      	uxth	r1, r3
 80073e0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80073e4:	400b      	ands	r3, r1
 80073e6:	b299      	uxth	r1, r3
 80073e8:	4b19      	ldr	r3, [pc, #100]	; (8007450 <USB_DeactivateEndpoint+0x304>)
 80073ea:	430b      	orrs	r3, r1
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007406:	b29c      	uxth	r4, r3
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	441a      	add	r2, r3
 8007412:	4b11      	ldr	r3, [pc, #68]	; (8007458 <USB_DeactivateEndpoint+0x30c>)
 8007414:	4323      	orrs	r3, r4
 8007416:	b29b      	uxth	r3, r3
 8007418:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	b29c      	uxth	r4, r3
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <USB_DeactivateEndpoint+0x30c>)
 800743e:	4323      	orrs	r3, r4
 8007440:	b29b      	uxth	r3, r3
 8007442:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bc90      	pop	{r4, r7}
 800744e:	4770      	bx	lr
 8007450:	ffffc080 	.word	0xffffc080
 8007454:	ffff80c0 	.word	0xffff80c0
 8007458:	ffff8080 	.word	0xffff8080

0800745c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800745c:	b590      	push	{r4, r7, lr}
 800745e:	b08d      	sub	sp, #52	; 0x34
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b01      	cmp	r3, #1
 8007476:	f040 8149 	bne.w	800770c <USB_EPStartXfer+0x2b0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	429a      	cmp	r2, r3
 8007484:	d909      	bls.n	800749a <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	699a      	ldr	r2, [r3, #24]
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	1ad2      	subs	r2, r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	619a      	str	r2, [r3, #24]
 8007498:	e005      	b.n	80074a6 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2200      	movs	r2, #0
 80074a4:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	7a9b      	ldrb	r3, [r3, #10]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11b      	bne.n	80074e6 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6959      	ldr	r1, [r3, #20]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	889a      	ldrh	r2, [r3, #4]
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fc0f 	bl	8007cde <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	4413      	add	r3, r2
 80074d2:	3302      	adds	r3, #2
 80074d4:	005a      	lsls	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074de:	461a      	mov	r2, r3
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	e0f6      	b.n	80076d4 <USB_EPStartXfer+0x278>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d059      	beq.n	80075b0 <USB_EPStartXfer+0x154>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d13b      	bne.n	800757c <USB_EPStartXfer+0x120>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750a:	b29b      	uxth	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	4413      	add	r3, r2
 8007516:	3306      	adds	r3, #6
 8007518:	005a      	lsls	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	2b3e      	cmp	r3, #62	; 0x3e
 8007528:	d916      	bls.n	8007558 <USB_EPStartXfer+0xfc>
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	095b      	lsrs	r3, r3, #5
 800752e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <USB_EPStartXfer+0xe4>
 800753a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800753c:	3b01      	subs	r3, #1
 800753e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007540:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007542:	029b      	lsls	r3, r3, #10
 8007544:	b29b      	uxth	r3, r3
 8007546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e027      	b.n	80075a8 <USB_EPStartXfer+0x14c>
 8007558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755a:	085b      	lsrs	r3, r3, #1
 800755c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <USB_EPStartXfer+0x112>
 8007568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800756a:	3301      	adds	r3, #1
 800756c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800756e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	b29b      	uxth	r3, r3
 8007574:	461a      	mov	r2, r3
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e015      	b.n	80075a8 <USB_EPStartXfer+0x14c>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d111      	bne.n	80075a8 <USB_EPStartXfer+0x14c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800758a:	b29b      	uxth	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	3302      	adds	r3, #2
 8007598:	005a      	lsls	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075a2:	461a      	mov	r2, r3
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	891b      	ldrh	r3, [r3, #8]
 80075ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075ae:	e058      	b.n	8007662 <USB_EPStartXfer+0x206>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d13b      	bne.n	8007630 <USB_EPStartXfer+0x1d4>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075be:	b29b      	uxth	r3, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4413      	add	r3, r2
 80075ca:	3302      	adds	r3, #2
 80075cc:	005a      	lsls	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	2b3e      	cmp	r3, #62	; 0x3e
 80075dc:	d916      	bls.n	800760c <USB_EPStartXfer+0x1b0>
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	095b      	lsrs	r3, r3, #5
 80075e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <USB_EPStartXfer+0x198>
 80075ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f0:	3b01      	subs	r3, #1
 80075f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f6:	029b      	lsls	r3, r3, #10
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007602:	b29b      	uxth	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	e027      	b.n	800765c <USB_EPStartXfer+0x200>
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <USB_EPStartXfer+0x1c6>
 800761c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800761e:	3301      	adds	r3, #1
 8007620:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007624:	029b      	lsls	r3, r3, #10
 8007626:	b29b      	uxth	r3, r3
 8007628:	461a      	mov	r2, r3
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	e015      	b.n	800765c <USB_EPStartXfer+0x200>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d111      	bne.n	800765c <USB_EPStartXfer+0x200>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800763e:	b29b      	uxth	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	4413      	add	r3, r2
 800764a:	3302      	adds	r3, #2
 800764c:	005a      	lsls	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007656:	461a      	mov	r2, r3
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	88db      	ldrh	r3, [r3, #6]
 8007660:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6959      	ldr	r1, [r3, #20]
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	b29b      	uxth	r3, r3
 800766a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fb36 	bl	8007cde <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d114      	bne.n	80076a4 <USB_EPStartXfer+0x248>
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	441a      	add	r2, r3
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	b299      	uxth	r1, r3
 8007692:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007696:	400b      	ands	r3, r1
 8007698:	b299      	uxth	r1, r3
 800769a:	4b92      	ldr	r3, [pc, #584]	; (80078e4 <USB_EPStartXfer+0x488>)
 800769c:	430b      	orrs	r3, r1
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8013      	strh	r3, [r2, #0]
 80076a2:	e017      	b.n	80076d4 <USB_EPStartXfer+0x278>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d113      	bne.n	80076d4 <USB_EPStartXfer+0x278>
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	441a      	add	r2, r3
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b299      	uxth	r1, r3
 80076c4:	f640 730f 	movw	r3, #3855	; 0xf0f
 80076c8:	400b      	ands	r3, r1
 80076ca:	b299      	uxth	r1, r3
 80076cc:	4b86      	ldr	r3, [pc, #536]	; (80078e8 <USB_EPStartXfer+0x48c>)
 80076ce:	430b      	orrs	r3, r1
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ea:	b29c      	uxth	r4, r3
 80076ec:	f084 0310 	eor.w	r3, r4, #16
 80076f0:	b29c      	uxth	r4, r3
 80076f2:	f084 0320 	eor.w	r3, r4, #32
 80076f6:	b29c      	uxth	r4, r3
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	4b7a      	ldr	r3, [pc, #488]	; (80078ec <USB_EPStartXfer+0x490>)
 8007704:	4323      	orrs	r3, r4
 8007706:	b29b      	uxth	r3, r3
 8007708:	8013      	strh	r3, [r2, #0]
 800770a:	e122      	b.n	8007952 <USB_EPStartXfer+0x4f6>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	429a      	cmp	r2, r3
 8007716:	d909      	bls.n	800772c <USB_EPStartXfer+0x2d0>
    {
      len=ep->maxpacket;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len-=len; 
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	1ad2      	subs	r2, r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	619a      	str	r2, [r3, #24]
 800772a:	e005      	b.n	8007738 <USB_EPStartXfer+0x2dc>
    }
    else
    {
      len=ep->xfer_len;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len =0;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2200      	movs	r2, #0
 8007736:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	7a9b      	ldrb	r3, [r3, #10]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d13b      	bne.n	80077b8 <USB_EPStartXfer+0x35c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007746:	b29b      	uxth	r3, r3
 8007748:	461a      	mov	r2, r3
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	4413      	add	r3, r2
 8007752:	3306      	adds	r3, #6
 8007754:	005a      	lsls	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2b3e      	cmp	r3, #62	; 0x3e
 8007764:	d916      	bls.n	8007794 <USB_EPStartXfer+0x338>
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	847b      	strh	r3, [r7, #34]	; 0x22
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <USB_EPStartXfer+0x320>
 8007776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007778:	3b01      	subs	r3, #1
 800777a:	847b      	strh	r3, [r7, #34]	; 0x22
 800777c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800777e:	029b      	lsls	r3, r3, #10
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e0c3      	b.n	800791c <USB_EPStartXfer+0x4c0>
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	847b      	strh	r3, [r7, #34]	; 0x22
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <USB_EPStartXfer+0x34e>
 80077a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077a6:	3301      	adds	r3, #1
 80077a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80077aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	e0b1      	b.n	800791c <USB_EPStartXfer+0x4c0>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d13b      	bne.n	8007838 <USB_EPStartXfer+0x3dc>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4413      	add	r3, r2
 80077d2:	3302      	adds	r3, #2
 80077d4:	005a      	lsls	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	2b3e      	cmp	r3, #62	; 0x3e
 80077e4:	d916      	bls.n	8007814 <USB_EPStartXfer+0x3b8>
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	095b      	lsrs	r3, r3, #5
 80077ea:	843b      	strh	r3, [r7, #32]
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <USB_EPStartXfer+0x3a0>
 80077f6:	8c3b      	ldrh	r3, [r7, #32]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	843b      	strh	r3, [r7, #32]
 80077fc:	8c3b      	ldrh	r3, [r7, #32]
 80077fe:	029b      	lsls	r3, r3, #10
 8007800:	b29b      	uxth	r3, r3
 8007802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800780a:	b29b      	uxth	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e027      	b.n	8007864 <USB_EPStartXfer+0x408>
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	085b      	lsrs	r3, r3, #1
 8007818:	843b      	strh	r3, [r7, #32]
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <USB_EPStartXfer+0x3ce>
 8007824:	8c3b      	ldrh	r3, [r7, #32]
 8007826:	3301      	adds	r3, #1
 8007828:	843b      	strh	r3, [r7, #32]
 800782a:	8c3b      	ldrh	r3, [r7, #32]
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	b29b      	uxth	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e015      	b.n	8007864 <USB_EPStartXfer+0x408>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d111      	bne.n	8007864 <USB_EPStartXfer+0x408>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007846:	b29b      	uxth	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	4413      	add	r3, r2
 8007852:	3302      	adds	r3, #2
 8007854:	005a      	lsls	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800785e:	461a      	mov	r2, r3
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d141      	bne.n	80078f0 <USB_EPStartXfer+0x494>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007872:	b29b      	uxth	r3, r3
 8007874:	461a      	mov	r2, r3
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4413      	add	r3, r2
 800787e:	3306      	adds	r3, #6
 8007880:	005a      	lsls	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800788a:	60bb      	str	r3, [r7, #8]
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	2b3e      	cmp	r3, #62	; 0x3e
 8007890:	d916      	bls.n	80078c0 <USB_EPStartXfer+0x464>
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	83fb      	strh	r3, [r7, #30]
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d102      	bne.n	80078a8 <USB_EPStartXfer+0x44c>
 80078a2:	8bfb      	ldrh	r3, [r7, #30]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	83fb      	strh	r3, [r7, #30]
 80078a8:	8bfb      	ldrh	r3, [r7, #30]
 80078aa:	029b      	lsls	r3, r3, #10
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	e02d      	b.n	800791c <USB_EPStartXfer+0x4c0>
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	83fb      	strh	r3, [r7, #30]
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <USB_EPStartXfer+0x47a>
 80078d0:	8bfb      	ldrh	r3, [r7, #30]
 80078d2:	3301      	adds	r3, #1
 80078d4:	83fb      	strh	r3, [r7, #30]
 80078d6:	8bfb      	ldrh	r3, [r7, #30]
 80078d8:	029b      	lsls	r3, r3, #10
 80078da:	b29b      	uxth	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e01b      	b.n	800791c <USB_EPStartXfer+0x4c0>
 80078e4:	ffff80c0 	.word	0xffff80c0
 80078e8:	ffffc080 	.word	0xffffc080
 80078ec:	ffff8080 	.word	0xffff8080
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d111      	bne.n	800791c <USB_EPStartXfer+0x4c0>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4413      	add	r3, r2
 800790a:	3302      	adds	r3, #2
 800790c:	005a      	lsls	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007916:	461a      	mov	r2, r3
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800792e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007932:	b29c      	uxth	r4, r3
 8007934:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007938:	b29c      	uxth	r4, r3
 800793a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800793e:	b29c      	uxth	r4, r3
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	441a      	add	r2, r3
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <USB_EPStartXfer+0x500>)
 800794c:	4323      	orrs	r3, r4
 800794e:	b29b      	uxth	r3, r3
 8007950:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3734      	adds	r7, #52	; 0x34
 8007958:	46bd      	mov	sp, r7
 800795a:	bd90      	pop	{r4, r7, pc}
 800795c:	ffff8080 	.word	0xffff8080

08007960 <USB_WritePacket>:
  * @param  ch_ep_num : endpoint or host channel number
  * @param  len : Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_TypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4611      	mov	r1, r2
 800796c:	461a      	mov	r2, r3
 800796e:	460b      	mov	r3, r1
 8007970:	71fb      	strb	r3, [r7, #7]
 8007972:	4613      	mov	r3, r2
 8007974:	80bb      	strh	r3, [r7, #4]
  UNUSED(len);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr

08007982 <USB_ReadPacket>:
  * @param  dest : destination pointer
  * @param  len : Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_TypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	4613      	mov	r3, r2
 800798e:	80fb      	strh	r3, [r7, #6]
  UNUSED(len);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return ((void *)NULL);
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr

0800799c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800799c:	b490      	push	{r4, r7}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  if (ep->num == 0)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d118      	bne.n	80079e0 <USB_EPSetStall+0x44>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80079c0:	401c      	ands	r4, r3
 80079c2:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 80079c6:	f084 0410 	eor.w	r4, r4, #16
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	441a      	add	r2, r3
 80079d4:	b2a1      	uxth	r1, r4
 80079d6:	4b20      	ldr	r3, [pc, #128]	; (8007a58 <USB_EPSetStall+0xbc>)
 80079d8:	430b      	orrs	r3, r1
 80079da:	b29b      	uxth	r3, r3
 80079dc:	8013      	strh	r3, [r2, #0]
 80079de:	e034      	b.n	8007a4a <USB_EPSetStall+0xae>
  }
  else
  {
    if (ep->is_in)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d018      	beq.n	8007a1a <USB_EPSetStall+0x7e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079fe:	b29c      	uxth	r4, r3
 8007a00:	f084 0310 	eor.w	r3, r4, #16
 8007a04:	b29c      	uxth	r4, r3
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	441a      	add	r2, r3
 8007a10:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <USB_EPSetStall+0xbc>)
 8007a12:	4323      	orrs	r3, r4
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	8013      	strh	r3, [r2, #0]
 8007a18:	e017      	b.n	8007a4a <USB_EPSetStall+0xae>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a30:	b29c      	uxth	r4, r3
 8007a32:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007a36:	b29c      	uxth	r4, r3
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	441a      	add	r2, r3
 8007a42:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <USB_EPSetStall+0xbc>)
 8007a44:	4323      	orrs	r3, r4
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc90      	pop	{r4, r7}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	ffff8080 	.word	0xffff8080

08007a5c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a5c:	b490      	push	{r4, r7}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  if (ep->is_in)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d03a      	beq.n	8007ae4 <USB_EPClearStall+0x88>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d013      	beq.n	8007aac <USB_EPClearStall+0x50>
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	441a      	add	r2, r3
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b299      	uxth	r1, r3
 8007a9c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007aa0:	400b      	ands	r3, r1
 8007aa2:	b299      	uxth	r1, r3
 8007aa4:	4b2f      	ldr	r3, [pc, #188]	; (8007b64 <USB_EPClearStall+0x108>)
 8007aa6:	430b      	orrs	r3, r1
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac2:	b29c      	uxth	r4, r3
 8007ac4:	f084 0310 	eor.w	r3, r4, #16
 8007ac8:	b29c      	uxth	r4, r3
 8007aca:	f084 0320 	eor.w	r3, r4, #32
 8007ace:	b29c      	uxth	r4, r3
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	441a      	add	r2, r3
 8007ada:	4b23      	ldr	r3, [pc, #140]	; (8007b68 <USB_EPClearStall+0x10c>)
 8007adc:	4323      	orrs	r3, r4
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	8013      	strh	r3, [r2, #0]
 8007ae2:	e039      	b.n	8007b58 <USB_EPClearStall+0xfc>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d013      	beq.n	8007b22 <USB_EPClearStall+0xc6>
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	441a      	add	r2, r3
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b299      	uxth	r1, r3
 8007b12:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007b16:	400b      	ands	r3, r1
 8007b18:	b299      	uxth	r1, r3
 8007b1a:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <USB_EPClearStall+0x110>)
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b38:	b29c      	uxth	r4, r3
 8007b3a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b3e:	b29c      	uxth	r4, r3
 8007b40:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007b44:	b29c      	uxth	r4, r3
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	441a      	add	r2, r3
 8007b50:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <USB_EPClearStall+0x10c>)
 8007b52:	4323      	orrs	r3, r4
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc90      	pop	{r4, r7}
 8007b62:	4770      	bx	lr
 8007b64:	ffff80c0 	.word	0xffff80c0
 8007b68:	ffff8080 	.word	0xffff8080
 8007b6c:	ffffc080 	.word	0xffffc080

08007b70 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* clear interrupt status register */
  USBx->ISTR = 0;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bc80      	pop	{r7}
 8007b9a:	4770      	bx	lr

08007b9c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  if(address == 0) 
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2280      	movs	r2, #128	; 0x80
 8007bb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr

08007bc2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr

08007bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr

08007bea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b085      	sub	sp, #20
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->ISTR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c00:	68fb      	ldr	r3, [r7, #12]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_TypeDef *USBx)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return (0);
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_TypeDef *USBx)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(USBx);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return (0);
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_TypeDef *USBx , uint8_t epnum)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return (0);
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr

08007c4c <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_TypeDef *USBx , uint8_t epnum)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return (0);
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <USB_ClearInterrupts>:
  * @param  USBx : Selected device
  * @param  interrupt : interrupt flag
  * @retval None
  */
void  USB_ClearInterrupts (USB_TypeDef *USBx, uint32_t interrupt)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  UNUSED(interrupt);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bc80      	pop	{r7}
 8007c76:	4770      	bx	lr

08007c78 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr

08007c8e <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  USBx->CNTR |= USB_CNTR_RESUME;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f043 0310 	orr.w	r3, r3, #16
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup : de-active remote wakeup signalling
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  USBx->CNTR &= ~(USB_CNTR_RESUME);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f023 0310 	bic.w	r3, r3, #16
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b08b      	sub	sp, #44	; 0x2c
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	4611      	mov	r1, r2
 8007cea:	461a      	mov	r2, r3
 8007cec:	460b      	mov	r3, r1
 8007cee:	80fb      	strh	r3, [r7, #6]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8007cf4:	88bb      	ldrh	r3, [r7, #4]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	105b      	asrs	r3, r3, #1
 8007cfa:	61fb      	str	r3, [r7, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
 8007d04:	2300      	movs	r3, #0
 8007d06:	617b      	str	r3, [r7, #20]
  uint16_t *pdwVal = NULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	623b      	str	r3, [r7, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	461a      	mov	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d1a:	623b      	str	r3, [r7, #32]
  for (index = nbytes; index != 0; index--)
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d20:	e01b      	b.n	8007d5a <USB_WritePMA+0x7c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	461a      	mov	r2, r3
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	1c9a      	adds	r2, r3, #2
 8007d40:	623a      	str	r2, [r7, #32]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	b292      	uxth	r2, r2
 8007d46:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	3302      	adds	r3, #2
 8007d4c:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	3301      	adds	r3, #1
 8007d52:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	3b01      	subs	r3, #1
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e0      	bne.n	8007d22 <USB_WritePMA+0x44>
  }
}
 8007d60:	bf00      	nop
 8007d62:	372c      	adds	r7, #44	; 0x2c
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr

08007d6a <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b089      	sub	sp, #36	; 0x24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	4611      	mov	r1, r2
 8007d76:	461a      	mov	r2, r3
 8007d78:	460b      	mov	r3, r1
 8007d7a:	80fb      	strh	r3, [r7, #6]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	80bb      	strh	r3, [r7, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8007d80:	88bb      	ldrh	r3, [r7, #4]
 8007d82:	3301      	adds	r3, #1
 8007d84:	105b      	asrs	r3, r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
  uint32_t index = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	61fb      	str	r3, [r7, #28]
  uint32_t *pdwVal = NULL;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61bb      	str	r3, [r7, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	461a      	mov	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d9e:	61bb      	str	r3, [r7, #24]
  for (index = nbytes; index != 0; index--)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	e00e      	b.n	8007dc4 <USB_ReadPMA+0x5a>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	60ba      	str	r2, [r7, #8]
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	1d11      	adds	r1, r2, #4
 8007db0:	61b9      	str	r1, [r7, #24]
 8007db2:	6812      	ldr	r2, [r2, #0]
 8007db4:	b292      	uxth	r2, r2
 8007db6:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	60bb      	str	r3, [r7, #8]
  for (index = nbytes; index != 0; index--)
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1ed      	bne.n	8007da6 <USB_ReadPMA+0x3c>
  }
}
 8007dca:	bf00      	nop
 8007dcc:	3724      	adds	r7, #36	; 0x24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7c1b      	ldrb	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10e      	bne.n	8007e0a <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8007dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007df0:	2202      	movs	r2, #2
 8007df2:	2181      	movs	r1, #129	; 0x81
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f002 f9db 	bl	800a1b0 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8007dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dfe:	2202      	movs	r2, #2
 8007e00:	2101      	movs	r1, #1
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f002 f9d4 	bl	800a1b0 <USBD_LL_OpenEP>
 8007e08:	e00b      	b.n	8007e22 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8007e0a:	2340      	movs	r3, #64	; 0x40
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	2181      	movs	r1, #129	; 0x81
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f002 f9cd 	bl	800a1b0 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8007e16:	2340      	movs	r3, #64	; 0x40
 8007e18:	2202      	movs	r2, #2
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f002 f9c7 	bl	800a1b0 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8007e22:	2308      	movs	r3, #8
 8007e24:	2203      	movs	r2, #3
 8007e26:	2182      	movs	r1, #130	; 0x82
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f002 f9c1 	bl	800a1b0 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007e2e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e32:	f002 fbc1 	bl	800a5b8 <USBD_static_malloc>
 8007e36:	4602      	mov	r2, r0
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8007e48:	2301      	movs	r3, #1
 8007e4a:	73fb      	strb	r3, [r7, #15]
 8007e4c:	e026      	b.n	8007e9c <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e54:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	7c1b      	ldrb	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e82:	2101      	movs	r1, #1
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f002 fb3f 	bl	800a508 <USBD_LL_PrepareReceive>
 8007e8a:	e007      	b.n	8007e9c <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e92:	2340      	movs	r3, #64	; 0x40
 8007e94:	2101      	movs	r1, #1
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f002 fb36 	bl	800a508 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8007eb6:	2181      	movs	r1, #129	; 0x81
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f002 f9b7 	bl	800a22c <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f002 f9b3 	bl	800a22c <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8007ec6:	2182      	movs	r1, #130	; 0x82
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f002 f9af 	bl	800a22c <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00e      	beq.n	8007ef6 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f002 fb71 	bl	800a5d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007f10:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d03a      	beq.n	8007f94 <USBD_CDC_Setup+0x94>
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d000      	beq.n	8007f24 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8007f22:	e043      	b.n	8007fac <USBD_CDC_Setup+0xac>
    if (req->wLength)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	88db      	ldrh	r3, [r3, #6]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d029      	beq.n	8007f80 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b25b      	sxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	da11      	bge.n	8007f5a <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007f42:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	88d2      	ldrh	r2, [r2, #6]
 8007f48:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8007f4a:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	88db      	ldrh	r3, [r3, #6]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 f878 	bl	8009048 <USBD_CtlSendData>
    break;
 8007f58:	e029      	b.n	8007fae <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	785a      	ldrb	r2, [r3, #1]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	88db      	ldrh	r3, [r3, #6]
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8007f70:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88db      	ldrh	r3, [r3, #6]
 8007f76:	461a      	mov	r2, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 f893 	bl	80090a4 <USBD_CtlPrepareRx>
    break;
 8007f7e:	e016      	b.n	8007fae <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	7850      	ldrb	r0, [r2, #1]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	4798      	blx	r3
    break;
 8007f92:	e00c      	b.n	8007fae <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	785b      	ldrb	r3, [r3, #1]
 8007f98:	2b0a      	cmp	r3, #10
 8007f9a:	d001      	beq.n	8007fa0 <USBD_CDC_Setup+0xa0>
 8007f9c:	2b0b      	cmp	r3, #11
      break;
 8007f9e:	e005      	b.n	8007fac <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	4905      	ldr	r1, [pc, #20]	; (8007fb8 <USBD_CDC_Setup+0xb8>)
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 f84f 	bl	8009048 <USBD_CtlSendData>
      break;
 8007faa:	bf00      	nop
    break;
 8007fac:	bf00      	nop
  }
  return USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	200001ec 	.word	0x200001ec

08007fbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007fce:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e000      	b.n	8007fe8 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8007fe6:	2302      	movs	r3, #2
  }
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr

08007ff2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008004:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008006:	78fb      	ldrb	r3, [r7, #3]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f002 fab6 	bl	800a57c <USBD_LL_GetRxDataSize>
 8008010:	4602      	mov	r2, r0
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00d      	beq.n	800803e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008036:	4611      	mov	r1, r2
 8008038:	4798      	blx	r3

    return USBD_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e000      	b.n	8008040 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800803e:	2302      	movs	r3, #2
  }
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008056:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d015      	beq.n	800808e <USBD_CDC_EP0_RxReady+0x46>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008068:	2bff      	cmp	r3, #255	; 0xff
 800806a:	d010      	beq.n	800808e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800807a:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008082:	b292      	uxth	r2, r2
 8008084:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	22ff      	movs	r2, #255	; 0xff
 800808a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2243      	movs	r2, #67	; 0x43
 80080a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80080a6:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000094 	.word	0x20000094

080080b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2243      	movs	r2, #67	; 0x43
 80080c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80080c6:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000050 	.word	0x20000050

080080d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2243      	movs	r2, #67	; 0x43
 80080e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80080e6:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	200000d8 	.word	0x200000d8

080080f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	220a      	movs	r2, #10
 8008104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008106:	4b03      	ldr	r3, [pc, #12]	; (8008114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000000c 	.word	0x2000000c

08008118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008122:	2302      	movs	r3, #2
 8008124:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d005      	beq.n	8008138 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr

08008144 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008158:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008186:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80081aa:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d017      	beq.n	80081e6 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d110      	bne.n	80081e2 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	2181      	movs	r1, #129	; 0x81
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f002 f95b 	bl	800a494 <USBD_LL_Transmit>
      
      return USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	e002      	b.n	80081e8 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e000      	b.n	80081e8 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 80081e6:	2302      	movs	r3, #2
  }
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80081fe:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008206:	2b00      	cmp	r3, #0
 8008208:	d017      	beq.n	800823a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	7c1b      	ldrb	r3, [r3, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800821c:	2101      	movs	r1, #1
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f002 f972 	bl	800a508 <USBD_LL_PrepareReceive>
 8008224:	e007      	b.n	8008236 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800822c:	2340      	movs	r3, #64	; 0x40
 800822e:	2101      	movs	r1, #1
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f002 f969 	bl	800a508 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	e000      	b.n	800823c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800823a:	2302      	movs	r3, #2
  }
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8008258:	2302      	movs	r3, #2
 800825a:	e01a      	b.n	8008292 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	79fa      	ldrb	r2, [r7, #7]
 8008288:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f001 fe98 	bl	8009fc0 <USBD_LL_Init>
  
  return USBD_OK; 
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6852      	ldr	r2, [r2, #4]
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	4611      	mov	r1, r2
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 ff44 	bl	800a14c <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 fedd 	bl	800a084 <USBD_LL_DeInit>
  
  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d006      	beq.n	80082f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
 80082f4:	e001      	b.n	80082fa <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80082f6:	2302      	movs	r3, #2
 80082f8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr

08008306 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 feea 	bl	800a0e8 <USBD_LL_Start>
  
  return USBD_OK;  
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	6852      	ldr	r2, [r2, #4]
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	4611      	mov	r1, r2
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 ff06 	bl	800a14c <USBD_LL_Stop>
  
  return USBD_OK;  
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr

0800835e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800836a:	2302      	movs	r3, #2
 800836c:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00c      	beq.n	8008392 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	4611      	mov	r1, r2
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	4798      	blx	r3
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8008392:	7bfb      	ldrb	r3, [r7, #15]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	78fa      	ldrb	r2, [r7, #3]
 80083b2:	4611      	mov	r1, r2
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
  return USBD_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fd90 	bl	8008efa <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d00b      	beq.n	8008416 <USBD_LL_SetupStage+0x54>
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d011      	beq.n	8008426 <USBD_LL_SetupStage+0x64>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d117      	bne.n	8008436 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f9c0 	bl	8008794 <USBD_StdDevReq>
    break;
 8008414:	e01a      	b.n	800844c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa07 	bl	8008832 <USBD_StdItfReq>
    break;
 8008424:	e012      	b.n	800844c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa32 	bl	8008898 <USBD_StdEPReq>
    break;
 8008434:	e00a      	b.n	800844c <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800843c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008440:	b2db      	uxtb	r3, r3
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 ff5d 	bl	800a304 <USBD_LL_StallEP>
    break;
 800844a:	bf00      	nop
  }  
  return USBD_OK;  
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b086      	sub	sp, #24
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	460b      	mov	r3, r1
 8008460:	607a      	str	r2, [r7, #4]
 8008462:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d138      	bne.n	80084dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008470:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8008478:	2b03      	cmp	r3, #3
 800847a:	d142      	bne.n	8008502 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	429a      	cmp	r2, r3
 8008486:	d914      	bls.n	80084b2 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	1ad2      	subs	r2, r2, r3
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	4293      	cmp	r3, r2
 80084a0:	bf28      	it	cs
 80084a2:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	6879      	ldr	r1, [r7, #4]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 fe18 	bl	80090e0 <USBD_CtlContinueRx>
 80084b0:	e027      	b.n	8008502 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d105      	bne.n	80084d4 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 fe15 	bl	8009104 <USBD_CtlSendStatus>
 80084da:	e012      	b.n	8008502 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00c      	beq.n	8008502 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d107      	bne.n	8008502 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	7afa      	ldrb	r2, [r7, #11]
 80084fc:	4611      	mov	r1, r2
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	4798      	blx	r3
  }  
  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	460b      	mov	r3, r1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800851a:	7afb      	ldrb	r3, [r7, #11]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d16c      	bne.n	80085fa <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3314      	adds	r3, #20
 8008524:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800852c:	2b02      	cmp	r3, #2
 800852e:	d157      	bne.n	80085e0 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	429a      	cmp	r2, r3
 800853a:	d915      	bls.n	8008568 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	1ad2      	subs	r2, r2, r3
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800854e:	b29b      	uxth	r3, r3
 8008550:	461a      	mov	r2, r3
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fd93 	bl	8009080 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800855a:	2300      	movs	r3, #0
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f001 ffd1 	bl	800a508 <USBD_LL_PrepareReceive>
 8008566:	e03b      	b.n	80085e0 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	68d2      	ldr	r2, [r2, #12]
 8008570:	fbb3 f1f2 	udiv	r1, r3, r2
 8008574:	fb02 f201 	mul.w	r2, r2, r1
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d11c      	bne.n	80085b8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8008586:	429a      	cmp	r2, r3
 8008588:	d316      	bcc.n	80085b8 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8008594:	429a      	cmp	r2, r3
 8008596:	d20f      	bcs.n	80085b8 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8008598:	2200      	movs	r2, #0
 800859a:	2100      	movs	r1, #0
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 fd6f 	bl	8009080 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80085aa:	2300      	movs	r3, #0
 80085ac:	2200      	movs	r2, #0
 80085ae:	2100      	movs	r1, #0
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f001 ffa9 	bl	800a508 <USBD_LL_PrepareReceive>
 80085b6:	e013      	b.n	80085e0 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d105      	bne.n	80085da <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fda5 	bl	800912a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d11a      	bne.n	8008620 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fead 	bl	800834a <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80085f8:	e012      	b.n	8008620 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00c      	beq.n	8008620 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 800860c:	2b03      	cmp	r3, #3
 800860e:	d107      	bne.n	8008620 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	7afa      	ldrb	r2, [r7, #11]
 800861a:	4611      	mov	r1, r2
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	4798      	blx	r3
  }  
  return USBD_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008632:	2340      	movs	r3, #64	; 0x40
 8008634:	2200      	movs	r2, #0
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fdb9 	bl	800a1b0 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2240      	movs	r2, #64	; 0x40
 8008642:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8008646:	2340      	movs	r3, #64	; 0x40
 8008648:	2200      	movs	r2, #0
 800864a:	2180      	movs	r1, #128	; 0x80
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 fdaf 	bl	800a1b0 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2240      	movs	r2, #64	; 0x40
 8008656:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6852      	ldr	r2, [r2, #4]
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	4611      	mov	r1, r2
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
 
  
  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr

080086a6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2204      	movs	r2, #4
 80086be:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bc80      	pop	{r7}
 80086cc:	4770      	bx	lr

080086ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr

080086ee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d10b      	bne.n	8008718 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	bc80      	pop	{r7}
 8008738:	4770      	bx	lr

0800873a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr

08008752 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6852      	ldr	r2, [r2, #4]
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	4611      	mov	r1, r2
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	4798      	blx	r3
   
  return USBD_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	d839      	bhi.n	800881e <USBD_StdDevReq+0x8a>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <USBD_StdDevReq+0x1c>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	08008801 	.word	0x08008801
 80087b4:	08008815 	.word	0x08008815
 80087b8:	0800881f 	.word	0x0800881f
 80087bc:	0800880b 	.word	0x0800880b
 80087c0:	0800881f 	.word	0x0800881f
 80087c4:	080087e3 	.word	0x080087e3
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	0800881f 	.word	0x0800881f
 80087d0:	080087f7 	.word	0x080087f7
 80087d4:	080087ed 	.word	0x080087ed
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f934 	bl	8008a48 <USBD_GetDescriptor>
    break;
 80087e0:	e022      	b.n	8008828 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fa22 	bl	8008c2e <USBD_SetAddress>
    break;
 80087ea:	e01d      	b.n	8008828 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa5b 	bl	8008caa <USBD_SetConfig>
    break;
 80087f4:	e018      	b.n	8008828 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fadf 	bl	8008dbc <USBD_GetConfig>
    break;
 80087fe:	e013      	b.n	8008828 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fb0c 	bl	8008e20 <USBD_GetStatus>
    break;
 8008808:	e00e      	b.n	8008828 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fb31 	bl	8008e74 <USBD_SetFeature>
    break;
 8008812:	e009      	b.n	8008828 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8008814:	6839      	ldr	r1, [r7, #0]
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fb47 	bl	8008eaa <USBD_ClrFeature>
    break;
 800881c:	e004      	b.n	8008828 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fba6 	bl	8008f72 <USBD_CtlError>
    break;
 8008826:	bf00      	nop
  }
  
  return ret;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008846:	2b03      	cmp	r3, #3
 8008848:	d11b      	bne.n	8008882 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	889b      	ldrh	r3, [r3, #4]
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b01      	cmp	r3, #1
 8008852:	d811      	bhi.n	8008878 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	88db      	ldrh	r3, [r3, #6]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d110      	bne.n	800888c <USBD_StdItfReq+0x5a>
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10d      	bne.n	800888c <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fc47 	bl	8009104 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8008876:	e009      	b.n	800888c <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fb79 	bl	8008f72 <USBD_CtlError>
    break;
 8008880:	e004      	b.n	800888c <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb74 	bl	8008f72 <USBD_CtlError>
    break;
 800888a:	e000      	b.n	800888e <USBD_StdItfReq+0x5c>
    break;
 800888c:	bf00      	nop
  }
  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	889b      	ldrh	r3, [r3, #4]
 80088aa:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d108      	bne.n	80088ca <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
    
    return USBD_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e0ba      	b.n	8008a40 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d039      	beq.n	8008946 <USBD_StdEPReq+0xae>
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d002      	beq.n	80088dc <USBD_StdEPReq+0x44>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d06b      	beq.n	80089b2 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 80088da:	e0b0      	b.n	8008a3e <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d002      	beq.n	80088ec <USBD_StdEPReq+0x54>
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d00c      	beq.n	8008904 <USBD_StdEPReq+0x6c>
 80088ea:	e025      	b.n	8008938 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d027      	beq.n	8008942 <USBD_StdEPReq+0xaa>
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b80      	cmp	r3, #128	; 0x80
 80088f6:	d024      	beq.n	8008942 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fd01 	bl	800a304 <USBD_LL_StallEP>
      break;	
 8008902:	e01e      	b.n	8008942 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	885b      	ldrh	r3, [r3, #2]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d007      	beq.n	8008922 <USBD_StdEPReq+0x8a>
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b80      	cmp	r3, #128	; 0x80
 8008916:	d004      	beq.n	8008922 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fcf1 	bl	800a304 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fbe7 	bl	8009104 <USBD_CtlSendStatus>
      break;
 8008936:	e005      	b.n	8008944 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fb19 	bl	8008f72 <USBD_CtlError>
      break;    
 8008940:	e000      	b.n	8008944 <USBD_StdEPReq+0xac>
      break;	
 8008942:	bf00      	nop
    break;
 8008944:	e07b      	b.n	8008a3e <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800894c:	2b02      	cmp	r3, #2
 800894e:	d002      	beq.n	8008956 <USBD_StdEPReq+0xbe>
 8008950:	2b03      	cmp	r3, #3
 8008952:	d00c      	beq.n	800896e <USBD_StdEPReq+0xd6>
 8008954:	e024      	b.n	80089a0 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d026      	beq.n	80089aa <USBD_StdEPReq+0x112>
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b80      	cmp	r3, #128	; 0x80
 8008960:	d023      	beq.n	80089aa <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 fccc 	bl	800a304 <USBD_LL_StallEP>
      break;	
 800896c:	e01d      	b.n	80089aa <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d11b      	bne.n	80089ae <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fcf3 	bl	800a370 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fbb3 	bl	8009104 <USBD_CtlSendStatus>
      break;
 800899e:	e006      	b.n	80089ae <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fae5 	bl	8008f72 <USBD_CtlError>
      break;    
 80089a8:	e002      	b.n	80089b0 <USBD_StdEPReq+0x118>
      break;	
 80089aa:	bf00      	nop
 80089ac:	e047      	b.n	8008a3e <USBD_StdEPReq+0x1a6>
      break;
 80089ae:	bf00      	nop
    break;
 80089b0:	e045      	b.n	8008a3e <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d002      	beq.n	80089c2 <USBD_StdEPReq+0x12a>
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d00b      	beq.n	80089d8 <USBD_StdEPReq+0x140>
 80089c0:	e036      	b.n	8008a30 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d036      	beq.n	8008a3a <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 fc97 	bl	800a304 <USBD_LL_StallEP>
      break;	
 80089d6:	e030      	b.n	8008a3a <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80089d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da08      	bge.n	80089f2 <USBD_StdEPReq+0x15a>
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e6:	3301      	adds	r3, #1
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	3304      	adds	r3, #4
 80089f0:	e007      	b.n	8008a02 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80089f8:	3310      	adds	r3, #16
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	4413      	add	r3, r2
 8008a00:	3304      	adds	r3, #4
 8008a02:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fce7 	bl	800a3dc <USBD_LL_IsStallEP>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	e002      	b.n	8008a22 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8008a22:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8008a24:	2202      	movs	r2, #2
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fb0d 	bl	8009048 <USBD_CtlSendData>
      break;
 8008a2e:	e005      	b.n	8008a3c <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa9d 	bl	8008f72 <USBD_CtlError>
      break;
 8008a38:	e000      	b.n	8008a3c <USBD_StdEPReq+0x1a4>
      break;	
 8008a3a:	bf00      	nop
    break;
 8008a3c:	bf00      	nop
  }
  return ret;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	885b      	ldrh	r3, [r3, #2]
 8008a56:	0a1b      	lsrs	r3, r3, #8
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	2b06      	cmp	r3, #6
 8008a5e:	f200 80c9 	bhi.w	8008bf4 <USBD_GetDescriptor+0x1ac>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <USBD_GetDescriptor+0x20>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a85 	.word	0x08008a85
 8008a6c:	08008a9d 	.word	0x08008a9d
 8008a70:	08008add 	.word	0x08008add
 8008a74:	08008bf5 	.word	0x08008bf5
 8008a78:	08008bf5 	.word	0x08008bf5
 8008a7c:	08008ba1 	.word	0x08008ba1
 8008a80:	08008bc7 	.word	0x08008bc7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	7c12      	ldrb	r2, [r2, #16]
 8008a90:	f107 010a 	add.w	r1, r7, #10
 8008a94:	4610      	mov	r0, r2
 8008a96:	4798      	blx	r3
 8008a98:	60f8      	str	r0, [r7, #12]
    break;
 8008a9a:	e0b0      	b.n	8008bfe <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	7c1b      	ldrb	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10d      	bne.n	8008ac0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aac:	f107 020a 	add.w	r2, r7, #10
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	2202      	movs	r2, #2
 8008abc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008abe:	e09e      	b.n	8008bfe <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	f107 020a 	add.w	r2, r7, #10
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	701a      	strb	r2, [r3, #0]
    break;
 8008ada:	e090      	b.n	8008bfe <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	885b      	ldrh	r3, [r3, #2]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b05      	cmp	r3, #5
 8008ae4:	d856      	bhi.n	8008b94 <USBD_GetDescriptor+0x14c>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <USBD_GetDescriptor+0xa4>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b05 	.word	0x08008b05
 8008af0:	08008b1d 	.word	0x08008b1d
 8008af4:	08008b35 	.word	0x08008b35
 8008af8:	08008b4d 	.word	0x08008b4d
 8008afc:	08008b65 	.word	0x08008b65
 8008b00:	08008b7d 	.word	0x08008b7d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	7c12      	ldrb	r2, [r2, #16]
 8008b10:	f107 010a 	add.w	r1, r7, #10
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
      break;
 8008b1a:	e040      	b.n	8008b9e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	7c12      	ldrb	r2, [r2, #16]
 8008b28:	f107 010a 	add.w	r1, r7, #10
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4798      	blx	r3
 8008b30:	60f8      	str	r0, [r7, #12]
      break;
 8008b32:	e034      	b.n	8008b9e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	7c12      	ldrb	r2, [r2, #16]
 8008b40:	f107 010a 	add.w	r1, r7, #10
 8008b44:	4610      	mov	r0, r2
 8008b46:	4798      	blx	r3
 8008b48:	60f8      	str	r0, [r7, #12]
      break;
 8008b4a:	e028      	b.n	8008b9e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	7c12      	ldrb	r2, [r2, #16]
 8008b58:	f107 010a 	add.w	r1, r7, #10
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	60f8      	str	r0, [r7, #12]
      break;
 8008b62:	e01c      	b.n	8008b9e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 010a 	add.w	r1, r7, #10
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
      break;
 8008b7a:	e010      	b.n	8008b9e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	7c12      	ldrb	r2, [r2, #16]
 8008b88:	f107 010a 	add.w	r1, r7, #10
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	60f8      	str	r0, [r7, #12]
      break;
 8008b92:	e004      	b.n	8008b9e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f9eb 	bl	8008f72 <USBD_CtlError>
      return;
 8008b9c:	e044      	b.n	8008c28 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8008b9e:	e02e      	b.n	8008bfe <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	7c1b      	ldrb	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb0:	f107 020a 	add.w	r2, r7, #10
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	60f8      	str	r0, [r7, #12]
      break;
 8008bba:	e020      	b.n	8008bfe <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9d7 	bl	8008f72 <USBD_CtlError>
      return;
 8008bc4:	e030      	b.n	8008c28 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	7c1b      	ldrb	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10d      	bne.n	8008bea <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	f107 020a 	add.w	r2, r7, #10
 8008bda:	4610      	mov	r0, r2
 8008bdc:	4798      	blx	r3
 8008bde:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	2207      	movs	r2, #7
 8008be6:	701a      	strb	r2, [r3, #0]
      break; 
 8008be8:	e009      	b.n	8008bfe <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f9c0 	bl	8008f72 <USBD_CtlError>
      return;
 8008bf2:	e019      	b.n	8008c28 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f9bb 	bl	8008f72 <USBD_CtlError>
    return;
 8008bfc:	e014      	b.n	8008c28 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8008bfe:	897b      	ldrh	r3, [r7, #10]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d011      	beq.n	8008c28 <USBD_GetDescriptor+0x1e0>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	88db      	ldrh	r3, [r3, #6]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	88da      	ldrh	r2, [r3, #6]
 8008c10:	897b      	ldrh	r3, [r7, #10]
 8008c12:	4293      	cmp	r3, r2
 8008c14:	bf28      	it	cs
 8008c16:	4613      	movcs	r3, r2
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8008c1c:	897b      	ldrh	r3, [r7, #10]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68f9      	ldr	r1, [r7, #12]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fa10 	bl	8009048 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	889b      	ldrh	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d12c      	bne.n	8008c9a <USBD_SetAddress+0x6c>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	88db      	ldrh	r3, [r3, #6]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d128      	bne.n	8008c9a <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	885b      	ldrh	r3, [r3, #2]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c52:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d104      	bne.n	8008c68 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f986 	bl	8008f72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008c66:	e01c      	b.n	8008ca2 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7bfa      	ldrb	r2, [r7, #15]
 8008c6c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 fbd6 	bl	800a426 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa42 	bl	8009104 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d004      	beq.n	8008c90 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008c8e:	e008      	b.n	8008ca2 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008c98:	e003      	b.n	8008ca2 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f968 	bl	8008f72 <USBD_CtlError>
  } 
}
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	885b      	ldrh	r3, [r3, #2]
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	4b3f      	ldr	r3, [pc, #252]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008cbc:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8008cbe:	4b3e      	ldr	r3, [pc, #248]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d904      	bls.n	8008cd0 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f952 	bl	8008f72 <USBD_CtlError>
 8008cce:	e06f      	b.n	8008db0 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d002      	beq.n	8008ce0 <USBD_SetConfig+0x36>
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d023      	beq.n	8008d26 <USBD_SetConfig+0x7c>
 8008cde:	e062      	b.n	8008da6 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8008ce0:	4b35      	ldr	r3, [pc, #212]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01a      	beq.n	8008d1e <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8008ce8:	4b33      	ldr	r3, [pc, #204]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2203      	movs	r2, #3
 8008cf6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8008cfa:	4b2f      	ldr	r3, [pc, #188]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fb2c 	bl	800835e <USBD_SetClassConfig>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d104      	bne.n	8008d16 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f92f 	bl	8008f72 <USBD_CtlError>
          return;
 8008d14:	e04c      	b.n	8008db0 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f9f4 	bl	8009104 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8008d1c:	e048      	b.n	8008db0 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f9f0 	bl	8009104 <USBD_CtlSendStatus>
      break;
 8008d24:	e044      	b.n	8008db0 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8008d26:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d112      	bne.n	8008d54 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2202      	movs	r2, #2
 8008d32:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8008d36:	4b20      	ldr	r3, [pc, #128]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8008d40:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff fb28 	bl	800839c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f9d9 	bl	8009104 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008d52:	e02d      	b.n	8008db0 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8008d54:	4b18      	ldr	r3, [pc, #96]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d01d      	beq.n	8008d9e <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff fb16 	bl	800839c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d70:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	461a      	mov	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8008d7a:	4b0f      	ldr	r3, [pc, #60]	; (8008db8 <USBD_SetConfig+0x10e>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff faec 	bl	800835e <USBD_SetClassConfig>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d104      	bne.n	8008d96 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f8ef 	bl	8008f72 <USBD_CtlError>
          return;
 8008d94:	e00c      	b.n	8008db0 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f9b4 	bl	8009104 <USBD_CtlSendStatus>
      break;
 8008d9c:	e008      	b.n	8008db0 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f9b0 	bl	8009104 <USBD_CtlSendStatus>
      break;
 8008da4:	e004      	b.n	8008db0 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f8e2 	bl	8008f72 <USBD_CtlError>
      break;
 8008dae:	bf00      	nop
    }
  }
}
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	200001ed 	.word	0x200001ed

08008dbc <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	88db      	ldrh	r3, [r3, #6]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d004      	beq.n	8008dd8 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f8ce 	bl	8008f72 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008dd6:	e01f      	b.n	8008e18 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d002      	beq.n	8008de8 <USBD_GetConfig+0x2c>
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d00b      	beq.n	8008dfe <USBD_GetConfig+0x42>
 8008de6:	e012      	b.n	8008e0e <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8008df2:	2201      	movs	r2, #1
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f926 	bl	8009048 <USBD_CtlSendData>
      break;
 8008dfc:	e00c      	b.n	8008e18 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8008e02:	2201      	movs	r2, #1
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f91e 	bl	8009048 <USBD_CtlSendData>
      break;
 8008e0c:	e004      	b.n	8008e18 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f8ae 	bl	8008f72 <USBD_CtlError>
      break;
 8008e16:	bf00      	nop
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008e30:	3b02      	subs	r3, #2
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d815      	bhi.n	8008e62 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f043 0202 	orr.w	r2, r3, #2
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8008e56:	2202      	movs	r2, #2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f8f4 	bl	8009048 <USBD_CtlSendData>
                      2);
    break;
 8008e60:	e004      	b.n	8008e6c <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f884 	bl	8008f72 <USBD_CtlError>
    break;
 8008e6a:	bf00      	nop
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	885b      	ldrh	r3, [r3, #2]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d10d      	bne.n	8008ea2 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f931 	bl	8009104 <USBD_CtlSendStatus>
  }

}
 8008ea2:	bf00      	nop
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8008eba:	3b02      	subs	r3, #2
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d812      	bhi.n	8008ee6 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	885b      	ldrh	r3, [r3, #2]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d113      	bne.n	8008ef0 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f910 	bl	8009104 <USBD_CtlSendStatus>
    }
    break;
 8008ee4:	e004      	b.n	8008ef0 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f842 	bl	8008f72 <USBD_CtlError>
    break;
 8008eee:	e000      	b.n	8008ef2 <USBD_ClrFeature+0x48>
    break;
 8008ef0:	bf00      	nop
  }
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781a      	ldrb	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	785a      	ldrb	r2, [r3, #1]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	3302      	adds	r3, #2
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	3303      	adds	r3, #3
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	4413      	add	r3, r2
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	3304      	adds	r3, #4
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	3305      	adds	r3, #5
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	4413      	add	r3, r2
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	3306      	adds	r3, #6
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	3307      	adds	r3, #7
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	021b      	lsls	r3, r3, #8
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	4413      	add	r3, r2
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	80da      	strh	r2, [r3, #6]

}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bc80      	pop	{r7}
 8008f70:	4770      	bx	lr

08008f72 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8008f7c:	2180      	movs	r1, #128	; 0x80
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 f9c0 	bl	800a304 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8008f84:	2100      	movs	r1, #0
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 f9bc 	bl	800a304 <USBD_LL_StallEP>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d033      	beq.n	8009012 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f835 	bl	800901a <USBD_GetLen>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8008fbe:	7dfb      	ldrb	r3, [r7, #23]
 8008fc0:	1c5a      	adds	r2, r3, #1
 8008fc2:	75fa      	strb	r2, [r7, #23]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	8812      	ldrh	r2, [r2, #0]
 8008fce:	b2d2      	uxtb	r2, r2
 8008fd0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	75fa      	strb	r2, [r7, #23]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	2203      	movs	r2, #3
 8008fe0:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8008fe2:	e012      	b.n	800900a <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	75fa      	strb	r2, [r7, #23]
 8008fea:	461a      	mov	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	441a      	add	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	1c59      	adds	r1, r3, #1
 8008ff4:	60f9      	str	r1, [r7, #12]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	75fa      	strb	r2, [r7, #23]
 8009000:	461a      	mov	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	4413      	add	r3, r2
 8009006:	2200      	movs	r2, #0
 8009008:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1e8      	bne.n	8008fe4 <USBD_GetString+0x50>
    }
  } 
}
 8009012:	bf00      	nop
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800901a:	b480      	push	{r7}
 800901c:	b085      	sub	sp, #20
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8009026:	e005      	b.n	8009034 <USBD_GetLen+0x1a>
    {
        len++;
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	3301      	adds	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]
        buf++;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3301      	adds	r3, #1
 8009032:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f5      	bne.n	8009028 <USBD_GetLen+0xe>
    }

    return len;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	bc80      	pop	{r7}
 8009046:	4770      	bx	lr

08009048 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2202      	movs	r2, #2
 800905a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8009064:	88fa      	ldrh	r2, [r7, #6]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800906a:	88fb      	ldrh	r3, [r7, #6]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	2100      	movs	r1, #0
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f001 fa0f 	bl	800a494 <USBD_LL_Transmit>
  
  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800908e:	88fb      	ldrh	r3, [r7, #6]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	2100      	movs	r1, #0
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f001 f9fd 	bl	800a494 <USBD_LL_Transmit>
  
  return USBD_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2203      	movs	r2, #3
 80090b6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80090ba:	88fa      	ldrh	r2, [r7, #6]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80090c2:	88fa      	ldrh	r2, [r7, #6]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80090ca:	88fb      	ldrh	r3, [r7, #6]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	2100      	movs	r1, #0
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f001 fa19 	bl	800a508 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	4613      	mov	r3, r2
 80090ec:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	2100      	movs	r1, #0
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f001 fa07 	bl	800a508 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2204      	movs	r2, #4
 8009110:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8009114:	2300      	movs	r3, #0
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 f9ba 	bl	800a494 <USBD_LL_Transmit>
  
  return USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2205      	movs	r2, #5
 8009136:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800913a:	2300      	movs	r3, #0
 800913c:	2200      	movs	r2, #0
 800913e:	2100      	movs	r1, #0
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 f9e1 	bl	800a508 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_GetRxCount>:
* @param  pdev: device instance
* @param  ep_addr: endpoint address
* @retval Rx Data blength
*/
uint16_t  USBD_GetRxCount (USBD_HandleTypeDef  *pdev , uint8_t ep_addr)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 fa0b 	bl	800a57c <USBD_LL_GetRxDataSize>
 8009166:	4603      	mov	r3, r0
 8009168:	b29b      	uxth	r3, r3
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009178:	f7f6 ffe8 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800917c:	f000 f826 	bl	80091cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009180:	f000 f8ca 	bl	8009318 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  MX_GPIO_InitAnalog();
 8009184:	f000 f928 	bl	80093d8 <MX_GPIO_InitAnalog>
  /* USER CODE END 2 */

  MX_ADC1_Init();
 8009188:	f000 f886 	bl	8009298 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800918c:	f000 fd30 	bl	8009bf0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize custom handles */
  TR_Init(&htr);
 8009190:	480a      	ldr	r0, [pc, #40]	; (80091bc <main+0x48>)
 8009192:	f000 fb23 	bl	80097dc <TR_Init>
  SpikeConv_Init(&hsc);
 8009196:	480a      	ldr	r0, [pc, #40]	; (80091c0 <main+0x4c>)
 8009198:	f000 f938 	bl	800940c <SpikeConv_Init>
  USBComm_Init(&huc);
 800919c:	4809      	ldr	r0, [pc, #36]	; (80091c4 <main+0x50>)
 800919e:	f000 fc9f 	bl	8009ae0 <USBComm_Init>

  HAL_ADC_Start(&hadc1);
 80091a2:	4809      	ldr	r0, [pc, #36]	; (80091c8 <main+0x54>)
 80091a4:	f7f7 fb0a 	bl	80007bc <HAL_ADC_Start>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
  TR_NextState(&htr);
 80091a8:	4804      	ldr	r0, [pc, #16]	; (80091bc <main+0x48>)
 80091aa:	f000 fb3f 	bl	800982c <TR_NextState>
  SpikeConv_NextState(&hsc);
 80091ae:	4804      	ldr	r0, [pc, #16]	; (80091c0 <main+0x4c>)
 80091b0:	f000 f946 	bl	8009440 <SpikeConv_NextState>
  USBComm_NextState(&huc);
 80091b4:	4803      	ldr	r0, [pc, #12]	; (80091c4 <main+0x50>)
 80091b6:	f000 fcaf 	bl	8009b18 <USBComm_NextState>
  TR_NextState(&htr);
 80091ba:	e7f5      	b.n	80091a8 <main+0x34>
 80091bc:	20000484 	.word	0x20000484
 80091c0:	20000470 	.word	0x20000470
 80091c4:	20000478 	.word	0x20000478
 80091c8:	20000440 	.word	0x20000440

080091cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b094      	sub	sp, #80	; 0x50
 80091d0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80091d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80091dc:	2300      	movs	r3, #0
 80091de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80091e0:	2301      	movs	r3, #1
 80091e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091e4:	2302      	movs	r3, #2
 80091e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80091ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80091f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fc fd8d 	bl	8005d18 <HAL_RCC_OscConfig>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009204:	21af      	movs	r1, #175	; 0xaf
 8009206:	4822      	ldr	r0, [pc, #136]	; (8009290 <SystemClock_Config+0xc4>)
 8009208:	f000 f8fa 	bl	8009400 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800920c:	230f      	movs	r3, #15
 800920e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009210:	2302      	movs	r3, #2
 8009212:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009214:	2300      	movs	r3, #0
 8009216:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800921c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800921e:	2300      	movs	r3, #0
 8009220:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8009222:	f107 0314 	add.w	r3, r7, #20
 8009226:	2101      	movs	r1, #1
 8009228:	4618      	mov	r0, r3
 800922a:	f7fc ffd9 	bl	80061e0 <HAL_RCC_ClockConfig>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <SystemClock_Config+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009234:	21bd      	movs	r1, #189	; 0xbd
 8009236:	4816      	ldr	r0, [pc, #88]	; (8009290 <SystemClock_Config+0xc4>)
 8009238:	f000 f8e2 	bl	8009400 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800923c:	2312      	movs	r3, #18
 800923e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8009240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009244:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800924a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800924c:	1d3b      	adds	r3, r7, #4
 800924e:	4618      	mov	r0, r3
 8009250:	f7fd fa88 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 800925a:	21c5      	movs	r1, #197	; 0xc5
 800925c:	480c      	ldr	r0, [pc, #48]	; (8009290 <SystemClock_Config+0xc4>)
 800925e:	f000 f8cf 	bl	8009400 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8009262:	f7fd f963 	bl	800652c <HAL_RCC_GetHCLKFreq>
 8009266:	4602      	mov	r2, r0
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <SystemClock_Config+0xc8>)
 800926a:	fba3 2302 	umull	r2, r3, r3, r2
 800926e:	099b      	lsrs	r3, r3, #6
 8009270:	4618      	mov	r0, r3
 8009272:	f7f9 fa7c 	bl	800276e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009276:	2004      	movs	r0, #4
 8009278:	f7f9 fadc 	bl	8002834 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800927c:	2200      	movs	r2, #0
 800927e:	2100      	movs	r1, #0
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	f7f9 fa35 	bl	80026f2 <HAL_NVIC_SetPriority>
}
 8009288:	bf00      	nop
 800928a:	3750      	adds	r7, #80	; 0x50
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	0800ab20 	.word	0x0800ab20
 8009294:	10624dd3 	.word	0x10624dd3

08009298 <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig;

	/**Common config
	*/
	hadc1.Instance = ADC1;
 800929e:	4b1b      	ldr	r3, [pc, #108]	; (800930c <MX_ADC1_Init+0x74>)
 80092a0:	4a1b      	ldr	r2, [pc, #108]	; (8009310 <MX_ADC1_Init+0x78>)
 80092a2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80092a4:	4b19      	ldr	r3, [pc, #100]	; (800930c <MX_ADC1_Init+0x74>)
 80092a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092aa:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80092ac:	4b17      	ldr	r3, [pc, #92]	; (800930c <MX_ADC1_Init+0x74>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	60da      	str	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80092b2:	4b16      	ldr	r3, [pc, #88]	; (800930c <MX_ADC1_Init+0x74>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	615a      	str	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80092b8:	4b14      	ldr	r3, [pc, #80]	; (800930c <MX_ADC1_Init+0x74>)
 80092ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80092be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80092c0:	4b12      	ldr	r3, [pc, #72]	; (800930c <MX_ADC1_Init+0x74>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80092c6:	4b11      	ldr	r3, [pc, #68]	; (800930c <MX_ADC1_Init+0x74>)
 80092c8:	2204      	movs	r2, #4
 80092ca:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK){
 80092cc:	480f      	ldr	r0, [pc, #60]	; (800930c <MX_ADC1_Init+0x74>)
 80092ce:	f7f7 f8c9 	bl	8000464 <HAL_ADC_Init>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <MX_ADC1_Init+0x48>
		_Error_Handler(__FILE__, __LINE__);
 80092d8:	21e4      	movs	r1, #228	; 0xe4
 80092da:	480e      	ldr	r0, [pc, #56]	; (8009314 <MX_ADC1_Init+0x7c>)
 80092dc:	f000 f890 	bl	8009400 <_Error_Handler>
	}

	/**Configure Regular Channel
	*/
	sConfig.Channel = ADC_CHANNEL_0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80092e4:	2301      	movs	r3, #1
 80092e6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80092e8:	2304      	movs	r3, #4
 80092ea:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80092ec:	1d3b      	adds	r3, r7, #4
 80092ee:	4619      	mov	r1, r3
 80092f0:	4806      	ldr	r0, [pc, #24]	; (800930c <MX_ADC1_Init+0x74>)
 80092f2:	f7f7 ff77 	bl	80011e4 <HAL_ADC_ConfigChannel>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <MX_ADC1_Init+0x6c>
		_Error_Handler(__FILE__, __LINE__);
 80092fc:	21ed      	movs	r1, #237	; 0xed
 80092fe:	4805      	ldr	r0, [pc, #20]	; (8009314 <MX_ADC1_Init+0x7c>)
 8009300:	f000 f87e 	bl	8009400 <_Error_Handler>
	}
}
 8009304:	bf00      	nop
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	20000440 	.word	0x20000440
 8009310:	40012400 	.word	0x40012400
 8009314:	0800ab20 	.word	0x0800ab20

08009318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800931e:	4a2a      	ldr	r2, [pc, #168]	; (80093c8 <MX_GPIO_Init+0xb0>)
 8009320:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <MX_GPIO_Init+0xb0>)
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	f043 0310 	orr.w	r3, r3, #16
 8009328:	6193      	str	r3, [r2, #24]
 800932a:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <MX_GPIO_Init+0xb0>)
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	f003 0310 	and.w	r3, r3, #16
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009336:	4a24      	ldr	r2, [pc, #144]	; (80093c8 <MX_GPIO_Init+0xb0>)
 8009338:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <MX_GPIO_Init+0xb0>)
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	f043 0320 	orr.w	r3, r3, #32
 8009340:	6193      	str	r3, [r2, #24]
 8009342:	4b21      	ldr	r3, [pc, #132]	; (80093c8 <MX_GPIO_Init+0xb0>)
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	60bb      	str	r3, [r7, #8]
 800934c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800934e:	4a1e      	ldr	r2, [pc, #120]	; (80093c8 <MX_GPIO_Init+0xb0>)
 8009350:	4b1d      	ldr	r3, [pc, #116]	; (80093c8 <MX_GPIO_Init+0xb0>)
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	f043 0304 	orr.w	r3, r3, #4
 8009358:	6193      	str	r3, [r2, #24]
 800935a:	4b1b      	ldr	r3, [pc, #108]	; (80093c8 <MX_GPIO_Init+0xb0>)
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	f003 0304 	and.w	r3, r3, #4
 8009362:	607b      	str	r3, [r7, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <MX_GPIO_Init+0xb0>)
 8009368:	4b17      	ldr	r3, [pc, #92]	; (80093c8 <MX_GPIO_Init+0xb0>)
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	f043 0308 	orr.w	r3, r3, #8
 8009370:	6193      	str	r3, [r2, #24]
 8009372:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <MX_GPIO_Init+0xb0>)
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f003 0308 	and.w	r3, r3, #8
 800937a:	603b      	str	r3, [r7, #0]
 800937c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
 800937e:	2200      	movs	r2, #0
 8009380:	f24e 0178 	movw	r1, #57464	; 0xe078
 8009384:	4811      	ldr	r0, [pc, #68]	; (80093cc <MX_GPIO_Init+0xb4>)
 8009386:	f7fb f940 	bl	800460a <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800938a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800938e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009390:	4b0f      	ldr	r3, [pc, #60]	; (80093d0 <MX_GPIO_Init+0xb8>)
 8009392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009394:	2300      	movs	r3, #0
 8009396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009398:	f107 0310 	add.w	r3, r7, #16
 800939c:	4619      	mov	r1, r3
 800939e:	480d      	ldr	r0, [pc, #52]	; (80093d4 <MX_GPIO_Init+0xbc>)
 80093a0:	f7fa fefc 	bl	800419c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3 
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
 80093a4:	f24e 0378 	movw	r3, #57464	; 0xe078
 80093a8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093aa:	2301      	movs	r3, #1
 80093ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80093ae:	2303      	movs	r3, #3
 80093b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093b2:	f107 0310 	add.w	r3, r7, #16
 80093b6:	4619      	mov	r1, r3
 80093b8:	4804      	ldr	r0, [pc, #16]	; (80093cc <MX_GPIO_Init+0xb4>)
 80093ba:	f7fa feef 	bl	800419c <HAL_GPIO_Init>

}
 80093be:	bf00      	nop
 80093c0:	3720      	adds	r7, #32
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	40021000 	.word	0x40021000
 80093cc:	40010c00 	.word	0x40010c00
 80093d0:	10110000 	.word	0x10110000
 80093d4:	40011000 	.word	0x40011000

080093d8 <MX_GPIO_InitAnalog>:

/* USER CODE BEGIN 4 */
static void MX_GPIO_InitAnalog(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports' Clock have already been enabled */

  /*Configure GPIO Analog pins A0-9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80093de:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80093e2:	603b      	str	r3, [r7, #0]
                            |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80093e4:	2303      	movs	r3, #3
 80093e6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093e8:	463b      	mov	r3, r7
 80093ea:	4619      	mov	r1, r3
 80093ec:	4803      	ldr	r0, [pc, #12]	; (80093fc <MX_GPIO_InitAnalog+0x24>)
 80093ee:	f7fa fed5 	bl	800419c <HAL_GPIO_Init>
}
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	40010800 	.word	0x40010800

08009400 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800940a:	e7fe      	b.n	800940a <_Error_Handler+0xa>

0800940c <SpikeConv_Init>:
extern ADC_HandleTypeDef hadc1;
extern TR_HandleTypeDef htr;
extern SpikeConv_HandleTypeDef hsc;
extern MAX_NUM_VALUES;

void SpikeConv_Init(SpikeConv_HandleTypeDef *sc){
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
	sc->state = SC_IDLE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
	sc->spikeGenerated = false;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	705a      	strb	r2, [r3, #1]
	sc->values = calloc(MAX_NUM_VALUES, sizeof(uint16_t));
 8009420:	4b06      	ldr	r3, [pc, #24]	; (800943c <SpikeConv_Init+0x30>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2102      	movs	r1, #2
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f9c6 	bl	800a7b8 <calloc>
 800942c:	4603      	mov	r3, r0
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	605a      	str	r2, [r3, #4]
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	2000011c 	.word	0x2000011c

08009440 <SpikeConv_NextState>:

int SpikeConv_NextState(SpikeConv_HandleTypeDef *sc){
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
	switch(sc->state) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <SpikeConv_NextState+0x16>
 8009450:	2b01      	cmp	r3, #1
 8009452:	d01f      	beq.n	8009494 <SpikeConv_NextState+0x54>
 8009454:	e025      	b.n	80094a2 <SpikeConv_NextState+0x62>
	case SC_IDLE:
		// State machine remains idle until the previous generated spike
		// is successfully transmitted, and the Tactile Reader has read
		// the next sensor data.
		if(!sc->spikeGenerated && !htr.cache_read){
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	785b      	ldrb	r3, [r3, #1]
 800945a:	f083 0301 	eor.w	r3, r3, #1
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d021      	beq.n	80094a8 <SpikeConv_NextState+0x68>
 8009464:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <SpikeConv_NextState+0x74>)
 8009466:	7b5b      	ldrb	r3, [r3, #13]
 8009468:	f083 0301 	eor.w	r3, r3, #1
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d01a      	beq.n	80094a8 <SpikeConv_NextState+0x68>
			memcpy(sc->values, htr.stable_values, 2 * MAX_NUM_VALUES);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6858      	ldr	r0, [r3, #4]
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <SpikeConv_NextState+0x74>)
 8009478:	6899      	ldr	r1, [r3, #8]
 800947a:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <SpikeConv_NextState+0x78>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	461a      	mov	r2, r3
 8009482:	f001 f9d5 	bl	800a830 <memcpy>
			// Change the flag of TactileReader's State Machine
			htr.cache_read = true;
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <SpikeConv_NextState+0x74>)
 8009488:	2201      	movs	r2, #1
 800948a:	735a      	strb	r2, [r3, #13]
			sc->state = SC_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009492:	e009      	b.n	80094a8 <SpikeConv_NextState+0x68>
		/*
		 * Spike encoding algorithm.
		 * Currently, simply returns the same analog input.
		*/

		sc->spikeGenerated = true;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	705a      	strb	r2, [r3, #1]
		sc->state = SC_IDLE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	701a      	strb	r2, [r3, #0]
		break;
 80094a0:	e003      	b.n	80094aa <SpikeConv_NextState+0x6a>
	default:
		// this state should never be reached
		return -1;
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295
 80094a6:	e001      	b.n	80094ac <SpikeConv_NextState+0x6c>
		break;
 80094a8:	bf00      	nop
	}
	return 0;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20000484 	.word	0x20000484
 80094b8:	2000011c 	.word	0x2000011c

080094bc <SpikeConv_Deinit>:

void SpikeConv_Deinit(SpikeConv_HandleTypeDef *sc){
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	// free the memory allocated to buffers
	free(sc->values);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 f9a9 	bl	800a820 <free>
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop

080094d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80094de:	4a25      	ldr	r2, [pc, #148]	; (8009574 <HAL_MspInit+0x9c>)
 80094e0:	4b24      	ldr	r3, [pc, #144]	; (8009574 <HAL_MspInit+0x9c>)
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	f043 0301 	orr.w	r3, r3, #1
 80094e8:	6193      	str	r3, [r2, #24]
 80094ea:	4b22      	ldr	r3, [pc, #136]	; (8009574 <HAL_MspInit+0x9c>)
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094f6:	2003      	movs	r0, #3
 80094f8:	f7f9 f8f0 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80094fc:	2200      	movs	r2, #0
 80094fe:	2100      	movs	r1, #0
 8009500:	f06f 000b 	mvn.w	r0, #11
 8009504:	f7f9 f8f5 	bl	80026f2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009508:	2200      	movs	r2, #0
 800950a:	2100      	movs	r1, #0
 800950c:	f06f 000a 	mvn.w	r0, #10
 8009510:	f7f9 f8ef 	bl	80026f2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8009514:	2200      	movs	r2, #0
 8009516:	2100      	movs	r1, #0
 8009518:	f06f 0009 	mvn.w	r0, #9
 800951c:	f7f9 f8e9 	bl	80026f2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009520:	2200      	movs	r2, #0
 8009522:	2100      	movs	r1, #0
 8009524:	f06f 0004 	mvn.w	r0, #4
 8009528:	f7f9 f8e3 	bl	80026f2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	f06f 0003 	mvn.w	r0, #3
 8009534:	f7f9 f8dd 	bl	80026f2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8009538:	2200      	movs	r2, #0
 800953a:	2100      	movs	r1, #0
 800953c:	f06f 0001 	mvn.w	r0, #1
 8009540:	f7f9 f8d7 	bl	80026f2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009544:	2200      	movs	r2, #0
 8009546:	2100      	movs	r1, #0
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	f7f9 f8d1 	bl	80026f2 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <HAL_MspInit+0xa0>)
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	607b      	str	r3, [r7, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800955c:	607b      	str	r3, [r7, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009564:	607b      	str	r3, [r7, #4]
 8009566:	4a04      	ldr	r2, [pc, #16]	; (8009578 <HAL_MspInit+0xa0>)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	40021000 	.word	0x40021000
 8009578:	40010000 	.word	0x40010000

0800957c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a13      	ldr	r2, [pc, #76]	; (80095d8 <HAL_ADC_MspInit+0x5c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d11f      	bne.n	80095ce <HAL_ADC_MspInit+0x52>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800958e:	4a13      	ldr	r2, [pc, #76]	; (80095dc <HAL_ADC_MspInit+0x60>)
 8009590:	4b12      	ldr	r3, [pc, #72]	; (80095dc <HAL_ADC_MspInit+0x60>)
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009598:	6193      	str	r3, [r2, #24]
 800959a:	4b10      	ldr	r3, [pc, #64]	; (80095dc <HAL_ADC_MspInit+0x60>)
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80095a6:	23ff      	movs	r3, #255	; 0xff
 80095a8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80095aa:	2303      	movs	r3, #3
 80095ac:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095ae:	f107 0310 	add.w	r3, r7, #16
 80095b2:	4619      	mov	r1, r3
 80095b4:	480a      	ldr	r0, [pc, #40]	; (80095e0 <HAL_ADC_MspInit+0x64>)
 80095b6:	f7fa fdf1 	bl	800419c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80095ba:	2303      	movs	r3, #3
 80095bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80095be:	2303      	movs	r3, #3
 80095c0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095c2:	f107 0310 	add.w	r3, r7, #16
 80095c6:	4619      	mov	r1, r3
 80095c8:	4806      	ldr	r0, [pc, #24]	; (80095e4 <HAL_ADC_MspInit+0x68>)
 80095ca:	f7fa fde7 	bl	800419c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80095ce:	bf00      	nop
 80095d0:	3720      	adds	r7, #32
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	40012400 	.word	0x40012400
 80095dc:	40021000 	.word	0x40021000
 80095e0:	40010800 	.word	0x40010800
 80095e4:	40010c00 	.word	0x40010c00

080095e8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]

  if(hadc->Instance==ADC1)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a0a      	ldr	r2, [pc, #40]	; (8009620 <HAL_ADC_MspDeInit+0x38>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d10d      	bne.n	8009616 <HAL_ADC_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80095fa:	4a0a      	ldr	r2, [pc, #40]	; (8009624 <HAL_ADC_MspDeInit+0x3c>)
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <HAL_ADC_MspDeInit+0x3c>)
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009604:	6193      	str	r3, [r2, #24]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009606:	21ff      	movs	r1, #255	; 0xff
 8009608:	4807      	ldr	r0, [pc, #28]	; (8009628 <HAL_ADC_MspDeInit+0x40>)
 800960a:	f7fa ff25 	bl	8004458 <HAL_GPIO_DeInit>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1);
 800960e:	2103      	movs	r1, #3
 8009610:	4806      	ldr	r0, [pc, #24]	; (800962c <HAL_ADC_MspDeInit+0x44>)
 8009612:	f7fa ff21 	bl	8004458 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	40012400 	.word	0x40012400
 8009624:	40021000 	.word	0x40021000
 8009628:	40010800 	.word	0x40010800
 800962c:	40010c00 	.word	0x40010c00

08009630 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009634:	bf00      	nop
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr

0800963c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009640:	e7fe      	b.n	8009640 <HardFault_Handler+0x4>

08009642 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8009642:	b480      	push	{r7}
 8009644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009646:	e7fe      	b.n	8009646 <MemManage_Handler+0x4>

08009648 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8009648:	b480      	push	{r7}
 800964a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800964c:	e7fe      	b.n	800964c <BusFault_Handler+0x4>

0800964e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800964e:	b480      	push	{r7}
 8009650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009652:	e7fe      	b.n	8009652 <UsageFault_Handler+0x4>

08009654 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009658:	bf00      	nop
 800965a:	46bd      	mov	sp, r7
 800965c:	bc80      	pop	{r7}
 800965e:	4770      	bx	lr

08009660 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009664:	bf00      	nop
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr

0800966c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009670:	bf00      	nop
 8009672:	46bd      	mov	sp, r7
 8009674:	bc80      	pop	{r7}
 8009676:	4770      	bx	lr

08009678 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800967c:	f7f6 fdd0 	bl	8000220 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8009680:	f7f9 f8f4 	bl	800286c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009684:	bf00      	nop
 8009686:	bd80      	pop	{r7, pc}

08009688 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800968c:	4802      	ldr	r0, [pc, #8]	; (8009698 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800968e:	f7fb f9b6 	bl	80049fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8009692:	bf00      	nop
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20000e88 	.word	0x20000e88

0800969c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80096a0:	4a15      	ldr	r2, [pc, #84]	; (80096f8 <SystemInit+0x5c>)
 80096a2:	4b15      	ldr	r3, [pc, #84]	; (80096f8 <SystemInit+0x5c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f043 0301 	orr.w	r3, r3, #1
 80096aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80096ac:	4912      	ldr	r1, [pc, #72]	; (80096f8 <SystemInit+0x5c>)
 80096ae:	4b12      	ldr	r3, [pc, #72]	; (80096f8 <SystemInit+0x5c>)
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	4b12      	ldr	r3, [pc, #72]	; (80096fc <SystemInit+0x60>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80096b8:	4a0f      	ldr	r2, [pc, #60]	; (80096f8 <SystemInit+0x5c>)
 80096ba:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <SystemInit+0x5c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80096c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80096c8:	4a0b      	ldr	r2, [pc, #44]	; (80096f8 <SystemInit+0x5c>)
 80096ca:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <SystemInit+0x5c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80096d4:	4a08      	ldr	r2, [pc, #32]	; (80096f8 <SystemInit+0x5c>)
 80096d6:	4b08      	ldr	r3, [pc, #32]	; (80096f8 <SystemInit+0x5c>)
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80096de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80096e0:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <SystemInit+0x5c>)
 80096e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80096e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80096e8:	4b05      	ldr	r3, [pc, #20]	; (8009700 <SystemInit+0x64>)
 80096ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096ee:	609a      	str	r2, [r3, #8]
#endif 
}
 80096f0:	bf00      	nop
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr
 80096f8:	40021000 	.word	0x40021000
 80096fc:	f8ff0000 	.word	0xf8ff0000
 8009700:	e000ed00 	.word	0xe000ed00

08009704 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	2300      	movs	r3, #0
 8009714:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009716:	4b2c      	ldr	r3, [pc, #176]	; (80097c8 <SystemCoreClockUpdate+0xc4>)
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f003 030c 	and.w	r3, r3, #12
 800971e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b04      	cmp	r3, #4
 8009724:	d007      	beq.n	8009736 <SystemCoreClockUpdate+0x32>
 8009726:	2b08      	cmp	r3, #8
 8009728:	d009      	beq.n	800973e <SystemCoreClockUpdate+0x3a>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d133      	bne.n	8009796 <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800972e:	4b27      	ldr	r3, [pc, #156]	; (80097cc <SystemCoreClockUpdate+0xc8>)
 8009730:	4a27      	ldr	r2, [pc, #156]	; (80097d0 <SystemCoreClockUpdate+0xcc>)
 8009732:	601a      	str	r2, [r3, #0]
      break;
 8009734:	e033      	b.n	800979e <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8009736:	4b25      	ldr	r3, [pc, #148]	; (80097cc <SystemCoreClockUpdate+0xc8>)
 8009738:	4a25      	ldr	r2, [pc, #148]	; (80097d0 <SystemCoreClockUpdate+0xcc>)
 800973a:	601a      	str	r2, [r3, #0]
      break;
 800973c:	e02f      	b.n	800979e <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800973e:	4b22      	ldr	r3, [pc, #136]	; (80097c8 <SystemCoreClockUpdate+0xc4>)
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009746:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8009748:	4b1f      	ldr	r3, [pc, #124]	; (80097c8 <SystemCoreClockUpdate+0xc4>)
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009750:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	0c9b      	lsrs	r3, r3, #18
 8009756:	3302      	adds	r3, #2
 8009758:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d106      	bne.n	800976e <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	4a1c      	ldr	r2, [pc, #112]	; (80097d4 <SystemCoreClockUpdate+0xd0>)
 8009764:	fb02 f303 	mul.w	r3, r2, r3
 8009768:	4a18      	ldr	r2, [pc, #96]	; (80097cc <SystemCoreClockUpdate+0xc8>)
 800976a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800976c:	e017      	b.n	800979e <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800976e:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <SystemCoreClockUpdate+0xc4>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d006      	beq.n	8009788 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	4a15      	ldr	r2, [pc, #84]	; (80097d4 <SystemCoreClockUpdate+0xd0>)
 800977e:	fb02 f303 	mul.w	r3, r2, r3
 8009782:	4a12      	ldr	r2, [pc, #72]	; (80097cc <SystemCoreClockUpdate+0xc8>)
 8009784:	6013      	str	r3, [r2, #0]
      break;
 8009786:	e00a      	b.n	800979e <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4a11      	ldr	r2, [pc, #68]	; (80097d0 <SystemCoreClockUpdate+0xcc>)
 800978c:	fb02 f303 	mul.w	r3, r2, r3
 8009790:	4a0e      	ldr	r2, [pc, #56]	; (80097cc <SystemCoreClockUpdate+0xc8>)
 8009792:	6013      	str	r3, [r2, #0]
      break;
 8009794:	e003      	b.n	800979e <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8009796:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <SystemCoreClockUpdate+0xc8>)
 8009798:	4a0d      	ldr	r2, [pc, #52]	; (80097d0 <SystemCoreClockUpdate+0xcc>)
 800979a:	601a      	str	r2, [r3, #0]
      break;
 800979c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800979e:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <SystemCoreClockUpdate+0xc4>)
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	091b      	lsrs	r3, r3, #4
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	4a0b      	ldr	r2, [pc, #44]	; (80097d8 <SystemCoreClockUpdate+0xd4>)
 80097aa:	5cd3      	ldrb	r3, [r2, r3]
 80097ac:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80097ae:	4b07      	ldr	r3, [pc, #28]	; (80097cc <SystemCoreClockUpdate+0xc8>)
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	fa22 f303 	lsr.w	r3, r2, r3
 80097b8:	4a04      	ldr	r2, [pc, #16]	; (80097cc <SystemCoreClockUpdate+0xc8>)
 80097ba:	6013      	str	r3, [r2, #0]
}
 80097bc:	bf00      	nop
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40021000 	.word	0x40021000
 80097cc:	20000120 	.word	0x20000120
 80097d0:	007a1200 	.word	0x007a1200
 80097d4:	003d0900 	.word	0x003d0900
 80097d8:	0800ab30 	.word	0x0800ab30

080097dc <TR_Init>:
/* Global Variables */
extern ADC_HandleTypeDef hadc1;
extern TR_HandleTypeDef htr;
extern MAX_NUM_VALUES;

void TR_Init(TR_HandleTypeDef *tr){
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	tr->state = TR_SETUP;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	701a      	strb	r2, [r3, #0]
	tr->cache_read = true;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	735a      	strb	r2, [r3, #13]
	tr->stable_values = calloc(MAX_NUM_VALUES, sizeof(uint16_t));
 80097f0:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <TR_Init+0x4c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2102      	movs	r1, #2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 ffde 	bl	800a7b8 <calloc>
 80097fc:	4603      	mov	r3, r0
 80097fe:	461a      	mov	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	609a      	str	r2, [r3, #8]
	tr->curr_values = calloc(MAX_NUM_VALUES, sizeof(uint16_t));
 8009804:	4b08      	ldr	r3, [pc, #32]	; (8009828 <TR_Init+0x4c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2102      	movs	r1, #2
 800980a:	4618      	mov	r0, r3
 800980c:	f000 ffd4 	bl	800a7b8 <calloc>
 8009810:	4603      	mov	r3, r0
 8009812:	461a      	mov	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	605a      	str	r2, [r3, #4]
	tr->n_read = 0;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	731a      	strb	r2, [r3, #12]
}
 800981e:	bf00      	nop
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	2000011c 	.word	0x2000011c

0800982c <TR_NextState>:

int TR_NextState(TR_HandleTypeDef *tr){
 800982c:	b590      	push	{r4, r7, lr}
 800982e:	b08b      	sub	sp, #44	; 0x2c
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	switch(tr->state) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2b03      	cmp	r3, #3
 800983a:	f200 812b 	bhi.w	8009a94 <TR_NextState+0x268>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <TR_NextState+0x18>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009855 	.word	0x08009855
 8009848:	080098ad 	.word	0x080098ad
 800984c:	080098fd 	.word	0x080098fd
 8009850:	08009a87 	.word	0x08009a87
	case TR_SETUP: ;
		// Set 'col' to be read
		uint8_t col = tr->n_read/16;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7b1b      	ldrb	r3, [r3, #12]
 8009858:	091b      	lsrs	r3, r3, #4
 800985a:	75fb      	strb	r3, [r7, #23]
		// Set 'col' pin LOW and others HIGH, so that there is non-zero
		// potential difference between the reference voltage and 'col' pin
		// and current flows through it.
		for(int i = 0; i < 4; ++i){
 800985c:	2300      	movs	r3, #0
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
 8009860:	e01d      	b.n	800989e <TR_NextState+0x72>
			if(i == col){
 8009862:	7dfa      	ldrb	r2, [r7, #23]
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	429a      	cmp	r2, r3
 8009868:	d10b      	bne.n	8009882 <TR_NextState+0x56>
				// Column to be read has to be grounded
				HAL_GPIO_WritePin(GPIOB, 1<<(3+i), GPIO_PIN_SET);
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	3303      	adds	r3, #3
 800986e:	2201      	movs	r2, #1
 8009870:	fa02 f303 	lsl.w	r3, r2, r3
 8009874:	b29b      	uxth	r3, r3
 8009876:	2201      	movs	r2, #1
 8009878:	4619      	mov	r1, r3
 800987a:	488c      	ldr	r0, [pc, #560]	; (8009aac <TR_NextState+0x280>)
 800987c:	f7fa fec5 	bl	800460a <HAL_GPIO_WritePin>
 8009880:	e00a      	b.n	8009898 <TR_NextState+0x6c>
			}else{
				// All other columns are set to HIGH
				HAL_GPIO_WritePin(GPIOB, 1<<(3+i), GPIO_PIN_RESET);
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	3303      	adds	r3, #3
 8009886:	2201      	movs	r2, #1
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	b29b      	uxth	r3, r3
 800988e:	2200      	movs	r2, #0
 8009890:	4619      	mov	r1, r3
 8009892:	4886      	ldr	r0, [pc, #536]	; (8009aac <TR_NextState+0x280>)
 8009894:	f7fa feb9 	bl	800460a <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; ++i){
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	3301      	adds	r3, #1
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	ddde      	ble.n	8009862 <TR_NextState+0x36>
			}
		}
		tr->state = TR_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	701a      	strb	r2, [r3, #0]
		break;
 80098aa:	e0f9      	b.n	8009aa0 <TR_NextState+0x274>
	case TR_IDLE:
		// State machine waits in this state if the 'stable_values' haven't been
		// converted into spikes and the 'curr_values' buffer is full.
		if(tr->cache_read == true){
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	7b5b      	ldrb	r3, [r3, #13]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 80f2 	beq.w	8009a9a <TR_NextState+0x26e>
			// copy 'curr_values' to 'stable_values'
			memset(tr->stable_values, 0, 2 * MAX_NUM_VALUES);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6898      	ldr	r0, [r3, #8]
 80098ba:	4b7d      	ldr	r3, [pc, #500]	; (8009ab0 <TR_NextState+0x284>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	461a      	mov	r2, r3
 80098c2:	2100      	movs	r1, #0
 80098c4:	f000 ffbf 	bl	800a846 <memset>
			memcpy(tr->stable_values, tr->curr_values, 2 * MAX_NUM_VALUES);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6898      	ldr	r0, [r3, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6859      	ldr	r1, [r3, #4]
 80098d0:	4b77      	ldr	r3, [pc, #476]	; (8009ab0 <TR_NextState+0x284>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	461a      	mov	r2, r3
 80098d8:	f000 ffaa 	bl	800a830 <memcpy>
			memset(tr->curr_values, 0, 2 * MAX_NUM_VALUES);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6858      	ldr	r0, [r3, #4]
 80098e0:	4b73      	ldr	r3, [pc, #460]	; (8009ab0 <TR_NextState+0x284>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	461a      	mov	r2, r3
 80098e8:	2100      	movs	r1, #0
 80098ea:	f000 ffac 	bl	800a846 <memset>
			tr->cache_read = false;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	735a      	strb	r2, [r3, #13]
			tr->state = TR_COMPLETED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2203      	movs	r2, #3
 80098f8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80098fa:	e0ce      	b.n	8009a9a <TR_NextState+0x26e>
	case TR_BUSY: ;
		if(tr->n_read == MAX_NUM_VALUES){
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7b1b      	ldrb	r3, [r3, #12]
 8009900:	461a      	mov	r2, r3
 8009902:	4b6b      	ldr	r3, [pc, #428]	; (8009ab0 <TR_NextState+0x284>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d12a      	bne.n	8009960 <TR_NextState+0x134>
			/* When values from all sensors have been read */
			if(tr->cache_read == true){
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7b5b      	ldrb	r3, [r3, #13]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d022      	beq.n	8009958 <TR_NextState+0x12c>
				// stable values can be safely updated
				memset(tr->stable_values, 0, 2 * MAX_NUM_VALUES);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6898      	ldr	r0, [r3, #8]
 8009916:	4b66      	ldr	r3, [pc, #408]	; (8009ab0 <TR_NextState+0x284>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	461a      	mov	r2, r3
 800991e:	2100      	movs	r1, #0
 8009920:	f000 ff91 	bl	800a846 <memset>
				memcpy(tr->stable_values, tr->curr_values, 2 * MAX_NUM_VALUES);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6898      	ldr	r0, [r3, #8]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6859      	ldr	r1, [r3, #4]
 800992c:	4b60      	ldr	r3, [pc, #384]	; (8009ab0 <TR_NextState+0x284>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	461a      	mov	r2, r3
 8009934:	f000 ff7c 	bl	800a830 <memcpy>
				memset(tr->curr_values, 0, 2 * MAX_NUM_VALUES);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6858      	ldr	r0, [r3, #4]
 800993c:	4b5c      	ldr	r3, [pc, #368]	; (8009ab0 <TR_NextState+0x284>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	461a      	mov	r2, r3
 8009944:	2100      	movs	r1, #0
 8009946:	f000 ff7e 	bl	800a846 <memset>
				tr->cache_read = false;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	735a      	strb	r2, [r3, #13]
				tr->state = TR_COMPLETED;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2203      	movs	r2, #3
 8009954:	701a      	strb	r2, [r3, #0]
			// Transit to the SETUP state when column needs to be changed
			if(tr->n_read % 16 == 0 && tr->n_read < MAX_NUM_VALUES){
				tr->state = TR_SETUP;
			}
		}
		break;
 8009956:	e0a2      	b.n	8009a9e <TR_NextState+0x272>
				tr->state = TR_IDLE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	701a      	strb	r2, [r3, #0]
		break;
 800995e:	e09e      	b.n	8009a9e <TR_NextState+0x272>
			uint8_t row = (tr->n_read % 16)/4;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	7b1b      	ldrb	r3, [r3, #12]
 8009964:	f003 030f 	and.w	r3, r3, #15
 8009968:	b2db      	uxtb	r3, r3
 800996a:	089b      	lsrs	r3, r3, #2
 800996c:	75bb      	strb	r3, [r7, #22]
			sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800996e:	2304      	movs	r3, #4
 8009970:	613b      	str	r3, [r7, #16]
			for(int i = 0; i < 2; ++i){
 8009972:	2300      	movs	r3, #0
 8009974:	623b      	str	r3, [r7, #32]
 8009976:	e017      	b.n	80099a8 <TR_NextState+0x17c>
				sConfig.Rank = i+1;
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	3301      	adds	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]
				sConfig.Channel = row + 4*i;
 800997e:	7dba      	ldrb	r2, [r7, #22]
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	60bb      	str	r3, [r7, #8]
				if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8009988:	f107 0308 	add.w	r3, r7, #8
 800998c:	4619      	mov	r1, r3
 800998e:	4849      	ldr	r0, [pc, #292]	; (8009ab4 <TR_NextState+0x288>)
 8009990:	f7f7 fc28 	bl	80011e4 <HAL_ADC_ConfigChannel>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <TR_NextState+0x176>
					_Error_Handler(__FILE__, __LINE__);
 800999a:	215b      	movs	r1, #91	; 0x5b
 800999c:	4846      	ldr	r0, [pc, #280]	; (8009ab8 <TR_NextState+0x28c>)
 800999e:	f7ff fd2f 	bl	8009400 <_Error_Handler>
			for(int i = 0; i < 2; ++i){
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	3301      	adds	r3, #1
 80099a6:	623b      	str	r3, [r7, #32]
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	dde4      	ble.n	8009978 <TR_NextState+0x14c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80099ae:	2201      	movs	r2, #1
 80099b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099b4:	483d      	ldr	r0, [pc, #244]	; (8009aac <TR_NextState+0x280>)
 80099b6:	f7fa fe28 	bl	800460a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (int)(row/2) );
 80099ba:	7dbb      	ldrb	r3, [r7, #22]
 80099bc:	085b      	lsrs	r3, r3, #1
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	461a      	mov	r2, r3
 80099c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80099c6:	4839      	ldr	r0, [pc, #228]	; (8009aac <TR_NextState+0x280>)
 80099c8:	f7fa fe1f 	bl	800460a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, row%2 );
 80099cc:	7dbb      	ldrb	r3, [r7, #22]
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80099da:	4834      	ldr	r0, [pc, #208]	; (8009aac <TR_NextState+0x280>)
 80099dc:	f7fa fe15 	bl	800460a <HAL_GPIO_WritePin>
			for(int i = 8; i <= 9; ++i){
 80099e0:	2308      	movs	r3, #8
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	e014      	b.n	8009a10 <TR_NextState+0x1e4>
				sConfig.Rank = i-5;
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	3b05      	subs	r3, #5
 80099ea:	60fb      	str	r3, [r7, #12]
				sConfig.Channel = i;
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	60bb      	str	r3, [r7, #8]
				if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80099f0:	f107 0308 	add.w	r3, r7, #8
 80099f4:	4619      	mov	r1, r3
 80099f6:	482f      	ldr	r0, [pc, #188]	; (8009ab4 <TR_NextState+0x288>)
 80099f8:	f7f7 fbf4 	bl	80011e4 <HAL_ADC_ConfigChannel>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <TR_NextState+0x1de>
					_Error_Handler(__FILE__, __LINE__);
 8009a02:	216a      	movs	r1, #106	; 0x6a
 8009a04:	482c      	ldr	r0, [pc, #176]	; (8009ab8 <TR_NextState+0x28c>)
 8009a06:	f7ff fcfb 	bl	8009400 <_Error_Handler>
			for(int i = 8; i <= 9; ++i){
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	61fb      	str	r3, [r7, #28]
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	2b09      	cmp	r3, #9
 8009a14:	dde7      	ble.n	80099e6 <TR_NextState+0x1ba>
			for(int i = 0; i < 4; ++i){
 8009a16:	2300      	movs	r3, #0
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	e019      	b.n	8009a50 <TR_NextState+0x224>
				if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK){
 8009a1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a20:	4824      	ldr	r0, [pc, #144]	; (8009ab4 <TR_NextState+0x288>)
 8009a22:	f7f6 ffa5 	bl	8000970 <HAL_ADC_PollForConversion>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10e      	bne.n	8009a4a <TR_NextState+0x21e>
					tr->curr_values[tr->n_read + i] = HAL_ADC_GetValue(&hadc1);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	7b1b      	ldrb	r3, [r3, #12]
 8009a34:	4619      	mov	r1, r3
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	440b      	add	r3, r1
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	18d4      	adds	r4, r2, r3
 8009a3e:	481d      	ldr	r0, [pc, #116]	; (8009ab4 <TR_NextState+0x288>)
 8009a40:	f7f7 fadd 	bl	8000ffe <HAL_ADC_GetValue>
 8009a44:	4603      	mov	r3, r0
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	8023      	strh	r3, [r4, #0]
			for(int i = 0; i < 4; ++i){
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	61bb      	str	r3, [r7, #24]
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	dde2      	ble.n	8009a1c <TR_NextState+0x1f0>
			tr->n_read += 4;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	7b1b      	ldrb	r3, [r3, #12]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	731a      	strb	r2, [r3, #12]
			if(tr->n_read % 16 == 0 && tr->n_read < MAX_NUM_VALUES){
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	7b1b      	ldrb	r3, [r3, #12]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d116      	bne.n	8009a9e <TR_NextState+0x272>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	7b1b      	ldrb	r3, [r3, #12]
 8009a74:	461a      	mov	r2, r3
 8009a76:	4b0e      	ldr	r3, [pc, #56]	; (8009ab0 <TR_NextState+0x284>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	da0f      	bge.n	8009a9e <TR_NextState+0x272>
				tr->state = TR_SETUP;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	701a      	strb	r2, [r3, #0]
		break;
 8009a84:	e00b      	b.n	8009a9e <TR_NextState+0x272>
	case TR_COMPLETED:
		// All 64 values have been successfully read
		tr->state = TR_SETUP;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
		tr->n_read = 0;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	731a      	strb	r2, [r3, #12]
		break;
 8009a92:	e005      	b.n	8009aa0 <TR_NextState+0x274>
	default:
		// this state should never be reached
		return -1;
 8009a94:	f04f 33ff 	mov.w	r3, #4294967295
 8009a98:	e003      	b.n	8009aa2 <TR_NextState+0x276>
		break;
 8009a9a:	bf00      	nop
 8009a9c:	e000      	b.n	8009aa0 <TR_NextState+0x274>
		break;
 8009a9e:	bf00      	nop
	}
	return 0;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	372c      	adds	r7, #44	; 0x2c
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd90      	pop	{r4, r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	40010c00 	.word	0x40010c00
 8009ab0:	2000011c 	.word	0x2000011c
 8009ab4:	20000440 	.word	0x20000440
 8009ab8:	0800ab48 	.word	0x0800ab48

08009abc <TR_Deinit>:

void TR_Deinit(TR_HandleTypeDef *htr){
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	// free the memory allocated to buffers
	free(htr->curr_values);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fea9 	bl	800a820 <free>
	free(htr->stable_values);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fea4 	bl	800a820 <free>
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBComm_Init>:
extern SpikeConv_HandleTypeDef hsc;
extern USBComm_HandleTypeDef huc;
extern MAX_NUM_VALUES;


void USBComm_Init(USBComm_HandleTypeDef *uc){
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	uc->state = UC_RESET;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	701a      	strb	r2, [r3, #0]
	uc->sendBuffer = calloc(2 * MAX_NUM_VALUES + 2, sizeof(uint8_t));
 8009aee:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <USBComm_Init+0x34>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	2101      	movs	r1, #1
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 fe5d 	bl	800a7b8 <calloc>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	605a      	str	r2, [r3, #4]
	uc->recvBuffer = NULL;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	609a      	str	r2, [r3, #8]
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	2000011c 	.word	0x2000011c

08009b18 <USBComm_NextState>:

int USBComm_NextState(USBComm_HandleTypeDef *uc){
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	switch(uc->state) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d026      	beq.n	8009b76 <USBComm_NextState+0x5e>
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d034      	beq.n	8009b96 <USBComm_NextState+0x7e>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d140      	bne.n	8009bb2 <USBComm_NextState+0x9a>
	case UC_COLLECT:
		// State machine collects the data to be sent in this state.
		if(hsc.spikeGenerated){
 8009b30:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <USBComm_NextState+0xac>)
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d03f      	beq.n	8009bb8 <USBComm_NextState+0xa0>
			// Prepend starting byte
			uc->sendBuffer[0] = 1;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	701a      	strb	r2, [r3, #0]
			// Copy spike values to buffer for sending
			memcpy(uc->sendBuffer + 1, hsc.values, MAX_NUM_VALUES * 2);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	1c58      	adds	r0, r3, #1
 8009b46:	4b1f      	ldr	r3, [pc, #124]	; (8009bc4 <USBComm_NextState+0xac>)
 8009b48:	6859      	ldr	r1, [r3, #4]
 8009b4a:	4b1f      	ldr	r3, [pc, #124]	; (8009bc8 <USBComm_NextState+0xb0>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	461a      	mov	r2, r3
 8009b52:	f000 fe6d 	bl	800a830 <memcpy>
			// Append ending byte
			uc->sendBuffer[2 * MAX_NUM_VALUES + 1] = 2;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	4b1b      	ldr	r3, [pc, #108]	; (8009bc8 <USBComm_NextState+0xb0>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	3301      	adds	r3, #1
 8009b62:	4413      	add	r3, r2
 8009b64:	2202      	movs	r2, #2
 8009b66:	701a      	strb	r2, [r3, #0]
			hsc.spikeGenerated = false;
 8009b68:	4b16      	ldr	r3, [pc, #88]	; (8009bc4 <USBComm_NextState+0xac>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	705a      	strb	r2, [r3, #1]
			uc->state = UC_SEND;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009b74:	e020      	b.n	8009bb8 <USBComm_NextState+0xa0>
	case UC_SEND:
		// Send data via the USB port
		CDC_Transmit_FS(uc->sendBuffer, 2 * MAX_NUM_VALUES + 2);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <USBComm_NextState+0xb0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	4619      	mov	r1, r3
 8009b88:	4610      	mov	r0, r2
 8009b8a:	f000 f8d9 	bl	8009d40 <CDC_Transmit_FS>
		uc->state = UC_RESET;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2202      	movs	r2, #2
 8009b92:	701a      	strb	r2, [r3, #0]
		break;
 8009b94:	e011      	b.n	8009bba <USBComm_NextState+0xa2>
	case UC_RESET:
		memset(uc->sendBuffer, 0, 2 * MAX_NUM_VALUES + 2);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6858      	ldr	r0, [r3, #4]
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <USBComm_NextState+0xb0>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	f000 fe4e 	bl	800a846 <memset>
		// memset(uc->recvBuffer, 0, 3);
		uc->state = UC_COLLECT;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	701a      	strb	r2, [r3, #0]
		break;
 8009bb0:	e003      	b.n	8009bba <USBComm_NextState+0xa2>
	default:
		// this state should never be reached
		return -1;
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb6:	e001      	b.n	8009bbc <USBComm_NextState+0xa4>
		break;
 8009bb8:	bf00      	nop
	}
	return 0;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000470 	.word	0x20000470
 8009bc8:	2000011c 	.word	0x2000011c

08009bcc <USBComm_Deinit>:


void USBComm_Deinit(USBComm_HandleTypeDef *uc){
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
	free(uc->sendBuffer);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fe21 	bl	800a820 <free>
	free(uc->recvBuffer);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fe1c 	bl	800a820 <free>
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4908      	ldr	r1, [pc, #32]	; (8009c18 <MX_USB_DEVICE_Init+0x28>)
 8009bf8:	4808      	ldr	r0, [pc, #32]	; (8009c1c <MX_USB_DEVICE_Init+0x2c>)
 8009bfa:	f7fe fb23 	bl	8008244 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8009bfe:	4908      	ldr	r1, [pc, #32]	; (8009c20 <MX_USB_DEVICE_Init+0x30>)
 8009c00:	4806      	ldr	r0, [pc, #24]	; (8009c1c <MX_USB_DEVICE_Init+0x2c>)
 8009c02:	f7fe fb67 	bl	80082d4 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8009c06:	4907      	ldr	r1, [pc, #28]	; (8009c24 <MX_USB_DEVICE_Init+0x34>)
 8009c08:	4804      	ldr	r0, [pc, #16]	; (8009c1c <MX_USB_DEVICE_Init+0x2c>)
 8009c0a:	f7fe fa85 	bl	8008118 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8009c0e:	4803      	ldr	r0, [pc, #12]	; (8009c1c <MX_USB_DEVICE_Init+0x2c>)
 8009c10:	f7fe fb79 	bl	8008306 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c14:	bf00      	nop
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000134 	.word	0x20000134
 8009c1c:	20000494 	.word	0x20000494
 8009c20:	20000018 	.word	0x20000018
 8009c24:	20000124 	.word	0x20000124

08009c28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4905      	ldr	r1, [pc, #20]	; (8009c44 <CDC_Init_FS+0x1c>)
 8009c30:	4805      	ldr	r0, [pc, #20]	; (8009c48 <CDC_Init_FS+0x20>)
 8009c32:	f7fe fa87 	bl	8008144 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c36:	4905      	ldr	r1, [pc, #20]	; (8009c4c <CDC_Init_FS+0x24>)
 8009c38:	4803      	ldr	r0, [pc, #12]	; (8009c48 <CDC_Init_FS+0x20>)
 8009c3a:	f7fe fa9c 	bl	8008176 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	20000aa0 	.word	0x20000aa0
 8009c48:	20000494 	.word	0x20000494
 8009c4c:	200006b8 	.word	0x200006b8

08009c50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr

08009c5e <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	4603      	mov	r3, r0
 8009c66:	6039      	str	r1, [r7, #0]
 8009c68:	71fb      	strb	r3, [r7, #7]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	2b23      	cmp	r3, #35	; 0x23
 8009c72:	d84b      	bhi.n	8009d0c <CDC_Control_FS+0xae>
 8009c74:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <CDC_Control_FS+0x1e>)
 8009c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7a:	bf00      	nop
 8009c7c:	08009d0d 	.word	0x08009d0d
 8009c80:	08009d0d 	.word	0x08009d0d
 8009c84:	08009d0d 	.word	0x08009d0d
 8009c88:	08009d0d 	.word	0x08009d0d
 8009c8c:	08009d0d 	.word	0x08009d0d
 8009c90:	08009d0d 	.word	0x08009d0d
 8009c94:	08009d0d 	.word	0x08009d0d
 8009c98:	08009d0d 	.word	0x08009d0d
 8009c9c:	08009d0d 	.word	0x08009d0d
 8009ca0:	08009d0d 	.word	0x08009d0d
 8009ca4:	08009d0d 	.word	0x08009d0d
 8009ca8:	08009d0d 	.word	0x08009d0d
 8009cac:	08009d0d 	.word	0x08009d0d
 8009cb0:	08009d0d 	.word	0x08009d0d
 8009cb4:	08009d0d 	.word	0x08009d0d
 8009cb8:	08009d0d 	.word	0x08009d0d
 8009cbc:	08009d0d 	.word	0x08009d0d
 8009cc0:	08009d0d 	.word	0x08009d0d
 8009cc4:	08009d0d 	.word	0x08009d0d
 8009cc8:	08009d0d 	.word	0x08009d0d
 8009ccc:	08009d0d 	.word	0x08009d0d
 8009cd0:	08009d0d 	.word	0x08009d0d
 8009cd4:	08009d0d 	.word	0x08009d0d
 8009cd8:	08009d0d 	.word	0x08009d0d
 8009cdc:	08009d0d 	.word	0x08009d0d
 8009ce0:	08009d0d 	.word	0x08009d0d
 8009ce4:	08009d0d 	.word	0x08009d0d
 8009ce8:	08009d0d 	.word	0x08009d0d
 8009cec:	08009d0d 	.word	0x08009d0d
 8009cf0:	08009d0d 	.word	0x08009d0d
 8009cf4:	08009d0d 	.word	0x08009d0d
 8009cf8:	08009d0d 	.word	0x08009d0d
 8009cfc:	08009d0d 	.word	0x08009d0d
 8009d00:	08009d0d 	.word	0x08009d0d
 8009d04:	08009d0d 	.word	0x08009d0d
 8009d08:	08009d0d 	.word	0x08009d0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d0c:	bf00      	nop
  }

  return (USBD_OK);
 8009d0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr

08009d1a <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	4805      	ldr	r0, [pc, #20]	; (8009d3c <CDC_Receive_FS+0x22>)
 8009d28:	f7fe fa25 	bl	8008176 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d2c:	4803      	ldr	r0, [pc, #12]	; (8009d3c <CDC_Receive_FS+0x22>)
 8009d2e:	f7fe fa5f 	bl	80081f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d32:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000494 	.word	0x20000494

08009d40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d50:	4b0d      	ldr	r3, [pc, #52]	; (8009d88 <CDC_Transmit_FS+0x48>)
 8009d52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e00b      	b.n	8009d7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d66:	887b      	ldrh	r3, [r7, #2]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4806      	ldr	r0, [pc, #24]	; (8009d88 <CDC_Transmit_FS+0x48>)
 8009d6e:	f7fe f9e9 	bl	8008144 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d72:	4805      	ldr	r0, [pc, #20]	; (8009d88 <CDC_Transmit_FS+0x48>)
 8009d74:	f7fe fa12 	bl	800819c <USBD_CDC_TransmitPacket>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20000494 	.word	0x20000494

08009d8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a0d      	ldr	r2, [pc, #52]	; (8009dd0 <HAL_PCD_MspInit+0x44>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d113      	bne.n	8009dc6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d9e:	4a0d      	ldr	r2, [pc, #52]	; (8009dd4 <HAL_PCD_MspInit+0x48>)
 8009da0:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <HAL_PCD_MspInit+0x48>)
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009da8:	61d3      	str	r3, [r2, #28]
 8009daa:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <HAL_PCD_MspInit+0x48>)
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009db6:	2200      	movs	r2, #0
 8009db8:	2100      	movs	r1, #0
 8009dba:	2014      	movs	r0, #20
 8009dbc:	f7f8 fc99 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009dc0:	2014      	movs	r0, #20
 8009dc2:	f7f8 fcb2 	bl	800272a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	40005c00 	.word	0x40005c00
 8009dd4:	40021000 	.word	0x40021000

08009dd8 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a07      	ldr	r2, [pc, #28]	; (8009e04 <HAL_PCD_MspDeInit+0x2c>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d108      	bne.n	8009dfc <HAL_PCD_MspDeInit+0x24>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 8009dea:	4a07      	ldr	r2, [pc, #28]	; (8009e08 <HAL_PCD_MspDeInit+0x30>)
 8009dec:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <HAL_PCD_MspDeInit+0x30>)
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009df4:	61d3      	str	r3, [r2, #28]

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009df6:	2014      	movs	r0, #20
 8009df8:	f7f8 fca5 	bl	8002746 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	40005c00 	.word	0x40005c00
 8009e08:	40021000 	.word	0x40021000

08009e0c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 245c 	ldr.w	r2, [r3, #1116]	; 0x45c
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 8009e20:	4619      	mov	r1, r3
 8009e22:	4610      	mov	r0, r2
 8009e24:	f7fe facd 	bl	80083c2 <USBD_LL_SetupStage>
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8009e42:	78fb      	ldrb	r3, [r7, #3]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	015b      	lsls	r3, r3, #5
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	4619      	mov	r1, r3
 8009e54:	f7fe faff 	bl	8008456 <USBD_LL_DataOutStage>
}
 8009e58:	bf00      	nop
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 045c 	ldr.w	r0, [r3, #1116]	; 0x45c
 8009e72:	78fb      	ldrb	r3, [r7, #3]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	015b      	lsls	r3, r3, #5
 8009e78:	4413      	add	r3, r2
 8009e7a:	333c      	adds	r3, #60	; 0x3c
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	78fb      	ldrb	r3, [r7, #3]
 8009e80:	4619      	mov	r1, r3
 8009e82:	f7fe fb43 	bl	800850c <USBD_LL_DataInStage>
}
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b082      	sub	sp, #8
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fc26 	bl	80086ee <USBD_LL_SOF>
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d102      	bne.n	8009ec4 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec2:	e002      	b.n	8009eca <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	73fb      	strb	r3, [r7, #15]
    break;    
 8009ec8:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009ed0:	7bfa      	ldrb	r2, [r7, #15]
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe fbd7 	bl	8008688 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe fba2 	bl	800862a <USBD_LL_Reset>
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe fbd2 	bl	80086a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d005      	beq.n	8009f16 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f0a:	4a05      	ldr	r2, [pc, #20]	; (8009f20 <HAL_PCD_SuspendCallback+0x32>)
 8009f0c:	4b04      	ldr	r3, [pc, #16]	; (8009f20 <HAL_PCD_SuspendCallback+0x32>)
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	f043 0306 	orr.w	r3, r3, #6
 8009f14:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f16:	bf00      	nop
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	e000ed00 	.word	0xe000ed00

08009f24 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fbcb 	bl	80086ce <USBD_LL_Resume>
}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fbef 	bl	800873a <USBD_LL_IsoOUTIncomplete>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009f76:	78fa      	ldrb	r2, [r7, #3]
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fbd1 	bl	8008722 <USBD_LL_IsoINIncomplete>
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe fbdb 	bl	8008752 <USBD_LL_DevConnected>
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fbd7 	bl	8008766 <USBD_LL_DevDisconnected>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009fc8:	4a2b      	ldr	r2, [pc, #172]	; (800a078 <USBD_LL_Init+0xb8>)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a29      	ldr	r2, [pc, #164]	; (800a078 <USBD_LL_Init+0xb8>)
 8009fd4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8009fd8:	4b27      	ldr	r3, [pc, #156]	; (800a078 <USBD_LL_Init+0xb8>)
 8009fda:	4a28      	ldr	r2, [pc, #160]	; (800a07c <USBD_LL_Init+0xbc>)
 8009fdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fde:	4b26      	ldr	r3, [pc, #152]	; (800a078 <USBD_LL_Init+0xb8>)
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fe4:	4b24      	ldr	r3, [pc, #144]	; (800a078 <USBD_LL_Init+0xb8>)
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8009fea:	4b23      	ldr	r3, [pc, #140]	; (800a078 <USBD_LL_Init+0xb8>)
 8009fec:	2203      	movs	r2, #3
 8009fee:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009ff0:	4b21      	ldr	r3, [pc, #132]	; (800a078 <USBD_LL_Init+0xb8>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ff6:	4b20      	ldr	r3, [pc, #128]	; (800a078 <USBD_LL_Init+0xb8>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ffc:	4b1e      	ldr	r3, [pc, #120]	; (800a078 <USBD_LL_Init+0xb8>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a002:	481d      	ldr	r0, [pc, #116]	; (800a078 <USBD_LL_Init+0xb8>)
 800a004:	f7fa fba6 	bl	8004754 <HAL_PCD_Init>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d004      	beq.n	800a018 <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a00e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800a012:	481b      	ldr	r0, [pc, #108]	; (800a080 <USBD_LL_Init+0xc0>)
 800a014:	f7ff f9f4 	bl	8009400 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a01e:	2318      	movs	r3, #24
 800a020:	2200      	movs	r2, #0
 800a022:	2100      	movs	r1, #0
 800a024:	f7fb fc02 	bl	800582c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a02e:	2358      	movs	r3, #88	; 0x58
 800a030:	2200      	movs	r2, #0
 800a032:	2180      	movs	r1, #128	; 0x80
 800a034:	f7fb fbfa 	bl	800582c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a03e:	23c0      	movs	r3, #192	; 0xc0
 800a040:	2200      	movs	r2, #0
 800a042:	2181      	movs	r1, #129	; 0x81
 800a044:	f7fb fbf2 	bl	800582c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a04e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a052:	2200      	movs	r2, #0
 800a054:	2101      	movs	r1, #1
 800a056:	f7fb fbe9 	bl	800582c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a060:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a064:	2200      	movs	r2, #0
 800a066:	2182      	movs	r1, #130	; 0x82
 800a068:	f7fb fbe0 	bl	800582c <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20000e88 	.word	0x20000e88
 800a07c:	40005c00 	.word	0x40005c00
 800a080:	0800ab60 	.word	0x0800ab60

0800a084 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fa fc34 	bl	8004908 <HAL_PCD_DeInit>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d816      	bhi.n	800a0d8 <USBD_LL_DeInit+0x54>
 800a0aa:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <USBD_LL_DeInit+0x2c>)
 800a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b0:	0800a0c1 	.word	0x0800a0c1
 800a0b4:	0800a0c7 	.word	0x0800a0c7
 800a0b8:	0800a0cd 	.word	0x0800a0cd
 800a0bc:	0800a0d3 	.word	0x0800a0d3
    case HAL_OK :
      usb_status = USBD_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c4:	e00b      	b.n	800a0de <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ca:	e008      	b.n	800a0de <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d0:	e005      	b.n	800a0de <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d6:	e002      	b.n	800a0de <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	73fb      	strb	r3, [r7, #15]
    break;
 800a0dc:	bf00      	nop
  }
  return usb_status; 
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fa fc30 	bl	8004964 <HAL_PCD_Start>
 800a104:	4603      	mov	r3, r0
 800a106:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d816      	bhi.n	800a13c <USBD_LL_Start+0x54>
 800a10e:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <USBD_LL_Start+0x2c>)
 800a110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a114:	0800a125 	.word	0x0800a125
 800a118:	0800a12b 	.word	0x0800a12b
 800a11c:	0800a131 	.word	0x0800a131
 800a120:	0800a137 	.word	0x0800a137
    case HAL_OK :
      usb_status = USBD_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
    break;
 800a128:	e00b      	b.n	800a142 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a12a:	2302      	movs	r3, #2
 800a12c:	73fb      	strb	r3, [r7, #15]
    break;
 800a12e:	e008      	b.n	800a142 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a130:	2301      	movs	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]
    break;
 800a134:	e005      	b.n	800a142 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a136:	2302      	movs	r3, #2
 800a138:	73fb      	strb	r3, [r7, #15]
    break;
 800a13a:	e002      	b.n	800a142 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a13c:	2302      	movs	r3, #2
 800a13e:	73fb      	strb	r3, [r7, #15]
    break;
 800a140:	bf00      	nop
  }
  return usb_status;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a162:	4618      	mov	r0, r3
 800a164:	f7fa fc24 	bl	80049b0 <HAL_PCD_Stop>
 800a168:	4603      	mov	r3, r0
 800a16a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d816      	bhi.n	800a1a0 <USBD_LL_Stop+0x54>
 800a172:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <USBD_LL_Stop+0x2c>)
 800a174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a178:	0800a189 	.word	0x0800a189
 800a17c:	0800a18f 	.word	0x0800a18f
 800a180:	0800a195 	.word	0x0800a195
 800a184:	0800a19b 	.word	0x0800a19b
    case HAL_OK :
      usb_status = USBD_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	73fb      	strb	r3, [r7, #15]
    break;
 800a18c:	e00b      	b.n	800a1a6 <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a18e:	2302      	movs	r3, #2
 800a190:	73fb      	strb	r3, [r7, #15]
    break;
 800a192:	e008      	b.n	800a1a6 <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a194:	2301      	movs	r3, #1
 800a196:	73fb      	strb	r3, [r7, #15]
    break;
 800a198:	e005      	b.n	800a1a6 <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a19a:	2302      	movs	r3, #2
 800a19c:	73fb      	strb	r3, [r7, #15]
    break;
 800a19e:	e002      	b.n	800a1a6 <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a4:	bf00      	nop
  }
  return usb_status;
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	461a      	mov	r2, r3
 800a1be:	4603      	mov	r3, r0
 800a1c0:	70fb      	strb	r3, [r7, #3]
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	70bb      	strb	r3, [r7, #2]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a1d8:	78bb      	ldrb	r3, [r7, #2]
 800a1da:	883a      	ldrh	r2, [r7, #0]
 800a1dc:	78f9      	ldrb	r1, [r7, #3]
 800a1de:	f7fa fde2 	bl	8004da6 <HAL_PCD_EP_Open>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d817      	bhi.n	800a21c <USBD_LL_OpenEP+0x6c>
 800a1ec:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <USBD_LL_OpenEP+0x44>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a205 	.word	0x0800a205
 800a1f8:	0800a20b 	.word	0x0800a20b
 800a1fc:	0800a211 	.word	0x0800a211
 800a200:	0800a217 	.word	0x0800a217
    case HAL_OK :
      usb_status = USBD_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
    break;
 800a208:	e00b      	b.n	800a222 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a20a:	2302      	movs	r3, #2
 800a20c:	73fb      	strb	r3, [r7, #15]
    break;
 800a20e:	e008      	b.n	800a222 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a210:	2301      	movs	r3, #1
 800a212:	73fb      	strb	r3, [r7, #15]
    break;
 800a214:	e005      	b.n	800a222 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a216:	2302      	movs	r3, #2
 800a218:	73fb      	strb	r3, [r7, #15]
    break;
 800a21a:	e002      	b.n	800a222 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a21c:	2302      	movs	r3, #2
 800a21e:	73fb      	strb	r3, [r7, #15]
    break;
 800a220:	bf00      	nop
  }
  return usb_status;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a246:	78fa      	ldrb	r2, [r7, #3]
 800a248:	4611      	mov	r1, r2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fa fe00 	bl	8004e50 <HAL_PCD_EP_Close>
 800a250:	4603      	mov	r3, r0
 800a252:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	2b03      	cmp	r3, #3
 800a258:	d816      	bhi.n	800a288 <USBD_LL_CloseEP+0x5c>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <USBD_LL_CloseEP+0x34>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a271 	.word	0x0800a271
 800a264:	0800a277 	.word	0x0800a277
 800a268:	0800a27d 	.word	0x0800a27d
 800a26c:	0800a283 	.word	0x0800a283
    case HAL_OK :
      usb_status = USBD_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]
    break;
 800a274:	e00b      	b.n	800a28e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a276:	2302      	movs	r3, #2
 800a278:	73fb      	strb	r3, [r7, #15]
    break;
 800a27a:	e008      	b.n	800a28e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a27c:	2301      	movs	r3, #1
 800a27e:	73fb      	strb	r3, [r7, #15]
    break;
 800a280:	e005      	b.n	800a28e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a282:	2302      	movs	r3, #2
 800a284:	73fb      	strb	r3, [r7, #15]
    break;
 800a286:	e002      	b.n	800a28e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a288:	2302      	movs	r3, #2
 800a28a:	73fb      	strb	r3, [r7, #15]
    break;
 800a28c:	bf00      	nop
  }
  return usb_status;  
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a2b2:	78fa      	ldrb	r2, [r7, #3]
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fa ff38 	bl	800512c <HAL_PCD_EP_Flush>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d816      	bhi.n	800a2f4 <USBD_LL_FlushEP+0x5c>
 800a2c6:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <USBD_LL_FlushEP+0x34>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a2dd 	.word	0x0800a2dd
 800a2d0:	0800a2e3 	.word	0x0800a2e3
 800a2d4:	0800a2e9 	.word	0x0800a2e9
 800a2d8:	0800a2ef 	.word	0x0800a2ef
    case HAL_OK :
      usb_status = USBD_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e0:	e00b      	b.n	800a2fa <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e6:	e008      	b.n	800a2fa <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ec:	e005      	b.n	800a2fa <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f2:	e002      	b.n	800a2fa <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f8:	bf00      	nop
  }
  return usb_status;  
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a31e:	78fa      	ldrb	r2, [r7, #3]
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7fa fe66 	bl	8004ff4 <HAL_PCD_EP_SetStall>
 800a328:	4603      	mov	r3, r0
 800a32a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d816      	bhi.n	800a360 <USBD_LL_StallEP+0x5c>
 800a332:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <USBD_LL_StallEP+0x34>)
 800a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a338:	0800a349 	.word	0x0800a349
 800a33c:	0800a34f 	.word	0x0800a34f
 800a340:	0800a355 	.word	0x0800a355
 800a344:	0800a35b 	.word	0x0800a35b
    case HAL_OK :
      usb_status = USBD_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
    break;
 800a34c:	e00b      	b.n	800a366 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a34e:	2302      	movs	r3, #2
 800a350:	73fb      	strb	r3, [r7, #15]
    break;
 800a352:	e008      	b.n	800a366 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a354:	2301      	movs	r3, #1
 800a356:	73fb      	strb	r3, [r7, #15]
    break;
 800a358:	e005      	b.n	800a366 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a35a:	2302      	movs	r3, #2
 800a35c:	73fb      	strb	r3, [r7, #15]
    break;
 800a35e:	e002      	b.n	800a366 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a360:	2302      	movs	r3, #2
 800a362:	73fb      	strb	r3, [r7, #15]
    break;
 800a364:	bf00      	nop
  }
  return usb_status;  
 800a366:	7bfb      	ldrb	r3, [r7, #15]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	4611      	mov	r1, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fa fe85 	bl	800509e <HAL_PCD_EP_ClrStall>
 800a394:	4603      	mov	r3, r0
 800a396:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a398:	7bbb      	ldrb	r3, [r7, #14]
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d816      	bhi.n	800a3cc <USBD_LL_ClearStallEP+0x5c>
 800a39e:	a201      	add	r2, pc, #4	; (adr r2, 800a3a4 <USBD_LL_ClearStallEP+0x34>)
 800a3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a3bb 	.word	0x0800a3bb
 800a3ac:	0800a3c1 	.word	0x0800a3c1
 800a3b0:	0800a3c7 	.word	0x0800a3c7
    case HAL_OK :
      usb_status = USBD_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	e00b      	b.n	800a3d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3be:	e008      	b.n	800a3d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c4:	e005      	b.n	800a3d2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ca:	e002      	b.n	800a3d2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d0:	bf00      	nop
  }
  return usb_status; 
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a3ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a3f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	da08      	bge.n	800a40a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a3f8:	78fb      	ldrb	r3, [r7, #3]
 800a3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	015b      	lsls	r3, r3, #5
 800a402:	4413      	add	r3, r2
 800a404:	332a      	adds	r3, #42	; 0x2a
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	e008      	b.n	800a41c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	015b      	lsls	r3, r3, #5
 800a414:	4413      	add	r3, r2
 800a416:	f203 232a 	addw	r3, r3, #554	; 0x22a
 800a41a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	bc80      	pop	{r7}
 800a424:	4770      	bx	lr

0800a426 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	460b      	mov	r3, r1
 800a430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a440:	78fa      	ldrb	r2, [r7, #3]
 800a442:	4611      	mov	r1, r2
 800a444:	4618      	mov	r0, r3
 800a446:	f7fa fc89 	bl	8004d5c <HAL_PCD_SetAddress>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b03      	cmp	r3, #3
 800a452:	d817      	bhi.n	800a484 <USBD_LL_SetUSBAddress+0x5e>
 800a454:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <USBD_LL_SetUSBAddress+0x36>)
 800a456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45a:	bf00      	nop
 800a45c:	0800a46d 	.word	0x0800a46d
 800a460:	0800a473 	.word	0x0800a473
 800a464:	0800a479 	.word	0x0800a479
 800a468:	0800a47f 	.word	0x0800a47f
    case HAL_OK :
      usb_status = USBD_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
    break;
 800a470:	e00b      	b.n	800a48a <USBD_LL_SetUSBAddress+0x64>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a472:	2302      	movs	r3, #2
 800a474:	73fb      	strb	r3, [r7, #15]
    break;
 800a476:	e008      	b.n	800a48a <USBD_LL_SetUSBAddress+0x64>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a478:	2301      	movs	r3, #1
 800a47a:	73fb      	strb	r3, [r7, #15]
    break;
 800a47c:	e005      	b.n	800a48a <USBD_LL_SetUSBAddress+0x64>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a47e:	2302      	movs	r3, #2
 800a480:	73fb      	strb	r3, [r7, #15]
    break;
 800a482:	e002      	b.n	800a48a <USBD_LL_SetUSBAddress+0x64>
    default :
      usb_status = USBD_FAIL;
 800a484:	2302      	movs	r3, #2
 800a486:	73fb      	strb	r3, [r7, #15]
    break;
 800a488:	bf00      	nop
  }
  return usb_status;  
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	607a      	str	r2, [r7, #4]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	72fb      	strb	r3, [r7, #11]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a4b6:	893b      	ldrh	r3, [r7, #8]
 800a4b8:	7af9      	ldrb	r1, [r7, #11]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	f7fa fd5f 	bl	8004f7e <HAL_PCD_EP_Transmit>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a4c4:	7dbb      	ldrb	r3, [r7, #22]
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d816      	bhi.n	800a4f8 <USBD_LL_Transmit+0x64>
 800a4ca:	a201      	add	r2, pc, #4	; (adr r2, 800a4d0 <USBD_LL_Transmit+0x3c>)
 800a4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d0:	0800a4e1 	.word	0x0800a4e1
 800a4d4:	0800a4e7 	.word	0x0800a4e7
 800a4d8:	0800a4ed 	.word	0x0800a4ed
 800a4dc:	0800a4f3 	.word	0x0800a4f3
    case HAL_OK :
      usb_status = USBD_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	75fb      	strb	r3, [r7, #23]
    break;
 800a4e4:	e00b      	b.n	800a4fe <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	75fb      	strb	r3, [r7, #23]
    break;
 800a4ea:	e008      	b.n	800a4fe <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	75fb      	strb	r3, [r7, #23]
    break;
 800a4f0:	e005      	b.n	800a4fe <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	75fb      	strb	r3, [r7, #23]
    break;
 800a4f6:	e002      	b.n	800a4fe <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	75fb      	strb	r3, [r7, #23]
    break;
 800a4fc:	bf00      	nop
  }
  return usb_status;    
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	607a      	str	r2, [r7, #4]
 800a512:	461a      	mov	r2, r3
 800a514:	460b      	mov	r3, r1
 800a516:	72fb      	strb	r3, [r7, #11]
 800a518:	4613      	mov	r3, r2
 800a51a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800a52a:	893b      	ldrh	r3, [r7, #8]
 800a52c:	7af9      	ldrb	r1, [r7, #11]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	f7fa fcd4 	bl	8004edc <HAL_PCD_EP_Receive>
 800a534:	4603      	mov	r3, r0
 800a536:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a538:	7dbb      	ldrb	r3, [r7, #22]
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d816      	bhi.n	800a56c <USBD_LL_PrepareReceive+0x64>
 800a53e:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <USBD_LL_PrepareReceive+0x3c>)
 800a540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a544:	0800a555 	.word	0x0800a555
 800a548:	0800a55b 	.word	0x0800a55b
 800a54c:	0800a561 	.word	0x0800a561
 800a550:	0800a567 	.word	0x0800a567
    case HAL_OK :
      usb_status = USBD_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	75fb      	strb	r3, [r7, #23]
    break;
 800a558:	e00b      	b.n	800a572 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a55a:	2302      	movs	r3, #2
 800a55c:	75fb      	strb	r3, [r7, #23]
    break;
 800a55e:	e008      	b.n	800a572 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a560:	2301      	movs	r3, #1
 800a562:	75fb      	strb	r3, [r7, #23]
    break;
 800a564:	e005      	b.n	800a572 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a566:	2302      	movs	r3, #2
 800a568:	75fb      	strb	r3, [r7, #23]
    break;
 800a56a:	e002      	b.n	800a572 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a56c:	2302      	movs	r3, #2
 800a56e:	75fb      	strb	r3, [r7, #23]
    break;
 800a570:	bf00      	nop
  }
  return usb_status; 
 800a572:	7dfb      	ldrb	r3, [r7, #23]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a58e:	78fa      	ldrb	r2, [r7, #3]
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f7fa fcde 	bl	8004f54 <HAL_PCD_EP_GetRxCount>
 800a598:	4603      	mov	r3, r0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBD_LL_Delay>:
  * @brief  Delays routine for the USB device library.
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7f5 fe88 	bl	80002c0 <HAL_Delay>
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5c0:	4b02      	ldr	r3, [pc, #8]	; (800a5cc <USBD_static_malloc+0x14>)
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bc80      	pop	{r7}
 800a5ca:	4770      	bx	lr
 800a5cc:	200001f0 	.word	0x200001f0

0800a5d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]

}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bc80      	pop	{r7}
 800a5e0:	4770      	bx	lr

0800a5e2 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a5ee:	bf00      	nop
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bc80      	pop	{r7}
 800a5f6:	4770      	bx	lr

0800a5f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	6039      	str	r1, [r7, #0]
 800a602:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2212      	movs	r2, #18
 800a608:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a60a:	4b03      	ldr	r3, [pc, #12]	; (800a618 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	20000150 	.word	0x20000150

0800a61c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	6039      	str	r1, [r7, #0]
 800a626:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2204      	movs	r2, #4
 800a62c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a62e:	4b03      	ldr	r3, [pc, #12]	; (800a63c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	bc80      	pop	{r7}
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	20000164 	.word	0x20000164

0800a640 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	6039      	str	r1, [r7, #0]
 800a64a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d105      	bne.n	800a65e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4907      	ldr	r1, [pc, #28]	; (800a674 <USBD_FS_ProductStrDescriptor+0x34>)
 800a656:	4808      	ldr	r0, [pc, #32]	; (800a678 <USBD_FS_ProductStrDescriptor+0x38>)
 800a658:	f7fe fc9c 	bl	8008f94 <USBD_GetString>
 800a65c:	e004      	b.n	800a668 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	4904      	ldr	r1, [pc, #16]	; (800a674 <USBD_FS_ProductStrDescriptor+0x34>)
 800a662:	4805      	ldr	r0, [pc, #20]	; (800a678 <USBD_FS_ProductStrDescriptor+0x38>)
 800a664:	f7fe fc96 	bl	8008f94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a668:	4b02      	ldr	r3, [pc, #8]	; (800a674 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	200012e8 	.word	0x200012e8
 800a678:	0800ab74 	.word	0x0800ab74

0800a67c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	4904      	ldr	r1, [pc, #16]	; (800a69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a68c:	4804      	ldr	r0, [pc, #16]	; (800a6a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a68e:	f7fe fc81 	bl	8008f94 <USBD_GetString>
  return USBD_StrDesc;
 800a692:	4b02      	ldr	r3, [pc, #8]	; (800a69c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	200012e8 	.word	0x200012e8
 800a6a0:	0800ab8c 	.word	0x0800ab8c

0800a6a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	6039      	str	r1, [r7, #0]
 800a6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6b0:	79fb      	ldrb	r3, [r7, #7]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d105      	bne.n	800a6c2 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	4907      	ldr	r1, [pc, #28]	; (800a6d8 <USBD_FS_SerialStrDescriptor+0x34>)
 800a6ba:	4808      	ldr	r0, [pc, #32]	; (800a6dc <USBD_FS_SerialStrDescriptor+0x38>)
 800a6bc:	f7fe fc6a 	bl	8008f94 <USBD_GetString>
 800a6c0:	e004      	b.n	800a6cc <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	4904      	ldr	r1, [pc, #16]	; (800a6d8 <USBD_FS_SerialStrDescriptor+0x34>)
 800a6c6:	4805      	ldr	r0, [pc, #20]	; (800a6dc <USBD_FS_SerialStrDescriptor+0x38>)
 800a6c8:	f7fe fc64 	bl	8008f94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6cc:	4b02      	ldr	r3, [pc, #8]	; (800a6d8 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	200012e8 	.word	0x200012e8
 800a6dc:	0800aba0 	.word	0x0800aba0

0800a6e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d105      	bne.n	800a6fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	4907      	ldr	r1, [pc, #28]	; (800a714 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6f6:	4808      	ldr	r0, [pc, #32]	; (800a718 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6f8:	f7fe fc4c 	bl	8008f94 <USBD_GetString>
 800a6fc:	e004      	b.n	800a708 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	4904      	ldr	r1, [pc, #16]	; (800a714 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a702:	4805      	ldr	r0, [pc, #20]	; (800a718 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a704:	f7fe fc46 	bl	8008f94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a708:	4b02      	ldr	r3, [pc, #8]	; (800a714 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	200012e8 	.word	0x200012e8
 800a718:	0800abb0 	.word	0x0800abb0

0800a71c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	6039      	str	r1, [r7, #0]
 800a726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a728:	79fb      	ldrb	r3, [r7, #7]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d105      	bne.n	800a73a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	4907      	ldr	r1, [pc, #28]	; (800a750 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a732:	4808      	ldr	r0, [pc, #32]	; (800a754 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a734:	f7fe fc2e 	bl	8008f94 <USBD_GetString>
 800a738:	e004      	b.n	800a744 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	4904      	ldr	r1, [pc, #16]	; (800a750 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a73e:	4805      	ldr	r0, [pc, #20]	; (800a754 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a740:	f7fe fc28 	bl	8008f94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a744:	4b02      	ldr	r3, [pc, #8]	; (800a750 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a746:	4618      	mov	r0, r3
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	200012e8 	.word	0x200012e8
 800a754:	0800abbc 	.word	0x0800abbc
 800a758:	0800abd8 	.word	0x0800abd8
 800a75c:	20000000 	.word	0x20000000
 800a760:	200001cc 	.word	0x200001cc
 800a764:	200001d0 	.word	0x200001d0
 800a768:	200014ec 	.word	0x200014ec

0800a76c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800a76c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800a76e:	e003      	b.n	800a778 <LoopCopyDataInit>

0800a770 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800a770:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800a772:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800a774:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800a776:	3104      	adds	r1, #4

0800a778 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800a778:	480a      	ldr	r0, [pc, #40]	; (800a7a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800a77a:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800a77c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800a77e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800a780:	d3f6      	bcc.n	800a770 <CopyDataInit>
  ldr r2, =_sbss
 800a782:	4a0a      	ldr	r2, [pc, #40]	; (800a7ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800a784:	e002      	b.n	800a78c <LoopFillZerobss>

0800a786 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800a786:	2300      	movs	r3, #0
  str r3, [r2], #4
 800a788:	f842 3b04 	str.w	r3, [r2], #4

0800a78c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800a78c:	4b08      	ldr	r3, [pc, #32]	; (800a7b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800a78e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800a790:	d3f9      	bcc.n	800a786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a792:	f7fe ff83 	bl	800969c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a796:	f000 f817 	bl	800a7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a79a:	f7fe fceb 	bl	8009174 <main>
  bx lr
 800a79e:	4770      	bx	lr
  ldr r3, =_sidata
 800a7a0:	0800abd8 	.word	0x0800abd8
  ldr r0, =_sdata
 800a7a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800a7a8:	200001cc 	.word	0x200001cc
  ldr r2, =_sbss
 800a7ac:	200001d0 	.word	0x200001d0
  ldr r3, = _ebss
 800a7b0:	200014ec 	.word	0x200014ec

0800a7b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a7b4:	e7fe      	b.n	800a7b4 <ADC1_2_IRQHandler>
	...

0800a7b8 <calloc>:
 800a7b8:	4b02      	ldr	r3, [pc, #8]	; (800a7c4 <calloc+0xc>)
 800a7ba:	460a      	mov	r2, r1
 800a7bc:	4601      	mov	r1, r0
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	f000 b849 	b.w	800a856 <_calloc_r>
 800a7c4:	20000168 	.word	0x20000168

0800a7c8 <__libc_init_array>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	2500      	movs	r5, #0
 800a7cc:	4e0c      	ldr	r6, [pc, #48]	; (800a800 <__libc_init_array+0x38>)
 800a7ce:	4c0d      	ldr	r4, [pc, #52]	; (800a804 <__libc_init_array+0x3c>)
 800a7d0:	1ba4      	subs	r4, r4, r6
 800a7d2:	10a4      	asrs	r4, r4, #2
 800a7d4:	42a5      	cmp	r5, r4
 800a7d6:	d109      	bne.n	800a7ec <__libc_init_array+0x24>
 800a7d8:	f000 f982 	bl	800aae0 <_init>
 800a7dc:	2500      	movs	r5, #0
 800a7de:	4e0a      	ldr	r6, [pc, #40]	; (800a808 <__libc_init_array+0x40>)
 800a7e0:	4c0a      	ldr	r4, [pc, #40]	; (800a80c <__libc_init_array+0x44>)
 800a7e2:	1ba4      	subs	r4, r4, r6
 800a7e4:	10a4      	asrs	r4, r4, #2
 800a7e6:	42a5      	cmp	r5, r4
 800a7e8:	d105      	bne.n	800a7f6 <__libc_init_array+0x2e>
 800a7ea:	bd70      	pop	{r4, r5, r6, pc}
 800a7ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7f0:	4798      	blx	r3
 800a7f2:	3501      	adds	r5, #1
 800a7f4:	e7ee      	b.n	800a7d4 <__libc_init_array+0xc>
 800a7f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7fa:	4798      	blx	r3
 800a7fc:	3501      	adds	r5, #1
 800a7fe:	e7f2      	b.n	800a7e6 <__libc_init_array+0x1e>
 800a800:	0800abd0 	.word	0x0800abd0
 800a804:	0800abd0 	.word	0x0800abd0
 800a808:	0800abd0 	.word	0x0800abd0
 800a80c:	0800abd4 	.word	0x0800abd4

0800a810 <malloc>:
 800a810:	4b02      	ldr	r3, [pc, #8]	; (800a81c <malloc+0xc>)
 800a812:	4601      	mov	r1, r0
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	f000 b879 	b.w	800a90c <_malloc_r>
 800a81a:	bf00      	nop
 800a81c:	20000168 	.word	0x20000168

0800a820 <free>:
 800a820:	4b02      	ldr	r3, [pc, #8]	; (800a82c <free+0xc>)
 800a822:	4601      	mov	r1, r0
 800a824:	6818      	ldr	r0, [r3, #0]
 800a826:	f000 b825 	b.w	800a874 <_free_r>
 800a82a:	bf00      	nop
 800a82c:	20000168 	.word	0x20000168

0800a830 <memcpy>:
 800a830:	b510      	push	{r4, lr}
 800a832:	1e43      	subs	r3, r0, #1
 800a834:	440a      	add	r2, r1
 800a836:	4291      	cmp	r1, r2
 800a838:	d100      	bne.n	800a83c <memcpy+0xc>
 800a83a:	bd10      	pop	{r4, pc}
 800a83c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a840:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a844:	e7f7      	b.n	800a836 <memcpy+0x6>

0800a846 <memset>:
 800a846:	4603      	mov	r3, r0
 800a848:	4402      	add	r2, r0
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d100      	bne.n	800a850 <memset+0xa>
 800a84e:	4770      	bx	lr
 800a850:	f803 1b01 	strb.w	r1, [r3], #1
 800a854:	e7f9      	b.n	800a84a <memset+0x4>

0800a856 <_calloc_r>:
 800a856:	b538      	push	{r3, r4, r5, lr}
 800a858:	fb02 f401 	mul.w	r4, r2, r1
 800a85c:	4621      	mov	r1, r4
 800a85e:	f000 f855 	bl	800a90c <_malloc_r>
 800a862:	4605      	mov	r5, r0
 800a864:	b118      	cbz	r0, 800a86e <_calloc_r+0x18>
 800a866:	4622      	mov	r2, r4
 800a868:	2100      	movs	r1, #0
 800a86a:	f7ff ffec 	bl	800a846 <memset>
 800a86e:	4628      	mov	r0, r5
 800a870:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a874 <_free_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4605      	mov	r5, r0
 800a878:	2900      	cmp	r1, #0
 800a87a:	d043      	beq.n	800a904 <_free_r+0x90>
 800a87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a880:	1f0c      	subs	r4, r1, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	bfb8      	it	lt
 800a886:	18e4      	addlt	r4, r4, r3
 800a888:	f000 f8ae 	bl	800a9e8 <__malloc_lock>
 800a88c:	4a1e      	ldr	r2, [pc, #120]	; (800a908 <_free_r+0x94>)
 800a88e:	6813      	ldr	r3, [r2, #0]
 800a890:	4610      	mov	r0, r2
 800a892:	b933      	cbnz	r3, 800a8a2 <_free_r+0x2e>
 800a894:	6063      	str	r3, [r4, #4]
 800a896:	6014      	str	r4, [r2, #0]
 800a898:	4628      	mov	r0, r5
 800a89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a89e:	f000 b8a4 	b.w	800a9ea <__malloc_unlock>
 800a8a2:	42a3      	cmp	r3, r4
 800a8a4:	d90b      	bls.n	800a8be <_free_r+0x4a>
 800a8a6:	6821      	ldr	r1, [r4, #0]
 800a8a8:	1862      	adds	r2, r4, r1
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	bf01      	itttt	eq
 800a8ae:	681a      	ldreq	r2, [r3, #0]
 800a8b0:	685b      	ldreq	r3, [r3, #4]
 800a8b2:	1852      	addeq	r2, r2, r1
 800a8b4:	6022      	streq	r2, [r4, #0]
 800a8b6:	6063      	str	r3, [r4, #4]
 800a8b8:	6004      	str	r4, [r0, #0]
 800a8ba:	e7ed      	b.n	800a898 <_free_r+0x24>
 800a8bc:	4613      	mov	r3, r2
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	b10a      	cbz	r2, 800a8c6 <_free_r+0x52>
 800a8c2:	42a2      	cmp	r2, r4
 800a8c4:	d9fa      	bls.n	800a8bc <_free_r+0x48>
 800a8c6:	6819      	ldr	r1, [r3, #0]
 800a8c8:	1858      	adds	r0, r3, r1
 800a8ca:	42a0      	cmp	r0, r4
 800a8cc:	d10b      	bne.n	800a8e6 <_free_r+0x72>
 800a8ce:	6820      	ldr	r0, [r4, #0]
 800a8d0:	4401      	add	r1, r0
 800a8d2:	1858      	adds	r0, r3, r1
 800a8d4:	4282      	cmp	r2, r0
 800a8d6:	6019      	str	r1, [r3, #0]
 800a8d8:	d1de      	bne.n	800a898 <_free_r+0x24>
 800a8da:	6810      	ldr	r0, [r2, #0]
 800a8dc:	6852      	ldr	r2, [r2, #4]
 800a8de:	4401      	add	r1, r0
 800a8e0:	6019      	str	r1, [r3, #0]
 800a8e2:	605a      	str	r2, [r3, #4]
 800a8e4:	e7d8      	b.n	800a898 <_free_r+0x24>
 800a8e6:	d902      	bls.n	800a8ee <_free_r+0x7a>
 800a8e8:	230c      	movs	r3, #12
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	e7d4      	b.n	800a898 <_free_r+0x24>
 800a8ee:	6820      	ldr	r0, [r4, #0]
 800a8f0:	1821      	adds	r1, r4, r0
 800a8f2:	428a      	cmp	r2, r1
 800a8f4:	bf01      	itttt	eq
 800a8f6:	6811      	ldreq	r1, [r2, #0]
 800a8f8:	6852      	ldreq	r2, [r2, #4]
 800a8fa:	1809      	addeq	r1, r1, r0
 800a8fc:	6021      	streq	r1, [r4, #0]
 800a8fe:	6062      	str	r2, [r4, #4]
 800a900:	605c      	str	r4, [r3, #4]
 800a902:	e7c9      	b.n	800a898 <_free_r+0x24>
 800a904:	bd38      	pop	{r3, r4, r5, pc}
 800a906:	bf00      	nop
 800a908:	20000410 	.word	0x20000410

0800a90c <_malloc_r>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	1ccd      	adds	r5, r1, #3
 800a910:	f025 0503 	bic.w	r5, r5, #3
 800a914:	3508      	adds	r5, #8
 800a916:	2d0c      	cmp	r5, #12
 800a918:	bf38      	it	cc
 800a91a:	250c      	movcc	r5, #12
 800a91c:	2d00      	cmp	r5, #0
 800a91e:	4606      	mov	r6, r0
 800a920:	db01      	blt.n	800a926 <_malloc_r+0x1a>
 800a922:	42a9      	cmp	r1, r5
 800a924:	d903      	bls.n	800a92e <_malloc_r+0x22>
 800a926:	230c      	movs	r3, #12
 800a928:	6033      	str	r3, [r6, #0]
 800a92a:	2000      	movs	r0, #0
 800a92c:	bd70      	pop	{r4, r5, r6, pc}
 800a92e:	f000 f85b 	bl	800a9e8 <__malloc_lock>
 800a932:	4a23      	ldr	r2, [pc, #140]	; (800a9c0 <_malloc_r+0xb4>)
 800a934:	6814      	ldr	r4, [r2, #0]
 800a936:	4621      	mov	r1, r4
 800a938:	b991      	cbnz	r1, 800a960 <_malloc_r+0x54>
 800a93a:	4c22      	ldr	r4, [pc, #136]	; (800a9c4 <_malloc_r+0xb8>)
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	b91b      	cbnz	r3, 800a948 <_malloc_r+0x3c>
 800a940:	4630      	mov	r0, r6
 800a942:	f000 f841 	bl	800a9c8 <_sbrk_r>
 800a946:	6020      	str	r0, [r4, #0]
 800a948:	4629      	mov	r1, r5
 800a94a:	4630      	mov	r0, r6
 800a94c:	f000 f83c 	bl	800a9c8 <_sbrk_r>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d126      	bne.n	800a9a2 <_malloc_r+0x96>
 800a954:	230c      	movs	r3, #12
 800a956:	4630      	mov	r0, r6
 800a958:	6033      	str	r3, [r6, #0]
 800a95a:	f000 f846 	bl	800a9ea <__malloc_unlock>
 800a95e:	e7e4      	b.n	800a92a <_malloc_r+0x1e>
 800a960:	680b      	ldr	r3, [r1, #0]
 800a962:	1b5b      	subs	r3, r3, r5
 800a964:	d41a      	bmi.n	800a99c <_malloc_r+0x90>
 800a966:	2b0b      	cmp	r3, #11
 800a968:	d90f      	bls.n	800a98a <_malloc_r+0x7e>
 800a96a:	600b      	str	r3, [r1, #0]
 800a96c:	18cc      	adds	r4, r1, r3
 800a96e:	50cd      	str	r5, [r1, r3]
 800a970:	4630      	mov	r0, r6
 800a972:	f000 f83a 	bl	800a9ea <__malloc_unlock>
 800a976:	f104 000b 	add.w	r0, r4, #11
 800a97a:	1d23      	adds	r3, r4, #4
 800a97c:	f020 0007 	bic.w	r0, r0, #7
 800a980:	1ac3      	subs	r3, r0, r3
 800a982:	d01b      	beq.n	800a9bc <_malloc_r+0xb0>
 800a984:	425a      	negs	r2, r3
 800a986:	50e2      	str	r2, [r4, r3]
 800a988:	bd70      	pop	{r4, r5, r6, pc}
 800a98a:	428c      	cmp	r4, r1
 800a98c:	bf0b      	itete	eq
 800a98e:	6863      	ldreq	r3, [r4, #4]
 800a990:	684b      	ldrne	r3, [r1, #4]
 800a992:	6013      	streq	r3, [r2, #0]
 800a994:	6063      	strne	r3, [r4, #4]
 800a996:	bf18      	it	ne
 800a998:	460c      	movne	r4, r1
 800a99a:	e7e9      	b.n	800a970 <_malloc_r+0x64>
 800a99c:	460c      	mov	r4, r1
 800a99e:	6849      	ldr	r1, [r1, #4]
 800a9a0:	e7ca      	b.n	800a938 <_malloc_r+0x2c>
 800a9a2:	1cc4      	adds	r4, r0, #3
 800a9a4:	f024 0403 	bic.w	r4, r4, #3
 800a9a8:	42a0      	cmp	r0, r4
 800a9aa:	d005      	beq.n	800a9b8 <_malloc_r+0xac>
 800a9ac:	1a21      	subs	r1, r4, r0
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 f80a 	bl	800a9c8 <_sbrk_r>
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d0cd      	beq.n	800a954 <_malloc_r+0x48>
 800a9b8:	6025      	str	r5, [r4, #0]
 800a9ba:	e7d9      	b.n	800a970 <_malloc_r+0x64>
 800a9bc:	bd70      	pop	{r4, r5, r6, pc}
 800a9be:	bf00      	nop
 800a9c0:	20000410 	.word	0x20000410
 800a9c4:	20000414 	.word	0x20000414

0800a9c8 <_sbrk_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	4c05      	ldr	r4, [pc, #20]	; (800a9e4 <_sbrk_r+0x1c>)
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	6023      	str	r3, [r4, #0]
 800a9d4:	f000 f874 	bl	800aac0 <_sbrk>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d102      	bne.n	800a9e2 <_sbrk_r+0x1a>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	b103      	cbz	r3, 800a9e2 <_sbrk_r+0x1a>
 800a9e0:	602b      	str	r3, [r5, #0]
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	200014e8 	.word	0x200014e8

0800a9e8 <__malloc_lock>:
 800a9e8:	4770      	bx	lr

0800a9ea <__malloc_unlock>:
 800a9ea:	4770      	bx	lr

0800a9ec <cleanup_glue>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	6809      	ldr	r1, [r1, #0]
 800a9f2:	4605      	mov	r5, r0
 800a9f4:	b109      	cbz	r1, 800a9fa <cleanup_glue+0xe>
 800a9f6:	f7ff fff9 	bl	800a9ec <cleanup_glue>
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa02:	f7ff bf37 	b.w	800a874 <_free_r>
	...

0800aa08 <_reclaim_reent>:
 800aa08:	4b2c      	ldr	r3, [pc, #176]	; (800aabc <_reclaim_reent+0xb4>)
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4283      	cmp	r3, r0
 800aa12:	d051      	beq.n	800aab8 <_reclaim_reent+0xb0>
 800aa14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aa16:	b1ab      	cbz	r3, 800aa44 <_reclaim_reent+0x3c>
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	b16b      	cbz	r3, 800aa38 <_reclaim_reent+0x30>
 800aa1c:	2500      	movs	r5, #0
 800aa1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	5959      	ldr	r1, [r3, r5]
 800aa24:	2900      	cmp	r1, #0
 800aa26:	d141      	bne.n	800aaac <_reclaim_reent+0xa4>
 800aa28:	3504      	adds	r5, #4
 800aa2a:	2d80      	cmp	r5, #128	; 0x80
 800aa2c:	d1f7      	bne.n	800aa1e <_reclaim_reent+0x16>
 800aa2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa30:	4620      	mov	r0, r4
 800aa32:	68d9      	ldr	r1, [r3, #12]
 800aa34:	f7ff ff1e 	bl	800a874 <_free_r>
 800aa38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa3a:	6819      	ldr	r1, [r3, #0]
 800aa3c:	b111      	cbz	r1, 800aa44 <_reclaim_reent+0x3c>
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7ff ff18 	bl	800a874 <_free_r>
 800aa44:	6961      	ldr	r1, [r4, #20]
 800aa46:	b111      	cbz	r1, 800aa4e <_reclaim_reent+0x46>
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f7ff ff13 	bl	800a874 <_free_r>
 800aa4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa50:	b111      	cbz	r1, 800aa58 <_reclaim_reent+0x50>
 800aa52:	4620      	mov	r0, r4
 800aa54:	f7ff ff0e 	bl	800a874 <_free_r>
 800aa58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa5a:	b111      	cbz	r1, 800aa62 <_reclaim_reent+0x5a>
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f7ff ff09 	bl	800a874 <_free_r>
 800aa62:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800aa64:	b111      	cbz	r1, 800aa6c <_reclaim_reent+0x64>
 800aa66:	4620      	mov	r0, r4
 800aa68:	f7ff ff04 	bl	800a874 <_free_r>
 800aa6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800aa6e:	b111      	cbz	r1, 800aa76 <_reclaim_reent+0x6e>
 800aa70:	4620      	mov	r0, r4
 800aa72:	f7ff feff 	bl	800a874 <_free_r>
 800aa76:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800aa78:	b111      	cbz	r1, 800aa80 <_reclaim_reent+0x78>
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f7ff fefa 	bl	800a874 <_free_r>
 800aa80:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aa82:	b111      	cbz	r1, 800aa8a <_reclaim_reent+0x82>
 800aa84:	4620      	mov	r0, r4
 800aa86:	f7ff fef5 	bl	800a874 <_free_r>
 800aa8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa8c:	b111      	cbz	r1, 800aa94 <_reclaim_reent+0x8c>
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f7ff fef0 	bl	800a874 <_free_r>
 800aa94:	69a3      	ldr	r3, [r4, #24]
 800aa96:	b17b      	cbz	r3, 800aab8 <_reclaim_reent+0xb0>
 800aa98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	4798      	blx	r3
 800aa9e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aaa0:	b151      	cbz	r1, 800aab8 <_reclaim_reent+0xb0>
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaa8:	f7ff bfa0 	b.w	800a9ec <cleanup_glue>
 800aaac:	680e      	ldr	r6, [r1, #0]
 800aaae:	4620      	mov	r0, r4
 800aab0:	f7ff fee0 	bl	800a874 <_free_r>
 800aab4:	4631      	mov	r1, r6
 800aab6:	e7b5      	b.n	800aa24 <_reclaim_reent+0x1c>
 800aab8:	bd70      	pop	{r4, r5, r6, pc}
 800aaba:	bf00      	nop
 800aabc:	20000168 	.word	0x20000168

0800aac0 <_sbrk>:
 800aac0:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <_sbrk+0x14>)
 800aac2:	4602      	mov	r2, r0
 800aac4:	6819      	ldr	r1, [r3, #0]
 800aac6:	b909      	cbnz	r1, 800aacc <_sbrk+0xc>
 800aac8:	4903      	ldr	r1, [pc, #12]	; (800aad8 <_sbrk+0x18>)
 800aaca:	6019      	str	r1, [r3, #0]
 800aacc:	6818      	ldr	r0, [r3, #0]
 800aace:	4402      	add	r2, r0
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	4770      	bx	lr
 800aad4:	20000418 	.word	0x20000418
 800aad8:	200014ec 	.word	0x200014ec

0800aadc <__EH_FRAME_BEGIN__>:
 800aadc:	00000000                                ....

0800aae0 <_init>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	bf00      	nop
 800aae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae6:	bc08      	pop	{r3}
 800aae8:	469e      	mov	lr, r3
 800aaea:	4770      	bx	lr

0800aaec <_fini>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	bf00      	nop
 800aaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf2:	bc08      	pop	{r3}
 800aaf4:	469e      	mov	lr, r3
 800aaf6:	4770      	bx	lr
